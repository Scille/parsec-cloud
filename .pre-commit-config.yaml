exclude: ^misc/bench.py$

default_language_version:
  rust: 1.75.0
  node: 18.12.0

repos:
  ##############
  # Common stuff

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0 # Use the ref you want to point at
    hooks:
      - id: mixed-line-ending
        alias: eol
      - id: trailing-whitespace
        exclude_types: [svg]
      - id: end-of-file-fixer
        alias: eof
        exclude_types: [svg]
        # `libparsec/version` must not have a trailing newline !
        exclude: ^libparsec/version$

  - repo: local
    hooks:
      # - id: releaser
      #   name: releaser
      #   entry: python ./misc/releaser.py check
      #   language: python
      #   language_version: python3
      #   pass_filenames: false
      #   require_serial: true
      - id: license_headers
        name: license_headers
        alias: headers
        entry: python ./misc/license_headers.py add
        language: python
        language_version: python3
        # see: https://github.com/pre-commit/identify/blob/master/identify/extensions.py
        types_or:
          [
            python,
            pyi,
            sql,
            rust,
            vue,
            ts,
            tsx,
            javascript,
            jsx,
            c++,
            c,
            idl,
            jinja,
            markdown,
            scss,
          ]

  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint

  - repo: https://github.com/streetsidesoftware/cspell-cli
    rev: v8.10.1
    hooks:
      - id: cspell
        stages:
          - manual
        args:
          - --config=./.cspell/cspell.config.yml
          - --no-progress
          - --dot
          - --no-must-find-files
          - --no-summary
          - --gitignore
        additional_dependencies:
          - "@cspell/dict-en_us"
          - "@cspell/dict-fr-fr"
          - "@cspell/dict-fr-reforme"
          - "@cspell/dict-bash"
          - "@cspell/dict-shell"
          - "@cspell/dict-win32"

  # ShellCheck, the static analysis tool for shell scripts
  #
  # We do not use the official pre-commit hook [0] because it requires
  # docker executable (see [1]).
  # To learn more about a specific error or warning, take a look at
  # shellcheck's wiki (e.g. for SC1090 directive, see [2]).
  # [0] https://github.com/koalaman/shellcheck-precommit
  # [1] https://github.com/koalaman/shellcheck/issues/2495
  # [2] https://www.shellcheck.net/wiki/SC1090
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        args: [--exclude=SC1090, --severity=warning]

  # SQLFluff, The SQL Linter for Humans
  #
  # See https://docs.sqlfluff.com/en/stable/index.html
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 3.1.0
    hooks:
      - id: sqlfluff-lint

  ########
  # Python

  # Long story short we cannot use pre-commit isolated venv system for mypy
  # given mypy requires to have access to the project dependencies.
  # We used to specify the list of dependencies actually needed by mypy as
  # additional dependencies to install before running the pre-commit but it
  # was incredibly error-prone and create random breakages.
  # Instead we go the pragmatic way by calling mypy trough poetry:
  # - `poetry run` will stick to the shell current virtual env
  # - if the shell is not into a virtual env, poetry will create one and install Parsec&deps
  # - lastly, mypy is started
  # So this is similar to what the developer does when running mypy from it dev shell \o/
  #
  # Now that we use poetry to run mypy, why not also use it for ruff linter & formatter !
  # This have the following benefits:
  # - It prevents going out of sync in tools version between pre-commit-config
  #   and poetry.lock
  # - It saves time on initial run because we don't have to create isolated
  #   virtualenv for those tools
  # - Pre-commit hook are really simple, so it's no big deal to inline them.
  # - Pre-commit hook need sometime tweaks (e.g. ruff hook not correctly
  #   handling .pyi), it's more readable then to have all the config here then.
  - repo: local
    hooks:
      - id: ruff
        name: ruff (using `poetry run ruff`)
        # Wow this looks ugly ! But there is a reason why:
        # - Ruff's `extend-exclude` doesn't work if it is not run from it config's folder
        # - Pre-commit only run script from the repo root directory
        # - A file passed as parameter is check by Ruff even if it part of `extend-exclude`
        # - Splitting lines with YAML add heading whitespaces for no reason, and Python
        #   then complains about indentation :'(
        #
        # So (after a lot of pain) we came up with this: a one liner (because YAML)
        # of a Python script that jumps in the correct directory (because pre-commit)
        # to run Ruff on the whole codebase (because Ruff).
        #
        # Fortunately Ruff is (as cool kids say) blazingly fast, so it's no big
        # deal to check everything on each run.
        entry: poetry --directory ./server run python -c 'import os;os.chdir("./server");os.execlp("ruff", "ruff", "check", "--fix", "./parsec", "./tests", "../docs", "../make.py", "../misc");'
        require_serial: true
        pass_filenames: false
        language: system
        types_or: [python, pyi]

      - id: black # Still named `black` as it makes a unique recognizable name
        name: black (using `poetry run ruff format`)
        entry: poetry --directory ./server run ruff format
        require_serial: true
        language: system
        types_or: [python, pyi]
        args: [--config=server/pyproject.toml]

      - id: pyright
        name: Pyright (using `poetry run pyright`)
        entry: poetry --directory ./server run pyright
        require_serial: true
        language: system
        types_or: [python, pyi]
        args: [--project=server/]

      - id: deptry
        name: deptry
        entry: poetry --directory ./server run deptry server --config=server/pyproject.toml
        files: ^server/
        types_or: [python, pyproj]
        pass_filenames: false  # no need to pass filenames, deptry expects only the root directory to scan
        require_serial: true
        language: system

  ######
  # Rust

  - repo: local
    hooks:
      - id: fmt
        name: fmt
        entry: cargo fmt
        language: system
        types: [rust]
        args: [--]

      - &clippy
        id: clippy
        name: clippy
        entry: cargo clippy
        language: system
        types: [rust]
        pass_filenames: false
        args:
          [
            --workspace,
            --tests,
            --bins,
            --lib,
            --exclude=libparsec_bindings_android,
            --exclude=libparsec_bindings_web,
            --exclude=libparsec_bindings_electron,
            --,
            --deny=warnings,
            --deny=clippy::undocumented_unsafe_blocks,
            --deny=clippy::unwrap_used,
          ]

      - id: clippy-fix
        name: clippy-fix
        entry: cargo clippy
        language: system
        types: [rust]
        pass_filenames: false
        stages:
          - manual
        args:
          [
            --workspace,
            --tests,
            --bins,
            --lib,
            --exclude=libparsec_bindings_android,
            --exclude=libparsec_bindings_web,
            --exclude=libparsec_bindings_electron,
            --fix,
            --allow-staged,
            --,
            --deny=warnings,
            --deny=clippy::undocumented_unsafe_blocks,
            --deny=clippy::unwrap_used,
          ]

  ####
  # Js

  - repo: local
    hooks:
      - id: eslint
        name: eslint
        entry: eslint
        language: node
        files: ^client/
        # see: https://github.com/pre-commit/identify/blob/master/identify/extensions.py
        types_or: [vue, ts, tsx, javascript, jsx]
        args: [--config=client/.eslintrc.cjs]
        stages:
          - manual
        # Deps should be kept updated with `client/package-lock.json` !
        additional_dependencies:
          - "@intlify/eslint-plugin-vue-i18n@2.0.0"
          - "@typescript-eslint/eslint-plugin@5.55.0"
          - "@typescript-eslint/parser@5.55.0"
          - "@vue/eslint-config-typescript@10.0.0"
          - eslint@8.36.0
          - eslint-config-standard-with-typescript@34.0.1
          - eslint-plugin-cypress@2.12.1
          - eslint-plugin-import@2.27.5
          - eslint-plugin-n@15.6.1
          - eslint-plugin-promise@6.1.1
          - eslint-plugin-vue@8.7.1

  - repo: local
    hooks:
      - id: prettier
        name: prettier
        entry: >-
          npx prettier
          --config=client/.prettierrc.json5
          --ignore-path=client/.prettierignore
          --write
        language: node
        files: ^client/
        types_or: [vue, ts, tsx, javascript, jsx, html]
        stages:
          - manual
        additional_dependencies:
          - prettier@3.0.3

  ######
  # JSON

  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.28.6
    hooks:
      - id: check-jsonschema
        name: Validate protocol files with jsonschema
        alias: check-protocol-schema
        types_or: [json5]
        files: ^libparsec/crates/protocol/schema/
        args: [--schemafile, json_schema/protocol.schema.json]
        additional_dependencies: [json5]

      - id: check-jsonschema
        name: Validate data files with jsonschema
        alias: check-data-schema
        types_or: [json5]
        files: ^libparsec/crates/types/schema/
        args: [--schemafile, json_schema/data.schema.json]
        additional_dependencies: [json5]

      - id: check-metaschema
        files: ^json_schema/

      - id: check-jsonschema
        name: Validate Read the doc configuration files
        alias: check-readthedocs
        files: .readthedocs.yml
        args:
          [
            --schemafile,
            https://raw.githubusercontent.com/readthedocs/readthedocs.org/main/readthedocs/rtd_tests/fixtures/spec/v2/schema.json,
          ]

      - id: check-jsonschema
        name: Validate snapcraft config
        alias: check-snapcraft
        files: ^packaging/snap/snap/snapcraft.yaml
        args:
          [
            --schemafile,
            https://raw.githubusercontent.com/snapcore/snapcraft/main/schema/snapcraft.json,
          ]
