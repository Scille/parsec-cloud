{
    "label": "LocalUserManifest",
    "type": "local_user_manifest",
    "other_fields": [
        {
            "name": "base",
            "type": "UserManifest"
        },
        {
            "name": "need_sync",
            "type": "Boolean"
        },
        {
            "name": "updated",
            "type": "DateTime"
        },
        {
            // While this field has been deprecated in `UserManifest`, it is still in use
            // here. This field is used to store the name of the realm:
            // - When the realm got created, its name is stored here until the initial
            //   `RealmNameCertificate` is uploaded (which can take time, e.g. if the
            //   client is offline).
            // - After that, to access the workspace name even when the client is offline (given
            //   `RealmNameCertificate` contains the name encrypted, but the decryption key
            //   must be fetched by `realm_get_keys_bundle` (which cannot be done while offline).
            "name": "workspaces",
            "type": "List<LocalUserManifestWorkspaceEntryData>"
        },
        {
            // Speculative placeholders are created when we want to access the
            // user manifest but didn't retrieve it from server yet. This implies:
            // - Non-placeholders cannot be speculative.
            // - The only non-speculative placeholder is the placeholder initialized
            //   during the initial user claim (by opposition of subsequent device
            //   claims on the same user).
            // This speculative information is useful during merge to understand if
            // a data is not present in the placeholder compared with a remote because:
            // a) The data is not locally known (speculative is True).
            // b) The data is known, but has been locally removed (speculative is False).
            //
            // Prevented to be `required=True` by backward compatibility
            "name": "speculative",
            "type": "Boolean",
            // Hack to indicate this field was added in Parsec v1.15, given revision is meaningless for data
            "introduced_in_revision": 115
        },

        // Following fields are deprecated and kept only for documentation purpose.

        {
            "name": "last_processed_message",
            "type": "Index",
            // Deprecated in Parsec v3.0: message commands have been removed in APIv4
            "deprecated_in_revision": 300
        }
    ],
    "nested_types": [
        {
            "name": "CertificateBasedInfoOrigin",
            "discriminant_field": "type",
            "variants": [
                // Info comes from a certificate, this is the eventually consistent outcome.
                {
                    "name": "Certificate",
                    "discriminant_value": "CERTIFICATE",
                    "fields": [
                        {
                            // Timestamp of the certificate that contains the info.
                            "name": "timestamp",
                            "type": "DateTime"
                        }
                    ]
                },
                // Workspace has no certificate for this info that we are aware yet.
                //
                // The most likely reason for this is that the workspace has just been created locally.
                //
                // If the info is the realm's name, another reason is that the workspace has been
                // shared with us before it has a realm name certificate.
                // This is theorically possible, though unlikely: it should only be encountered
                // when dealing with a workspace shared with Parsec < v3 (as, at that time, realm
                // name certificate didn't exist, and in Parsec >= v3 we ensure the workspace is
                // bootstrapped before sharing it).
                //
                // In any case, this is a temporary state and the eventual outcomes are:
                // - A realm certificate is fetched and it info the placeholder.
                // - We are the ones uploading the initial info certificate, in which case
                //   the placeholder will become the offical info.
                {
                    "name": "Placeholder",
                    "discriminant_value": "PLACEHOLDER"
                }
            ],
            // Hack to indicate this field was added in Parsec v3.0, given revision is meaningless for data
            "introduced_in_revision": 300
        },
        {
            "name": "LocalUserManifestWorkspaceEntryData",
            "fields": [
                {
                    "name": "id",
                    "type": "VlobID"
                },
                {
                    "name": "name",
                    "type": "EntryName"
                },
                {
                    "name": "name_origin",
                    "type": "CertificateBasedInfoOrigin",
                    // Hack to indicate this field was added in Parsec v3.0, given revision is meaningless for data
                    // If this field is missing, it defaults to `PLACEHOLDER`.
                    "introduced_in_revision": 300
                },
                {
                    "name": "role",
                    // This field should be mandatory, however it must be optional for backward compatibility.
                    // In Parsec < v3.0, a `None` value means the workspace was no longer shared with us.
                    // Hence the entry should be ignored during deserialization if this field is `None`.
                    "type": "RequiredOption<RealmRole>"
                },
                {
                    "name": "role_origin",
                    "type": "CertificateBasedInfoOrigin",
                    // Hack to indicate this field was added in Parsec v3.0, given revision is meaningless for data
                    // If this field is missing, it defaults to `PLACEHOLDER`.
                    "introduced_in_revision": 300
                },

                // Following fields are deprecated and kept only for documentation purpose.

                {
                    "name": "key",
                    "type": "SecretKey",
                    // Deprecated in Parsec v3.0: in APIv4 keys are accessed by `realm_get_keys_bundle` command.
                    // Regarding backward compatibility, legacy key is only important if it
                    // has been used to upload data, which is supposed to occured only
                    // after a minimal sync on the realm. And at this point the user manifest
                    // has been synced with the new workspace entry containing this key.
                    // Hence we only need to fetch the legacy key from the user manifest.
                    "deprecated_in_revision": 300
                },
                {
                    "name": "encryption_revision",
                    "type": "Index",
                    // Deprecated in Parsec v3.0: APIv4 has replaced reencryption by key rotation
                    "deprecated_in_revision": 300
                },
                {
                    "name": "encrypted_on",
                    "type": "DateTime",
                    // Deprecated in Parsec v3.0: APIv4 has replaced reencryption by key rotation
                    "deprecated_in_revision": 300
                },
                {
                    "name": "role_cache_timestamp",
                    "type": "DateTime",
                    // Deprecated in Parsec v3.0: in APIv4 client greedily fetch certificates
                    "deprecated_in_revision": 300
                },
                {
                    "name": "role_cache_value",
                    "type": "RequiredOption<RealmRole>",
                    // Deprecated in Parsec v3.0: in APIv4 client greedily fetch certificates
                    "deprecated_in_revision": 300
                }
            ]
        }
    ]
}
