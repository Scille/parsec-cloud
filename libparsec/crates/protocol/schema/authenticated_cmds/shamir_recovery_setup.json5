[
    {
        "major_versions": [
            4
        ],
        "req": {
            "cmd": "shamir_recovery_setup",
            "fields": [
                {
                    // The actual data we want to recover.
                    // It is encrypted with `data_key` that is itself split into shares.
                    // This should contain a serialized `LocalDevice`
                    "name": "ciphered_data",
                    "type": "Bytes"
                },
                {
                    // The token the claimer should provide to get access to `ciphered_data`.
                    // This token is split into shares, hence it acts as a proof the claimer
                    // asking for the `ciphered_data` had its identity confirmed by the recipients.
                    "name": "reveal_token",
                    "type": "InvitationToken"
                },
                {
                    // The Shamir recovery setup provided as a `ShamirRecoveryBriefCertificate`.
                    // It contains the threshold for the quorum and the shares recipients.
                    // This field has a certain level of duplication with the "shares" below,
                    // but they are used for different things (each encrypted share is
                    // only provided to its recipient, so the shamir recovery author wont't
                    // get any).
                    "name": "shamir_recovery_brief_certificate",
                    "type": "Bytes"
                },
                {
                    // The shares provided as a `ShamirRecoveryShareCertificate` since
                    // each share is aimed at a specific recipient.
                    "name": "shamir_recovery_share_certificates",
                    "type": "List<Bytes>"
                }
            ]
        },
        "reps": [
            {
                "status": "ok"
            },
            {
                // Deserialization or signature verification error in the brief certificate.
                "status": "invalid_certificate_brief_corrupted"
            },
            {
                // Deserialization or signature verification error in a share certificate.
                "status": "invalid_certificate_share_corrupted"
            },
            {
                "status": "invalid_certificate_share_recipient_not_in_brief"
            },
            {
                "status": "invalid_certificate_duplicate_share_for_recipient"
            },
            {
                "status": "invalid_certificate_author_included_as_recipient"
            },
            {
                "status": "invalid_certificate_missing_share_for_recipient"
            },
            {
                "status": "invalid_certificate_share_inconsistent_timestamp"
            },
            {
                "status": "invalid_certificate_user_id_must_be_self"
            },
            {
                "status": "recipient_not_found"
            },
            {
                "status": "revoked_recipient",
                "fields": [
                    {
                        "name": "last_common_certificate_timestamp",
                        "type": "DateTime"
                    }

                ]
            },
            {
                "status": "shamir_recovery_already_exists",
                "fields": [
                    {
                        "name": "last_shamir_certificate_timestamp",
                        "type": "DateTime"
                    }

                ]
            },
            {
                // Returned if the timestamp in the certificate is too far away compared
                // to server clock.
                "status": "timestamp_out_of_ballpark",
                "fields": [
                    {
                        "name": "ballpark_client_early_offset",
                        "type": "Float"
                    },
                    {
                        "name": "ballpark_client_late_offset",
                        "type": "Float"
                    },
                    {
                        "name": "server_timestamp",
                        "type": "DateTime"
                    },
                    {
                        "name": "client_timestamp",
                        "type": "DateTime"
                    }
                ]
            },
            {
                // Returned if another certificate in the server has a timestamp
                // posterior or equal to our current one.
                "status": "require_greater_timestamp",
                "fields": [
                    {
                        "name": "strictly_greater_than",
                        "type": "DateTime"
                    }
                ]
            }
        ]
    }
]
