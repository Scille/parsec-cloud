[
    {
        "major_versions": [
            5
        ],
        "req": {
            "cmd": "vlob_update",
            "fields": [
                {
                    "name": "vlob_id",
                    "type": "VlobID"
                },
                // The key index is used to identify which key in the keys bundle has
                // been used to encrypt the blob.
                // Note 0 is allowed (used by user realm where there is only a single key).
                {
                    "name": "key_index",
                    "type": "Index"
                },
                // Blob is expected to contain encrypted data, so the server cannot enforce
                // the timestamp in case the content is signed.
                // Hence the timestamp is provided in clear so the server can reject the
                // request if it considers it is out of ballpark.
                // On top of that, each client fetching the blob will also receive this
                // declared timestamp in order to check it corresponds with the actual
                // timestamp within the decrypted data.
                {
                    "name": "timestamp",
                    "type": "DateTime"
                },
                {
                    "name": "version",
                    "type": "Version"
                },
                {
                    "name": "blob",
                    "type": "Bytes"
                }
            ]
        },
        "reps": [
            {
                "status": "ok"
            },
            {
                "status": "author_not_allowed"
            },
            {
                // If the `key_index` in the certificate is not currently the realm's last
                "status": "bad_key_index",
                "fields": [
                    {
                        "name": "last_realm_certificate_timestamp",
                        "type": "DateTime"
                    }
                ]
            },
            {
                "status": "vlob_not_found"
            },
            {
                "status": "bad_vlob_version"
            },
            {
                // In case of a sequestered organization, sequester services can be
                // configured to be notified by a webhook on modifications and to
                // have the ability to reject them.
                "status": "rejected_by_sequester_service",
                "fields": [
                    {
                        "name": "service_id",
                        "type": "SequesterServiceID"
                    },
                    {
                        // Optional arbitrary message provided by the sequester service to explain
                        // why it rejects the modification.
                        "name": "reason",
                        "type": "RequiredOption<String>"
                    }
                ]
            },
            {
                // In case of a sequestered organization, sequester services can be
                // configured to be notified on modifications and to have the ability to
                // reject them.
                // This status indicate the sequester service is requested to accept the
                // modification but cannot do so because it is currently unavailable.
                "status": "sequester_service_unavailable",
                "fields": [
                    {
                        "name": "service_id",
                        "type": "SequesterServiceID"
                    }
                ]
            },
            {
                // Returned if the timestamp in the certificate is too far away compared
                // to server clock.
                "status": "timestamp_out_of_ballpark",
                "fields": [
                    {
                        "name": "ballpark_client_early_offset",
                        "type": "Float"
                    },
                    {
                        "name": "ballpark_client_late_offset",
                        "type": "Float"
                    },
                    {
                        "name": "server_timestamp",
                        "type": "DateTime"
                    },
                    {
                        "name": "client_timestamp",
                        "type": "DateTime"
                    }
                ]
            },
            {
                // Returned if another certificate in the server has a timestamp
                // posterior or equal to our current one.
                "status": "require_greater_timestamp",
                "fields": [
                    {
                        "name": "strictly_greater_than",
                        "type": "DateTime"
                    }
                ]
            }
        ]
    }
]
