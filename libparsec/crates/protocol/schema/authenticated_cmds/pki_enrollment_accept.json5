[
    {
        "major_versions": [
            5
        ],
        "cmd": "pki_enrollment_accept",
        "req": {
            "fields": [
                {
                    // The enrollment ID to be accepted
                    "name": "enrollment_id",
                    "type": "EnrollmentID"
                },
                {
                    // `PkiEnrollmentAnswerPayload` in msgpack format
                    "name": "payload",
                    "type": "Bytes"
                },
                {
                    // The payload signature, should be checked before loading
                    "name": "payload_signature",
                    "type": "Bytes"
                },
                {
                    // Certificate used by the accepter to sign the payload
                    "name": "accepter_der_x509_certificate",
                    "type": "Bytes"
                },
                {
                    // User certificate for the submitter (created by the accepter)
                    "name": "submitter_user_certificate",
                    "type": "Bytes"
                },
                {
                    // Device certificate for the submitter (created by the accepter)
                    "name": "submitter_device_certificate",
                    "type": "Bytes"
                },
                {
                    // Same certificate than `submitter_user_certificate` but expunged of `human_handle`
                    "name": "submitter_redacted_user_certificate",
                    "type": "Bytes"
                },
                {
                    // Same certificate than `submitter_device_certificate` but expunged of `device_label`
                    "name": "submitter_redacted_device_certificate",
                    "type": "Bytes"
                }
            ]
        },
        "reps": [
            {
                "status": "ok"
            },
            {
                // The user does not have the permission required to perform this action
                "status": "author_not_allowed"
            },
            {
                // The payload is not correctly formatted
                "status": "invalid_payload_data"
            },
            {
                // The provided certificate is not valid
                "status": "invalid_certificate"
            },
            {
                // The server did not found a request for the provided ID
                "status": "enrollment_not_found"
            },
            {
                // The request is no longer in pending state (either accepted or rejected)
                "status": "enrollment_no_longer_available"
            },
            {
                // The organization has reached the maximum number of active users
                "status": "active_users_limit_reached"
            },
            {
                // The user already exist in the organization
                "status": "user_already_exists"
            },
            {
                // The user's human handle is already taken
                "status": "human_handle_already_taken"
            },
            {
                // The timestamp in the certificate is too far away compared to server clock
                "status": "timestamp_out_of_ballpark",
                "fields": [
                    {
                        "name": "ballpark_client_early_offset",
                        "type": "Float"
                    },
                    {
                        "name": "ballpark_client_late_offset",
                        "type": "Float"
                    },
                    {
                        "name": "server_timestamp",
                        "type": "DateTime"
                    },
                    {
                        "name": "client_timestamp",
                        "type": "DateTime"
                    }
                ]
            },
            {
                // The timestamp is earlier or equal to an existing certificate in the server
                "status": "require_greater_timestamp",
                "fields": [
                    {
                        "name": "strictly_greater_than",
                        "type": "DateTime"
                    }
                ]
            }
        ]
    }
]
