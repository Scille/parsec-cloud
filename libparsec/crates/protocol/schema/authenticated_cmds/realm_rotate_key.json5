[
    {
        "major_versions": [4],
        "req": {
            "cmd": "realm_rotate_key",
            "fields": [
                {
                    // Signed `RealmKeyRotationCertificate` certificate,
                    // contains realm_id & key_index
                    "name": "realm_key_rotation_certificate",
                    "type": "Bytes"
                },
                {
                    // Per-participant (including self) signed&encrypted
                    // `RealmKeysBundleAccess` document, contains the key to
                    // decrypt `keys_bundle` field
                    "name": "per_participant_keys_bundle_access",
                    "type": "Map<UserID, Bytes>"
                },
                // Field set to `None` if sequester is disabled for the organization.
                {
                    "name": "per_sequester_service_keys_bundle_access",
                    "type": "RequiredOption<Map<SequesterServiceID, Bytes>>"
                },
                {
                    // Signed&encrypted `RealmKeysBundle` document, contains all the
                    // keys ever in use for this realm
                    "name": "keys_bundle",
                    "type": "Bytes"
                }
            ]
        },
        "reps": [
            {
                "status": "ok"
            },
            {
                // If the user doesn't have OWNER role in the realm
                "status": "author_not_allowed"
            },
            {
                "status": "realm_not_found"
            },
            {
                // If the `key_index` in the certificate is not currently the realm's last one plus one
                "status": "bad_key_index",
                "fields": [
                    {
                        "name": "last_realm_certificate_timestamp",
                        "type": "DateTime"
                    }
                ]
            },
            {
                "status": "participant_mismatch",
                "fields": [
                    {
                        "name": "last_common_certificate_timestamp",
                        "type": "DateTime"
                    }
                ]
            },
            {
                "status": "sequester_service_mismatch",
                "fields": [
                    {
                        "name": "last_sequester_certificate_timestamp",
                        "type": "DateTime"
                    }
                ]
            },
            {
                "status": "invalid_certificate"
            },
            {
                "status": "organization_not_sequestered"
            },
            {
                "status": "rejected_by_sequester_service",
                "fields": [
                    {
                        "name": "service_id",
                        "type": "SequesterServiceID"
                    },
                    {
                        "name": "reason",
                        "type": "String"
                    }
                ]
            },
            {
                "status": "sequester_service_unavailable",
                "fields": [
                    {
                        "name": "service_id",
                        "type": "SequesterServiceID"
                    }
                ]
            },
            {
                // Returned if the timestamp in the certificate is too far away compared
                // to server clock.
                "status": "timestamp_out_of_ballpark",
                "fields": [
                    {
                        "name": "ballpark_client_early_offset",
                        "type": "Float"
                    },
                    {
                        "name": "ballpark_client_late_offset",
                        "type": "Float"
                    },
                    {
                        "name": "server_timestamp",
                        "type": "DateTime"
                    },
                    {
                        "name": "client_timestamp",
                        "type": "DateTime"
                    }
                ]
            },
            {
                // Returned if another certificate or vlob in the server has a timestamp
                // posterior or equal to our current one.
                "status": "require_greater_timestamp",
                "fields": [
                    {
                        "name": "strictly_greater_than",
                        "type": "DateTime"
                    }
                ]
            }
        ]
    }
]
