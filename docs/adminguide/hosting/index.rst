.. Parsec Cloud (https://parsec.cloud) Copyright (c) BUSL-1.1 2016-present Scille SAS

.. cspell:words conninfo literalinclude linenos

.. _doc_adminguide_hosting:

.. role:: bash(code)
  :language: bash

.. role:: yaml(code)
  :language: yaml

==========================
Parsec Server installation
==========================

This guide covers the installation procedure for the `Parsec`_ server (also called `parsec-backend`).

.. _Parsec: https://parsec.cloud

Requirements
************

- `Docker`_ and the `docker-compose`_ plugin.
- `Parsec client`_ (Linux).

.. _Docker: https://www.docker.com
.. _docker-compose: https://docs.docker.com/compose/
.. _parsec client: https://parsec.cloud/get-parsec

Preamble
********

The `Parsec`_ server depends on the following external components in order to work properly:

- A `PostgreSQL`_ database to store the metadata.
- An `S3 object storage`_ to store the data blocks.

  .. note::

    The `Parsec`_ server need access to an ``S3 object storage``-like service, not necessarily ``AWS S3``

- An `SMTP server`_ for sending emails.
- A `TSL/SSL server certificate`_ for ``HTTPS`` communication with the clients.

.. _PostgreSQL: https://www.postgresql.org/
.. _S3 object storage: https://aws.amazon.com/s3/
.. _SMTP server: https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol
.. _TSL/SSL server certificate: https://en.wikipedia.org/wiki/Public_key_certificate#TLS/SSL_server_certificate

.. warning::

  For security reasons, the installation of these components is outside the scope of this guide.
  In order to securely configure and manage them, please refer to their official documentations.

  This guide provides instructions for quickly settings up mock-ups or basic installs of those components.
  Keep in mind that these instructions are provided for convenience and **should not be used in production**.

Parsec testing infra
********************

Generating the required TLS certificates
========================================

For this guide, the required TLS certificates will be generated with a custom Certificate Authority (CA) created for this purpose.

.. literalinclude:: setup-tls.sh
  :language: bash
  :linenos:

The script will:

1. Generate the CA key & self-signed certificate (``custom-ca.{key,crt}``).
2. For ``parsec-s3`` and ``parsec-backend`` services:

   a. Generate the service key & Certificate Signing Request (CSR) ``parsec-{service}.{key,csr}``.
   b. Generate the certificate using the CSR and the CA.

3. For the service ``parsec-backend``:

   a. Change the group id of the key file to ``1234`` (That is the GID used by the ``parsec-server`` container).
   b. Change the file mode to give read permission to the group ``1234``.

   .. note::

      This is required because ``docker-compose`` does not allow to mount the file with the correct
      permissions in the container.

.. warning::

  For production, you should use certificates issued from a trusted CA

The env files
=============

We split the configuration of the parsec server into multiple env files so it's simpler to understand how to configure each part.

The administration token
------------------------

To be able to perform admin tasks (like creating an organization) on the backend, an administration token is required.
Below you will find a simple script to generate a token:

.. literalinclude:: gen-admin-token.sh
  :language: shell
  :linenos:

The script will generate a random token (:bash:`openssl rand 63 | base64 --wrap=86`) and create the env file ``parsec-admin-token.env``

.. note::

  The step :bash:`TOKEN=$(openssl rand 63 | base64 --wrap=86)` could also be replaced by a value generated by a password-generator for example.

  It doesn't need to be encoded in ``base64`` (we encode it in the script just to have printable characters).

Database configuration
----------------------

Create the file ``parsec-db.env`` with the following content to configure the access to the PostgreSQL database:

.. literalinclude:: parsec-db.env
  :language: ini
  :linenos:

SMTP configuration
------------------

Create the file ``parsec-smtp.env`` to configure the access to the SMTP server (``mailhog`` in this case).

We need to set the connection informations, the sender information, in which the default language the emails are sent:

.. literalinclude:: parsec-smtp.env
  :language: ini
  :linenos:

S3 service configuration
------------------------

Create the file ``parsec-s3.env`` with the following content to set the URL for the S3-like service:

.. literalinclude:: parsec-s3.env
  :language: ini
  :linenos:

.. note::

   We need to escape the ``:`` with a ``\`` when specifying the port of the service.

Parsec server configuration
---------------------------

Create the file ``parsec.env`` with the following content to configure the ``parsec-backend`` service:

.. literalinclude:: parsec.env
  :language: ini
  :linenos:

The docker-compose file
=======================

You can use the following `docker-compose`_ file (``parsec-server.docker.yaml``) to deploy the Parsec server for testing:

.. literalinclude:: parsec-server.docker.yaml
  :language: yaml
  :linenos:

It will setup 4 services:

+---------------------+----------------------------+
| Service name        | Description                |
+=====================+============================+
| ``parsec-postgres`` | The PostgreSQL database    |
+---------------------+----------------------------+
| ``parsec-s3``       | The Object Storage service |
+---------------------+----------------------------+
| ``parsec-smtp``     | A mock SMTP server         |
+---------------------+----------------------------+
| ``parsec-backend``  | The Parsec server          |
+---------------------+----------------------------+

Starting the services
=====================

The docker containers can be started as follow:

.. code-block:: bash

  docker compose -f parsec-server.docker.yaml up

Initial configuration
=====================

On the first start, a one-time configuration is required for the database and s3 services.

Applying the database migration
-------------------------------

(optional) Check that the database is accessible with:

.. code-block:: bash

  set -a
  source parsec-db.env
  docker exec -t parsec-postgres psql 'postgresql://DB_USER:DB_PASS@0.0.0.0:5432/parsec' -c "\conninfo"

.. note::

  You should have something like display on your console:

  .. code-block::

    You are connected to database "parsec" as user "parsec" on host "0.0.0.0" at port "5432".

To bootstrap the database we just need to apply the migrations with:

.. code-block:: bash

  docker compose -f parsec-server.docker.yaml run parsec-backend migrate

Create the S3 Bucket
--------------------

Access the console at https://127.0.0.1:9090, you will need to use the credential specified in the ``docker-compose`` file at :yaml:`services.parsec-s3.environment.MINIO_ROOT_{USER,PASSWORD}`.

Go to https://127.0.0.1:9090/buckets/add-bucket to create a new bucket named ``parsec`` with the features ``object locking`` toggled on.

After that you will need to restart the ``parsec-backend`` (that likely exited because it wasn't able to access the S3 bucket):

.. code-block:: bash

  docker compose -f parsec-server.docker.yaml restart parsec-backend

Test the SMTP configuration & server
------------------------------------

You can test ``mailhog`` with:

.. literalinclude:: ping-mailhog.sh
  :language: bash
  :linenos:

You can then check if the email is present in the web interface at http://127.0.0.1:8025

Start using Parsec server
*************************

Create the first organization
=============================

.. code-block:: bash

  set -a
  source parsec-admin-token.env
  export SSL_CAFILE=$PWD/custom-ca.crt
  parsec.cli core create_organization --addr parsec://127.0.0.1:6777 <orgname>

.. note::

   Change ``<orgname>`` to the organization's name that suit you.

Save the link after ``Bootstrap organization url:`` you will need it to create the first user (owner) of the organization.

Add the first user to the organization
======================================

First, start ``parsec`` with the custom CA:

.. code-block:: bash

  export SSL_CAFILE=$PWD/custom-ca.crt
  parsec

After that go to ``Menu``/``Join an organization`` (or ``CTRL+O``) and paste the link from before (should already be filled in the text field). Follow the instructions to create the first user of the organization.
