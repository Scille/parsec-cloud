[project]
name = "parsec-cloud"
version = "3.4.1-a.0+dev"
description = "Secure file sharing in the cloud"
authors = [{name = "Scille SAS", email = "contact@scille.fr"}]
license = "BUSL-1.1"
keywords = ["parsec", "cryptography", "sharing", "encryption"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.12",
]
requires-python = "~=3.12.0"

dependencies = [
    # Base requirements
    "anyio>=3.7.1",
    "click>=8.0",
    "httpx>=0.28.1",
    "pbr>=6.1.1",
    "pydantic>=2.10.6",
    "pydantic-core>=2.27.2",
    "sentry-sdk>=2.30.0",
    "starlette>=0.47.2",
    "structlog>=25.4.0",
    # ASGI server
    "fastapi>=0.116.1",
    "uvicorn>=0.35.0",
    "jinja2>=3.0",
    # PostgreSQL
    "asyncpg>=0.29.0",
    # S3
    "boto3>=1.38",
    "botocore>=1.38",
    # Swift
    "python-swiftclient>=4.8.0",
]

[project.urls]
Homepage = "https://github.com/Scille/parsec-cloud"
Documentation = "https://docs.parsec.cloud"

[project.scripts]
parsec = "parsec.cli:cli"

[project.optional-dependencies]
dev = [
    "asyncpg-stubs>=0.29.0",
    "Babel>=2.10",
    "boto3-stubs>=1.38",
    "cibuildwheel>=3.0.0",
    "deptry>=0.23.0",
    "editorconfig-checker>=3.2.1",
    "httpx-sse>=0.4.0",
    "maturin>=1.8.7",
    "patchelf>=0.17.2.1; platform_system=='Linux'",
    "psutil>=7.0.0",
    "pyright>=1.1.353",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-rerunfailures>=15.1",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.1",
    "ruff>=0.12.0",
    "setuptools>=80.9.0",
    "trustme>=1.2.1",
    "types-requests>=2.28",
    "sqlfluff>=3.1.1",
]
testbed-server = [
    "psutil>=7.0.0",
]


[tool.cibuildwheel]
build = "cp312-{manylinux,macos,win}*"
archs = ["auto64"]
build-verbosity = 3
before-all = "bash {project}/misc/setup-rust.sh"
before-build = "python -m pip install -U pip"
test-command = "parsec --version"

[tool.cibuildwheel.linux]
# perl-IPC-Cmd needed to build openssl
before-all = "yum install -y perl-IPC-Cmd && bash {project}/misc/setup-rust.sh"

[tool.cibuildwheel.environment]
# As its name suggests, `misc/setup-rust.sh` (run during cibuildwheel's before-all) will
# install Rust if it is not already available. In this case, Rust bin dir was previously
# non-existent and hence $PATH don't know about it (and maturin will fail when calling cargo).
# For this reason we force $PATH to contain Rust bin dir.
PATH = "$PATH:$HOME/.cargo/bin"
# A wheel cannot make assumption on the host it is going to run on, hence it
# has to bundle any extra shared libraries dependencies (so in our case openssl)
LIBPARSEC_FORCE_VENDORED_OPENSSL = "true"

[tool.deptry]
extend_exclude = ["server/tests/", "server/parsec/cli/testbed.py"]

[tool.ruff]
line-length = 100
target-version = "py312"

extend-exclude = [
    "tests/cli/common.py",
    "../misc/bench.py",
    "parsec/components/postgresql/sequester.py",
    "parsec/components/postgresql/pki.py",
    "tests/cli/test_sequester.py",
]

[tool.ruff.lint]
# Rule selection: https://docs.astral.sh/ruff/linter/#rule-selection
# Available rules: https://docs.astral.sh/ruff/rules/
select = [
    # Ruff-specific rules
    "RUF",
    # FastAPI
    "FAST",
    # flake8-async, flake8 plugin for problems related to Trio, AnyIO, or asyncio.
    "ASYNC",
    # Perflint, linter for performance anti-patterns
    "PERF",
    # refurb, a tool for refurbishing and modernizing Python codebases
    "FURB",
    # pyupgrade, a tool to automatically upgrade syntax for newer versions
    "UP",
    # flake8-debugger, check for presence of debugger
    "T10",
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I",
]

# E501: Line too long (we leave this to the formatter)
# E402 Module level import not at top of file
ignore = ["E501", "E402"]

[tool.ruff.lint.isort]
known-first-party = ["parsec", "tests"]

[tool.maturin]
module-name = "parsec._parsec"
bindings = "pyo3"

# Per-module customization

[tool.pyright]
pythonVersion = "3.12"
include = ["parsec", "tests", "build.py", "../docs", "../misc", "../bindings/generator"]
exclude = ["**/__pycache__"]
ignore = [
    "parsec/components/postgresql/sequester.py",
    "parsec/components/postgresql/pki.py",
    "tests/cli/test_migrate.py",
    "tests/cli/common.py",
    "tests/cli/test_sequester.py",
    "../misc/bench.py",
]
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportUnusedCallResult = "none"
reportUnusedCoroutine = true
reportUnusedExcept = true
reportUnusedExpression = true
reportUnnecessaryTypeIgnoreComment = "information"
reportMatchNotExhaustive = true
reportAssertAlwaysTrue = "information"
reportUnnecessaryComparison = true
reportSelfClsParameterName = true
reportMissingTypeArgument = true

[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
    "maturin==1.8.7",
    "patchelf~=0.17.2.1; platform_system=='Linux'",
]
build-backend = "setuptools.build_meta"
