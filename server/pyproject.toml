[tool.poetry]
name = "parsec-cloud"
version = "v2.16.0-a.0+dev"
description = "Secure cloud framework"
authors = ["Scille SAS <contact@scille.fr>"]
license = "BUSL-1.1"
readme = "../README.rst"
homepage = "https://github.com/Scille/parsec-cloud"
documentation = "https://docs.parsec.cloud"
keywords = ["parsec", "cryptography", "sharing", "encryption"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.12",
]
packages = [{ include = "parsec" }]
exclude = []
include = [
    { path = "parsec/_parsec*.so", format = "wheel" },  # Rust lib for Linux & MacOS
    { path = "parsec/_parsec*.pyd", format = "wheel" }, # Rust lib for Windows
]

[tool.poetry.scripts]
parsec = "parsec.cli:cli"

[tool.poetry.dependencies]
python = "~3.12.0"

# Base requirements

certifi = "^2023.7.22"
attrs = ">=21.4,<24.0"
click = "^8.0"
msgpack = "^1.0"
wsproto = "^1.2"
h11 = ">=0.13,<0.15"
# Can use marshmallow or the toasted flavour as you like ;-)
# marshmallow = "2.14.0"
toastedmarshmallow = "0.2.6" # updating causes consistency problem in test
trio = "0.22.2"              # see https://github.com/python-trio/trio-typing/issues/85
trio_typing = "0.9.0"
sentry-sdk = "^1.5"
structlog = ">=21.5,<24.0"
# colorama = "^0.4.4  # structlog colored output"
async_exit_stack = "^1.0"
outcome = "^1.1"

jinja2 = { version = "^3.0" }
# Quart
quart-trio = "0.10.0"
quart = "0.18.4"
werkzeug = "2.3.7"
hypercorn = { version = ">=0.13.2,<0.16.0" }
# PostgreSQL
triopg = { version = "^0.6" }
trio-asyncio = { version = "^0.12" }
# S3
boto3 = { version = "^1.23" }
botocore = { version = "^1.26" }
# Swift
python-swiftclient = { version = ">=3.13,<5.0" }
pbr = { version = "^5.9" }

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-xdist = "^3.1"
pytest-trio = "^0.8"
pytest-rerunfailures = ">=10.2,<13.0"
hypothesis = "^6.54"
hypothesis-trio = "^0.6"
trustme = ">=0.9,<1.2"
cryptography = "^41.0.3"
winfspy = { version = "^0.8", extras = ["test"], markers = "platform_system=='Windows'" }
psutil = "^5.9"
poetry-lock-package = ">=0.4.4,<0.6.0"
docutils = "0.20.1"
Babel = "^2.10"

ruff = "0.1.3"
black = "23.10.1"
mypy = "1.6.1"

setuptools = ">=63.1,<69.0"

maturin = "1.3.1"
patchelf = { version = "^0.17.2.0", markers = "platform_system=='Linux'" }

cibuildwheel = "v2.12.3"
editorconfig-checker = "2.7.3"
types-requests = "^2.28"
boto3-stubs = "^1.26"

[tool.poetry.group.testbed-server]
optional = true

[tool.poetry.group.testbed-server.dependencies]
psutil = "^5.9"

[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.cibuildwheel]
build = "cp312-{manylinux,macos,win}*"
archs = ["auto64"]
build-verbosity = 3
before-all = "bash {project}/misc/setup-rust.sh"
before-build = "python -m pip install -U pip"
test-command = "parsec --version"

[tool.cibuildwheel.linux]
# perl-IPC-Cmd needed to build openssl
before-all = "yum install -y perl-IPC-Cmd && bash {project}/misc/setup-rust.sh"

[tool.cibuildwheel.environment]
# As it name suggests, `misc/setup-rust.sh` (run during cibuildwheel's before-all) will
# install Rust if it is not already available. In this case, Rust bin dir was previously
# non-existent and hence $PATH don't know about it (and maturin will fail when calling cargo).
# For this reason we force $PATH to contain Rust bin dir.
PATH = "$PATH:$HOME/.cargo/bin"
# A wheel cannot make assumption on the host it is going to run on, hence it
# has to bundle any extra shared libraries dependencies (so in our case openssl)
LIBPARSEC_FORCE_VENDORED_OPENSSL = "true"

[tool.ruff]
line-length = 100
target-version = "py312"

select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # Unused noqa directive
    "RUF100",
    # isort
    "I",
]

# Handled by black:
# E501: Line too long
#
# Currently not passing errors:
# E402 Module level import not at top of file
# F541 f-string without any placeholders
ignore = ["E501", "E402", "F541"]

extend-exclude = ["docs", "misc/bench.py"]

[tool.ruff.isort]
known-first-party = ["parsec", "tests"]

[tool.maturin]
module-name = "parsec._parsec"
bindings = "pyo3"

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR:$MYPY_CONFIG_FILE_DIR/parsec/stubs"
namespace_packages = true
explicit_package_bases = true
python_version = 3.12
ignore_errors = false
show_error_codes = true
warn_unused_ignores = true
plugins = "trio_typing.plugin"

# Global configuration
strict_optional = true
strict_equality = true
allow_redefinition = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_any_unimported = true
disallow_any_decorated = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
ignore_missing_imports = false

# Per-module customization

# 3rd party libraries with missing typing

[[tool.mypy.overrides]]
module = "pbr.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "swiftclient.*"
ignore_missing_imports = true

# Ignore any python files not in the parsec module

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.common.freeze_time"
ignore_errors = false

[[tool.mypy.overrides]]
module = "misc.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "misc.releaser"
ignore_errors = false

[[tool.mypy.overrides]]
module = "misc.version_updater"
ignore_errors = false

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[build-system]
# Be careful `build-system` entry works out of poetry,
# hence those dependencies are not resolved & pinned into `poetry.lock`
requires = [
    "poetry-core>=1.0.0",
    "setuptools",
    "maturin==1.3.0",
    "maturin[patchelf]==1.3.0; platform_system=='Linux'",
    "patchelf~=0.17.2.0; platform_system=='Linux'",
    "docutils~=0.20.1",
]
build-backend = "poetry.core.masonry.api"
