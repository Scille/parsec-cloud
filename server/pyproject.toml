[project]
name = "parsec-cloud"
version = "3.5.0-a.6+dev"
description = "Secure file sharing in the cloud"
authors = [{ name = "Scille SAS", email = "contact@scille.fr" }]
# TODO: switch to PEP 639 when poetry support for PEP 639 is released:
# https://github.com/python-poetry/poetry/pull/10413
# https://github.com/python-poetry/poetry-core/pull/870
license = { text = "BUSL-1.1" }
readme = "../README.rst"
keywords = ["parsec", "cryptography", "sharing", "encryption"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.12",
]
requires-python = "~=3.12.0"
dependencies = [
    # Base requirements
    "anyio>=3.7.1, <4",
    "click>=8.0, <9",
    "httpx>=0.28.1, <0.29",
    "pbr>=6.1.1, <7",
    "pydantic>=2.10.6, <3",
    "pydantic-core>=2.27.2, <3",
    "sentry-sdk>=2.30.0, <3",
    "starlette>=0.47.2, <0.48",
    "structlog>=25.4.0, <26",
    # ASGI server
    "fastapi>=0.116.1, <0.117",
    "uvicorn>=0.35.0, <0.36",
    "jinja2>=3.0, <4",
    # PostgreSQL
    "asyncpg>=0.29.0, <0.30",
    # S3
    "boto3>=1.38, <2",
    "botocore>=1.38, <2",
    # Swift
    "python-swiftclient>=4.8.0, <5",
]

[project.scripts]
parsec = "parsec.cli:cli"

[project.urls]
homepage = "https://github.com/Scille/parsec-cloud"
documentation = "https://docs.parsec.cloud"

[tool.poetry]
packages = [{ include = "parsec" }]
exclude = []
include = [
    { path = "parsec/_parsec*.so", format = "wheel" },  # Rust lib for Linux & MacOS
    { path = "parsec/_parsec*.pyd", format = "wheel" }, # Rust lib for Windows
]

[tool.poetry.group.dev.dependencies]
asyncpg-stubs = "^0.29.0"
Babel = "^2.10"
boto3-stubs = "^1.38"
cibuildwheel = "^3.0.0"
deptry = "^0.23.0"
editorconfig-checker = "^3.2.1"
httpx-sse = "^0.4.0"
maturin = "^1.8.7"
patchelf = { version = "^0.17.2.1", markers = "platform_system=='Linux'" }
poetry-lock-package = "^0.5.2"
psutil = "^7.0.0"
pyright = "^1.1.353"
pytest = "^8.4.0"
pytest-asyncio = "^1.0.0"
pytest-cov = "^6.2.1"
pytest-rerunfailures = "^15.1"
pytest-timeout = "^2.2.0"
pytest-xdist = "^3.1"
ruff = "^0.12.0"
setuptools = "^80.9.0"
trustme = "^1.2.1"
types-requests = "^2.28"
sqlfluff = "^3.1.1"

[tool.poetry.group.testbed-server]
optional = true

[tool.poetry.group.testbed-server.dependencies]
psutil = "^7.0.0"

[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.poetry.requires-plugins]
poetry-plugin-export = "1.8" # provides poetry export

[tool.cibuildwheel]
build = "cp312-{manylinux,macos,win}*"
archs = ["auto64"]
build-verbosity = 3
before-all = "bash {project}/misc/setup-rust.sh"
before-build = "python -m pip install -U pip"
test-command = "parsec --version"

[tool.cibuildwheel.linux]
# perl-IPC-Cmd needed to build openssl
before-all = "yum install -y perl-IPC-Cmd && bash {project}/misc/setup-rust.sh"

[tool.cibuildwheel.environment]
# As its name suggests, `misc/setup-rust.sh` (run during cibuildwheel's before-all) will
# install Rust if it is not already available. In this case, Rust bin dir was previously
# non-existent and hence $PATH don't know about it (and maturin will fail when calling cargo).
# For this reason we force $PATH to contain Rust bin dir.
PATH = "$PATH:$HOME/.cargo/bin"
# A wheel cannot make assumption on the host it is going to run on, hence it
# has to bundle any extra shared libraries dependencies (so in our case openssl)
LIBPARSEC_FORCE_VENDORED_OPENSSL = "true"

[tool.deptry]
extend_exclude = ["server/tests/", "server/parsec/cli/testbed.py"]

[tool.ruff]
line-length = 100

extend-exclude = [
    "tests/cli/common.py",
    "../misc/bench.py",
    "parsec/components/postgresql/sequester.py",
    "parsec/components/postgresql/pki.py",
    "tests/cli/test_sequester.py",
]

[tool.ruff.lint]
# Rule selection: https://docs.astral.sh/ruff/linter/#rule-selection
# Available rules: https://docs.astral.sh/ruff/rules/
select = [
    # Ruff-specific rules
    "RUF",
    # FastAPI
    "FAST",
    # flake8-async, flake8 plugin for problems related to Trio, AnyIO, or asyncio.
    "ASYNC",
    # Perflint, linter for performance anti-patterns
    "PERF",
    # refurb, a tool for refurbishing and modernizing Python codebases
    "FURB",
    # pyupgrade, a tool to automatically upgrade syntax for newer versions
    "UP",
    # flake8-debugger, check for presence of debugger
    "T10",
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I",
]

# E501: Line too long (we leave this to the formatter)
# E402 Module level import not at top of file
ignore = ["E501", "E402"]

[tool.ruff.lint.isort]
known-first-party = ["parsec", "tests"]

[tool.maturin]
module-name = "parsec._parsec"
bindings = "pyo3"

# Per-module customization

[tool.pyright]
pythonVersion = "3.12"
include = ["parsec", "tests", "build.py", "../docs", "../misc", "../bindings/generator"]
exclude = ["**/__pycache__"]
ignore = [
    "parsec/components/postgresql/sequester.py",
    "parsec/components/postgresql/pki.py",
    "tests/cli/test_migrate.py",
    "tests/cli/common.py",
    "tests/cli/test_sequester.py",
    "../misc/bench.py",
]
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportUnusedCallResult = "none"
reportUnusedCoroutine = true
reportUnusedExcept = true
reportUnusedExpression = true
reportUnnecessaryTypeIgnoreComment = "information"
reportMatchNotExhaustive = true
reportAssertAlwaysTrue = "information"
reportUnnecessaryComparison = true
reportSelfClsParameterName = true
reportMissingTypeArgument = true

[build-system]
# Be careful `build-system` entry works out of poetry,
# hence those dependencies are not resolved & pinned into `poetry.lock`
requires = [
    "poetry-core>=2.0",
    "setuptools",
    "maturin==1.8.7",
    "maturin[patchelf]==1.8.7; platform_system=='Linux'",
    "patchelf~=0.17.2.1; platform_system=='Linux'",
]
build-backend = "poetry.core.masonry.api"
