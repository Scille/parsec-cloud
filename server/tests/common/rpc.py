# Parsec Cloud (https://parsec.cloud) Copyright (c) BUSL-1.1 2016-present Scille SAS

# /!\ Autogenerated by misc/gen_protocol_typings.py, any modification will be lost !

from __future__ import annotations

from parsec._parsec import (
    BlockID,
    BootstrapToken,
    CancelledGreetingAttemptReason,
    DateTime,
    EnrollmentID,
    GreetingAttemptID,
    InvitationToken,
    SequesterServiceID,
    UserID,
    VerifyKey,
    VlobID,
    anonymous_account_cmds,
    anonymous_cmds,
    authenticated_account_cmds,
    authenticated_cmds,
    invited_cmds,
    tos_cmds,
)


class BaseAnonymousRpcClient:
    async def _do_request(self, req: bytes, family: str) -> bytes:
        raise NotImplementedError

    async def organization_bootstrap(
        self,
        bootstrap_token: BootstrapToken | None,
        root_verify_key: VerifyKey,
        user_certificate: bytes,
        device_certificate: bytes,
        redacted_user_certificate: bytes,
        redacted_device_certificate: bytes,
        sequester_authority_certificate: bytes | None,
    ) -> anonymous_cmds.latest.organization_bootstrap.Rep:
        req = anonymous_cmds.latest.organization_bootstrap.Req(
            bootstrap_token=bootstrap_token,
            root_verify_key=root_verify_key,
            user_certificate=user_certificate,
            device_certificate=device_certificate,
            redacted_user_certificate=redacted_user_certificate,
            redacted_device_certificate=redacted_device_certificate,
            sequester_authority_certificate=sequester_authority_certificate,
        )
        raw_rep = await self._do_request(req.dump(), "anonymous")
        return anonymous_cmds.latest.organization_bootstrap.Rep.load(raw_rep)

    async def ping(self, ping: str) -> anonymous_cmds.latest.ping.Rep:
        req = anonymous_cmds.latest.ping.Req(ping=ping)
        raw_rep = await self._do_request(req.dump(), "anonymous")
        return anonymous_cmds.latest.ping.Rep.load(raw_rep)

    async def pki_enrollment_info(
        self, enrollment_id: EnrollmentID
    ) -> anonymous_cmds.latest.pki_enrollment_info.Rep:
        req = anonymous_cmds.latest.pki_enrollment_info.Req(enrollment_id=enrollment_id)
        raw_rep = await self._do_request(req.dump(), "anonymous")
        return anonymous_cmds.latest.pki_enrollment_info.Rep.load(raw_rep)

    async def pki_enrollment_submit(
        self,
        enrollment_id: EnrollmentID,
        force: bool,
        submitter_der_x509_certificate: bytes,
        submitter_der_x509_certificate_email: str,
        submit_payload_signature: bytes,
        submit_payload: bytes,
    ) -> anonymous_cmds.latest.pki_enrollment_submit.Rep:
        req = anonymous_cmds.latest.pki_enrollment_submit.Req(
            enrollment_id=enrollment_id,
            force=force,
            submitter_der_x509_certificate=submitter_der_x509_certificate,
            submitter_der_x509_certificate_email=submitter_der_x509_certificate_email,
            submit_payload_signature=submit_payload_signature,
            submit_payload=submit_payload,
        )
        raw_rep = await self._do_request(req.dump(), "anonymous")
        return anonymous_cmds.latest.pki_enrollment_submit.Rep.load(raw_rep)


class BaseAnonymousAccountRpcClient:
    async def _do_request(self, req: bytes, family: str) -> bytes:
        raise NotImplementedError

    async def ping(self, ping: str) -> anonymous_account_cmds.latest.ping.Rep:
        req = anonymous_account_cmds.latest.ping.Req(ping=ping)
        raw_rep = await self._do_request(req.dump(), "anonymous_account")
        return anonymous_account_cmds.latest.ping.Rep.load(raw_rep)


class BaseAuthenticatedRpcClient:
    async def _do_request(self, req: bytes, family: str) -> bytes:
        raise NotImplementedError

    async def block_create(
        self, block_id: BlockID, realm_id: VlobID, key_index: int, block: bytes
    ) -> authenticated_cmds.latest.block_create.Rep:
        req = authenticated_cmds.latest.block_create.Req(
            block_id=block_id, realm_id=realm_id, key_index=key_index, block=block
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.block_create.Rep.load(raw_rep)

    async def block_read(
        self, block_id: BlockID, realm_id: VlobID
    ) -> authenticated_cmds.latest.block_read.Rep:
        req = authenticated_cmds.latest.block_read.Req(block_id=block_id, realm_id=realm_id)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.block_read.Rep.load(raw_rep)

    async def certificate_get(
        self,
        common_after: DateTime | None,
        sequester_after: DateTime | None,
        shamir_recovery_after: DateTime | None,
        realm_after: dict[VlobID, DateTime],
    ) -> authenticated_cmds.latest.certificate_get.Rep:
        req = authenticated_cmds.latest.certificate_get.Req(
            common_after=common_after,
            sequester_after=sequester_after,
            shamir_recovery_after=shamir_recovery_after,
            realm_after=realm_after,
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.certificate_get.Rep.load(raw_rep)

    async def device_create(
        self, device_certificate: bytes, redacted_device_certificate: bytes
    ) -> authenticated_cmds.latest.device_create.Rep:
        req = authenticated_cmds.latest.device_create.Req(
            device_certificate=device_certificate,
            redacted_device_certificate=redacted_device_certificate,
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.device_create.Rep.load(raw_rep)

    async def events_listen(
        self,
    ) -> authenticated_cmds.latest.events_listen.Rep:
        req = authenticated_cmds.latest.events_listen.Req()
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.events_listen.Rep.load(raw_rep)

    async def invite_cancel(
        self, token: InvitationToken
    ) -> authenticated_cmds.latest.invite_cancel.Rep:
        req = authenticated_cmds.latest.invite_cancel.Req(token=token)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_cancel.Rep.load(raw_rep)

    async def invite_complete(
        self, token: InvitationToken
    ) -> authenticated_cmds.latest.invite_complete.Rep:
        req = authenticated_cmds.latest.invite_complete.Req(token=token)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_complete.Rep.load(raw_rep)

    async def invite_greeter_cancel_greeting_attempt(
        self, greeting_attempt: GreetingAttemptID, reason: CancelledGreetingAttemptReason
    ) -> authenticated_cmds.latest.invite_greeter_cancel_greeting_attempt.Rep:
        req = authenticated_cmds.latest.invite_greeter_cancel_greeting_attempt.Req(
            greeting_attempt=greeting_attempt, reason=reason
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_greeter_cancel_greeting_attempt.Rep.load(raw_rep)

    async def invite_greeter_start_greeting_attempt(
        self, token: InvitationToken
    ) -> authenticated_cmds.latest.invite_greeter_start_greeting_attempt.Rep:
        req = authenticated_cmds.latest.invite_greeter_start_greeting_attempt.Req(token=token)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_greeter_start_greeting_attempt.Rep.load(raw_rep)

    async def invite_greeter_step(
        self,
        greeting_attempt: GreetingAttemptID,
        greeter_step: authenticated_cmds.latest.invite_greeter_step.GreeterStep,
    ) -> authenticated_cmds.latest.invite_greeter_step.Rep:
        req = authenticated_cmds.latest.invite_greeter_step.Req(
            greeting_attempt=greeting_attempt, greeter_step=greeter_step
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_greeter_step.Rep.load(raw_rep)

    async def invite_list(
        self,
    ) -> authenticated_cmds.latest.invite_list.Rep:
        req = authenticated_cmds.latest.invite_list.Req()
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_list.Rep.load(raw_rep)

    async def invite_new_device(
        self, send_email: bool
    ) -> authenticated_cmds.latest.invite_new_device.Rep:
        req = authenticated_cmds.latest.invite_new_device.Req(send_email=send_email)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_new_device.Rep.load(raw_rep)

    async def invite_new_shamir_recovery(
        self, claimer_user_id: UserID, send_email: bool
    ) -> authenticated_cmds.latest.invite_new_shamir_recovery.Rep:
        req = authenticated_cmds.latest.invite_new_shamir_recovery.Req(
            claimer_user_id=claimer_user_id, send_email=send_email
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_new_shamir_recovery.Rep.load(raw_rep)

    async def invite_new_user(
        self, claimer_email: str, send_email: bool
    ) -> authenticated_cmds.latest.invite_new_user.Rep:
        req = authenticated_cmds.latest.invite_new_user.Req(
            claimer_email=claimer_email, send_email=send_email
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.invite_new_user.Rep.load(raw_rep)

    async def list_frozen_users(
        self,
    ) -> authenticated_cmds.latest.list_frozen_users.Rep:
        req = authenticated_cmds.latest.list_frozen_users.Req()
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.list_frozen_users.Rep.load(raw_rep)

    async def ping(self, ping: str) -> authenticated_cmds.latest.ping.Rep:
        req = authenticated_cmds.latest.ping.Req(ping=ping)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.ping.Rep.load(raw_rep)

    async def pki_enrollment_accept(
        self,
        accept_payload: bytes,
        accept_payload_signature: bytes,
        accepter_der_x509_certificate: bytes,
        enrollment_id: EnrollmentID,
        device_certificate: bytes,
        user_certificate: bytes,
        redacted_device_certificate: bytes,
        redacted_user_certificate: bytes,
    ) -> authenticated_cmds.latest.pki_enrollment_accept.Rep:
        req = authenticated_cmds.latest.pki_enrollment_accept.Req(
            accept_payload=accept_payload,
            accept_payload_signature=accept_payload_signature,
            accepter_der_x509_certificate=accepter_der_x509_certificate,
            enrollment_id=enrollment_id,
            device_certificate=device_certificate,
            user_certificate=user_certificate,
            redacted_device_certificate=redacted_device_certificate,
            redacted_user_certificate=redacted_user_certificate,
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.pki_enrollment_accept.Rep.load(raw_rep)

    async def pki_enrollment_list(
        self,
    ) -> authenticated_cmds.latest.pki_enrollment_list.Rep:
        req = authenticated_cmds.latest.pki_enrollment_list.Req()
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.pki_enrollment_list.Rep.load(raw_rep)

    async def pki_enrollment_reject(
        self, enrollment_id: EnrollmentID
    ) -> authenticated_cmds.latest.pki_enrollment_reject.Rep:
        req = authenticated_cmds.latest.pki_enrollment_reject.Req(enrollment_id=enrollment_id)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.pki_enrollment_reject.Rep.load(raw_rep)

    async def realm_create(
        self, realm_role_certificate: bytes
    ) -> authenticated_cmds.latest.realm_create.Rep:
        req = authenticated_cmds.latest.realm_create.Req(
            realm_role_certificate=realm_role_certificate
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.realm_create.Rep.load(raw_rep)

    async def realm_get_keys_bundle(
        self, realm_id: VlobID, key_index: int
    ) -> authenticated_cmds.latest.realm_get_keys_bundle.Rep:
        req = authenticated_cmds.latest.realm_get_keys_bundle.Req(
            realm_id=realm_id, key_index=key_index
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.realm_get_keys_bundle.Rep.load(raw_rep)

    async def realm_rename(
        self, realm_name_certificate: bytes, initial_name_or_fail: bool
    ) -> authenticated_cmds.latest.realm_rename.Rep:
        req = authenticated_cmds.latest.realm_rename.Req(
            realm_name_certificate=realm_name_certificate, initial_name_or_fail=initial_name_or_fail
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.realm_rename.Rep.load(raw_rep)

    async def realm_rotate_key(
        self,
        realm_key_rotation_certificate: bytes,
        per_participant_keys_bundle_access: dict[UserID, bytes],
        per_sequester_service_keys_bundle_access: dict[SequesterServiceID, bytes] | None,
        keys_bundle: bytes,
    ) -> authenticated_cmds.latest.realm_rotate_key.Rep:
        req = authenticated_cmds.latest.realm_rotate_key.Req(
            realm_key_rotation_certificate=realm_key_rotation_certificate,
            per_participant_keys_bundle_access=per_participant_keys_bundle_access,
            per_sequester_service_keys_bundle_access=per_sequester_service_keys_bundle_access,
            keys_bundle=keys_bundle,
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.realm_rotate_key.Rep.load(raw_rep)

    async def realm_share(
        self, realm_role_certificate: bytes, recipient_keys_bundle_access: bytes, key_index: int
    ) -> authenticated_cmds.latest.realm_share.Rep:
        req = authenticated_cmds.latest.realm_share.Req(
            realm_role_certificate=realm_role_certificate,
            recipient_keys_bundle_access=recipient_keys_bundle_access,
            key_index=key_index,
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.realm_share.Rep.load(raw_rep)

    async def realm_unshare(
        self, realm_role_certificate: bytes
    ) -> authenticated_cmds.latest.realm_unshare.Rep:
        req = authenticated_cmds.latest.realm_unshare.Req(
            realm_role_certificate=realm_role_certificate
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.realm_unshare.Rep.load(raw_rep)

    async def shamir_recovery_delete(
        self, shamir_recovery_deletion_certificate: bytes
    ) -> authenticated_cmds.latest.shamir_recovery_delete.Rep:
        req = authenticated_cmds.latest.shamir_recovery_delete.Req(
            shamir_recovery_deletion_certificate=shamir_recovery_deletion_certificate
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.shamir_recovery_delete.Rep.load(raw_rep)

    async def shamir_recovery_setup(
        self,
        ciphered_data: bytes,
        reveal_token: InvitationToken,
        shamir_recovery_brief_certificate: bytes,
        shamir_recovery_share_certificates: list[bytes],
    ) -> authenticated_cmds.latest.shamir_recovery_setup.Rep:
        req = authenticated_cmds.latest.shamir_recovery_setup.Req(
            ciphered_data=ciphered_data,
            reveal_token=reveal_token,
            shamir_recovery_brief_certificate=shamir_recovery_brief_certificate,
            shamir_recovery_share_certificates=shamir_recovery_share_certificates,
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.shamir_recovery_setup.Rep.load(raw_rep)

    async def user_create(
        self,
        user_certificate: bytes,
        device_certificate: bytes,
        redacted_user_certificate: bytes,
        redacted_device_certificate: bytes,
    ) -> authenticated_cmds.latest.user_create.Rep:
        req = authenticated_cmds.latest.user_create.Req(
            user_certificate=user_certificate,
            device_certificate=device_certificate,
            redacted_user_certificate=redacted_user_certificate,
            redacted_device_certificate=redacted_device_certificate,
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.user_create.Rep.load(raw_rep)

    async def user_revoke(
        self, revoked_user_certificate: bytes
    ) -> authenticated_cmds.latest.user_revoke.Rep:
        req = authenticated_cmds.latest.user_revoke.Req(
            revoked_user_certificate=revoked_user_certificate
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.user_revoke.Rep.load(raw_rep)

    async def user_update(
        self, user_update_certificate: bytes
    ) -> authenticated_cmds.latest.user_update.Rep:
        req = authenticated_cmds.latest.user_update.Req(
            user_update_certificate=user_update_certificate
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.user_update.Rep.load(raw_rep)

    async def vlob_create(
        self, realm_id: VlobID, vlob_id: VlobID, key_index: int, timestamp: DateTime, blob: bytes
    ) -> authenticated_cmds.latest.vlob_create.Rep:
        req = authenticated_cmds.latest.vlob_create.Req(
            realm_id=realm_id, vlob_id=vlob_id, key_index=key_index, timestamp=timestamp, blob=blob
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.vlob_create.Rep.load(raw_rep)

    async def vlob_poll_changes(
        self, realm_id: VlobID, last_checkpoint: int
    ) -> authenticated_cmds.latest.vlob_poll_changes.Rep:
        req = authenticated_cmds.latest.vlob_poll_changes.Req(
            realm_id=realm_id, last_checkpoint=last_checkpoint
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.vlob_poll_changes.Rep.load(raw_rep)

    async def vlob_read_batch(
        self, realm_id: VlobID, vlobs: list[VlobID], at: DateTime | None
    ) -> authenticated_cmds.latest.vlob_read_batch.Rep:
        req = authenticated_cmds.latest.vlob_read_batch.Req(realm_id=realm_id, vlobs=vlobs, at=at)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.vlob_read_batch.Rep.load(raw_rep)

    async def vlob_read_versions(
        self, realm_id: VlobID, items: list[tuple[VlobID, int]]
    ) -> authenticated_cmds.latest.vlob_read_versions.Rep:
        req = authenticated_cmds.latest.vlob_read_versions.Req(realm_id=realm_id, items=items)
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.vlob_read_versions.Rep.load(raw_rep)

    async def vlob_update(
        self,
        realm_id: VlobID,
        vlob_id: VlobID,
        key_index: int,
        timestamp: DateTime,
        version: int,
        blob: bytes,
    ) -> authenticated_cmds.latest.vlob_update.Rep:
        req = authenticated_cmds.latest.vlob_update.Req(
            realm_id=realm_id,
            vlob_id=vlob_id,
            key_index=key_index,
            timestamp=timestamp,
            version=version,
            blob=blob,
        )
        raw_rep = await self._do_request(req.dump(), "authenticated")
        return authenticated_cmds.latest.vlob_update.Rep.load(raw_rep)


class BaseAuthenticatedAccountRpcClient:
    async def _do_request(self, req: bytes, family: str) -> bytes:
        raise NotImplementedError

    async def ping(self, ping: str) -> authenticated_account_cmds.latest.ping.Rep:
        req = authenticated_account_cmds.latest.ping.Req(ping=ping)
        raw_rep = await self._do_request(req.dump(), "authenticated_account")
        return authenticated_account_cmds.latest.ping.Rep.load(raw_rep)


class BaseInvitedRpcClient:
    async def _do_request(self, req: bytes, family: str) -> bytes:
        raise NotImplementedError

    async def invite_claimer_cancel_greeting_attempt(
        self, greeting_attempt: GreetingAttemptID, reason: CancelledGreetingAttemptReason
    ) -> invited_cmds.latest.invite_claimer_cancel_greeting_attempt.Rep:
        req = invited_cmds.latest.invite_claimer_cancel_greeting_attempt.Req(
            greeting_attempt=greeting_attempt, reason=reason
        )
        raw_rep = await self._do_request(req.dump(), "invited")
        return invited_cmds.latest.invite_claimer_cancel_greeting_attempt.Rep.load(raw_rep)

    async def invite_claimer_start_greeting_attempt(
        self, greeter: UserID
    ) -> invited_cmds.latest.invite_claimer_start_greeting_attempt.Rep:
        req = invited_cmds.latest.invite_claimer_start_greeting_attempt.Req(greeter=greeter)
        raw_rep = await self._do_request(req.dump(), "invited")
        return invited_cmds.latest.invite_claimer_start_greeting_attempt.Rep.load(raw_rep)

    async def invite_claimer_step(
        self,
        greeting_attempt: GreetingAttemptID,
        claimer_step: invited_cmds.latest.invite_claimer_step.ClaimerStep,
    ) -> invited_cmds.latest.invite_claimer_step.Rep:
        req = invited_cmds.latest.invite_claimer_step.Req(
            greeting_attempt=greeting_attempt, claimer_step=claimer_step
        )
        raw_rep = await self._do_request(req.dump(), "invited")
        return invited_cmds.latest.invite_claimer_step.Rep.load(raw_rep)

    async def invite_info(
        self,
    ) -> invited_cmds.latest.invite_info.Rep:
        req = invited_cmds.latest.invite_info.Req()
        raw_rep = await self._do_request(req.dump(), "invited")
        return invited_cmds.latest.invite_info.Rep.load(raw_rep)

    async def invite_shamir_recovery_reveal(
        self, reveal_token: InvitationToken
    ) -> invited_cmds.latest.invite_shamir_recovery_reveal.Rep:
        req = invited_cmds.latest.invite_shamir_recovery_reveal.Req(reveal_token=reveal_token)
        raw_rep = await self._do_request(req.dump(), "invited")
        return invited_cmds.latest.invite_shamir_recovery_reveal.Rep.load(raw_rep)

    async def ping(self, ping: str) -> invited_cmds.latest.ping.Rep:
        req = invited_cmds.latest.ping.Req(ping=ping)
        raw_rep = await self._do_request(req.dump(), "invited")
        return invited_cmds.latest.ping.Rep.load(raw_rep)


class BaseTosRpcClient:
    async def _do_request(self, req: bytes, family: str) -> bytes:
        raise NotImplementedError

    async def tos_accept(self, tos_updated_on: DateTime) -> tos_cmds.latest.tos_accept.Rep:
        req = tos_cmds.latest.tos_accept.Req(tos_updated_on=tos_updated_on)
        raw_rep = await self._do_request(req.dump(), "tos")
        return tos_cmds.latest.tos_accept.Rep.load(raw_rep)

    async def tos_get(
        self,
    ) -> tos_cmds.latest.tos_get.Rep:
        req = tos_cmds.latest.tos_get.Req()
        raw_rep = await self._do_request(req.dump(), "tos")
        return tos_cmds.latest.tos_get.Rep.load(raw_rep)
