# Parsec Cloud (https://parsec.cloud) Copyright (c) BUSL-1.1 2016-present Scille SAS
{# Macros -#}

{%- macro render_type(t) %}
{%- if t.kind == "ref" -%}
{{ render_type(t.elem) }}
{%- elif t.kind == "optional" -%}
{{ render_type(t.elem) }} | None
{%- elif t.kind == "result" -%}
{{ render_type(t.ok) }} | {{ render_type(t.err) }}
{%- elif t.kind == "struct" or t.kind == "variant" -%}
{{ t.name }}
{%- elif t.kind == "list" -%}
list[{{ render_type(t.elem) }}]
{%- elif t.kind == "tuple" -%}
tuple[
    {%- for value in t.values -%}
        {{- render_type(value) }}{{ ", " if not loop.last else "" }}
    {%- endfor -%}
]
{%- elif t.kind == "none" -%}
None
{%- elif t.kind == "bool" -%}
bool
{%- elif t.kind == "float" -%}
float
{%- elif t.kind == "str" -%}
str
{%- elif t.kind in ("str_based", "bytes_based", "i32_based", "u32_based", "i64_based", "u64_based", "f64_based") -%}
{{ t.name }}
{%- elif t.kind == "bytes" -%}
bytes
{%- elif t.kind == "OnClientEventCallback" -%}
Callable[[ClientEvent], None]
{%- elif t.kind == "enum" -%}
{{ t.name }}
{%- else -%}
{{ raise("Unsupported type %r" % t) }}
{%- endif -%}
{% endmacro -%}

{#- End of macros #}

#
# /!\ Auto-generated code (see `bindings/generator`), any modification will be lost ! /!\
#

from typing import TypedDict, Literal
from collections.abc import Callable


{# Simple enum #}
{% for enum in api.enums %}
{{ enum.name }} =
{%- for variant_name in enum.member_names %}
 Literal["{{ variant_name }}"]{{ " |" if not loop.last else "" }}
{%- endfor %}

{% endfor %}
{# Str-based types #}
{% for type in api.str_based_types %}
{{ type.name }} = str
{% endfor %}
{# Bytes-based types #}
{% for type in api.bytes_based_types %}
{{ type.name }} = bytes
{% endfor %}
{# Number-based types #}
{% for type in api.i32_based_types + api.u32_based_types + api.i64_based_types + api.u64_based_types %}
{{ type.name }} = int
{% endfor %}
{% for type in api.f64_based_types %}
{{ type.name }} = float
{% endfor %}
{# Structures #}
{% for struct in api.structs %}


class {{ struct.name }}(TypedDict):
{% for attr_name, attr_type in struct.attributes.items() %}
    {{ attr_name }}: {{ render_type(attr_type) }}
{% endfor %}
{% endfor %}
{# Variants #}
{% for variant in api.variants %}


# {{ variant.name }}
{% for variant_value in variant.values %}
class {{ variant.name }}{{ variant_value.name }}(TypedDict):
    tag: Literal["{{ variant_value.name }}"]
{% if variant.is_error_variant %}
    error: str
{% endif %}
{% if variant_value.is_struct %}
{% for attr_name, attr_type in variant_value.struct.attributes.items() %}
    {{ attr_name }}: {{ render_type(attr_type) }}
{% endfor %}
{% elif variant_value.is_tuple %}
{% for attr_type in variant_value.tuple %}
    x{{ loop.index }}: {{ render_type(attr_type) }}
{% endfor %}
{% endif %}
{% endfor %}
{{ variant.name }} =
{%- for variant_value in variant.values %}
  {{ variant.name }}{{ variant_value.name }}{{ " |" if not loop.last else "" }}
{%- endfor %}
{% endfor %}


{# Methods #}
{% for meth in api.meths %}
{% if meth.is_async %}async {% endif -%}
def {{ meth.name }}(
{% for arg_name, arg_type in meth.params.items() %}
    {{ arg_name }}: {{ render_type(arg_type) }}{{ "," if not loop.last else "" }}
{% endfor %}
) -> {{ render_type(meth.return_type) if meth.return_type else "None" }}: ...
{% endfor %}
