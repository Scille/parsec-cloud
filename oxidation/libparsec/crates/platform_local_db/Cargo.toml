[package]
name = "libparsec_platform_local_db"
version = "0.0.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
# We have two ways of mocking database:
# - `test-in-memory-mock`: the legacy global switch (should only be used with the Python tests)
# - `test-with-testbed`: the faster and parallel system (which uses configuration dir as discriminant)
test-in-memory-mock = ["lazy_static"]
test-with-testbed = [
    "libparsec_testbed"
]

[dependencies]
libparsec_platform_async = { path = "../platform_async" }
libparsec_testbed = { path = "../testbed", optional = true }

async-trait = "0.1.61"
log = "0.4.17"
tokio = { version = "1.27.0", features = ["fs", "sync"] }
thiserror = "1.0.37"
diesel = { version = "2.0.3", features = ["sqlite", "returning_clauses_for_sqlite_3_35"], default-features = false }
# We add this dependency to have sqlite3 bundled into our code.
libsqlite3-sys = { version = "0.25.2", features = ["bundled"] }
lazy_static = { version = "1.4.0", optional = true }

[dev-dependencies]
# Note `libparsec_tests_fixtures` enables our `test-with-testbed` feature
libparsec_tests_fixtures = { path = "../tests_fixtures" }

pretty_assertions = "1.3.0"
rstest = "0.16.0"
test-log = "0.2.11"
env_logger = "0.10.0"
