[package]
name = "libparsec_crypto"
version = "0.0.0"
edition = "2021"
license = " BUSL-1.1"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
test-unsecure-but-fast-secretkey-from-password = []
use-sodiumoxide = [
    "dep:sodiumoxide",
    "dep:libsodium-sys",
    "dep:openssl",
    "dep:zeroize",
]
# In theory we should have this feature enabling optional dependencies,
# but instead we consider use-rustcrypto as the default (see below)
# use-rustcrypto = [
#     "dep:argon2",
#     "dep:blake2",
#     "dep:crypto_box",
#     "dep:digest",
#     "dep:ed25519-dalek",
#     "dep:generic-array",
#     "dep:getrandom_01",
#     "dep:getrandom_02",
#     "dep:lazy_static",
#     "dep:rand_07",
#     "dep:rand_08",
#     "dep:rsa",
#     "dep:sha1",
#     "dep:sha2",
#     "dep:x25519-dalek",
#     "dep:xsalsa20poly1305",
# ]

[dependencies]
serde = { version = "1.0.147", features = ["derive"] }
serde_bytes = { version = "0.11.7" }
hex = "0.4"
thiserror = "1.0.37"
base32 = "0.4.0"

#
# SodiumOxide&friends stuff
#

sodiumoxide = { version = "0.2.7", optional = true }
libsodium-sys = { version = "0.2.7", optional = true }
openssl = { version = "0.10", optional = true, features = ["vendored"] }
zeroize = { version = "1", optional = true, features = ["alloc"]}

#
# RustCrypto stuff
#
# Note that, unlike sodiumoxide related ones, those dependencies are not
# marked optional. This is a glorious hack to ease dev workflow \o/
#
# The idea is that in dev we want to compile by default with rustcrypto.
# On top of that we also want to be able to compile any crate depending on this
# one and use rustcrypto.
#
# The straightforward solution would be to set a `default = ["use-rustcrypto"]`
# feature here, however this clashes with feature unification: any crate
# depending on this one implicitly enable `use-rustcrypto` feature unless it
# specify `no-default = true` (which defeat the whole point of having a default !).
#
# So the solution is instead to consider `use-rustcrypto` is set whenever
# `use-sodiumoxide` is not.
# But then we have another problem: `use-rustcrypto` have itself dependencies.
# The solution is simple: we always enable those dependencies.
# (Hence in the end `use-rustcrypto` feature has no existence here as it is
# just the negation of `use-sodiumoxide`)
#
# But what about the perf ??? Well compilation is a bit longer with `use-sodiumoxide`
# but at link time all the rustcrypto related code is discarded given it is never used.

argon2 = { version = "0.4.1" }  # Optional ruscrypto dep
blake2 = { version = "0.10.6" }  # Optional ruscrypto dep
crypto_box = { version = "0.8.2", features = ["std"] }  # Optional ruscrypto dep
digest = { version = "0.10.5" }  # Optional ruscrypto dep
ed25519-dalek = { version = "1.0.1" }  # Optional ruscrypto dep
generic-array = { version = "0.14.7", features = ["serde"] }  # Optional ruscrypto dep
lazy_static = { version = "1.4.0" }  # Optional ruscrypto dep
rsa = { version = "0.7.2" }  # Optional ruscrypto dep
sha1 = { version = "0.10.5" }  # Optional ruscrypto dep
sha2 = { version = "0.10.6" }  # Optional ruscrypto dep
# This is exceptionally allowed since no significant changes
# were made from the last stable version to this major pre-release version.
# TODO: bump to a stable version.
x25519-dalek = { version = "2.0.0-pre.1" }  # Optional ruscrypto dep
xsalsa20poly1305 = { version = "0.9.0" }  # Optional ruscrypto dep
# Cryptographic randomness is required for generating SecretKey, SigningKey and PrivateKey
# For SecretKey, we have `crypto_box` -> [...] -> `rand_core~=0.6` -> `getrandom~=0.2`
# For SingingKey&PrivateKey we have `<dalek stuff>` -> `rand~=0.5` -> `getrandom~=0.1`
# So we end up with two version of `getrandom` which have each they own way of
# configuring wasm-unknown-unknown web support (see [features] part).
getrandom_01 = { package = "getrandom", version = "0.1.16" }  # Optional ruscrypto dep
getrandom_02 = { package = "getrandom", version = "0.2.3" }  # Optional ruscrypto dep
# On top of that we need to have access to the two version of rand (0.7 and 0.8)
# to provide the randomness configuration to the crypto functions.
# rand 0.7 relies on rand_core~=0.5/getrandom~=0.1
rand_07 = { package = "rand", version = "0.7" }  # Optional ruscrypto dep
# rand 0.8 relies on rand_core~=0.6/getrandom~=0.2
rand_08 = { package = "rand", version = "0.8" }  # Optional ruscrypto dep

[dev-dependencies]
pretty_assertions = "1.3.0"
serde_test = "1.0.152"
hex-literal = "0.3.3"
rmp-serde = "1.1.1"
rstest = "0.16.0"

[target.'cfg(target_arch = "wasm32")'.dependencies]

#
# RustCrypto stuff
#

getrandom_01 = { package = "getrandom", version = "0.1.16", features = ["wasm-bindgen"] }  # Optional rustcrypto dep
getrandom_02 = { package = "getrandom", version = "0.2.3", features = ["js"] }  # Optional rustcrypto dep
