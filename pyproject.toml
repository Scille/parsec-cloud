[tool.poetry]
name = "parsec-cloud"
version = "v2.12.1+dev"
description = "Secure cloud framework"
authors = ["Scille SAS <contact@scille.fr>"]
readme = "README.rst"
homepage = "https://github.com/Scille/parsec-cloud"
documentation = "https://docs.parsec.cloud"
keywords = ["parsec", "cryptography", "sharing", "encryption"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.9",
]
packages = [
    { include = "parsec" },
]
exclude = [
    # Omitting GUI resources given they end up packaged in `parsec/core/gui/_resources_rc.py`
    "parsec/core/gui/forms/**/*",
    "parsec/core/gui/rc/**/*",
    "parsec/core/gui/tr/**/*",
]
include = [
    # Generated by `misc/generate_pyqt.py`
    { path = "parsec/core/gui/_resources_rc.py" },
    { path = "parsec/core/gui/ui/**/*.py" },
    { path = "parsec/_parsec*.so", format = "wheel" }, # Rust lib for Linux & MacOS
    { path = "parsec/_parsec*.pyd", format = "wheel" }, # Rust lib for Windows
]

[tool.poetry.scripts]
parsec = "parsec.cli:cli"

[tool.poetry.dependencies]
python = "~3.9.0"

# Base requirements

certifi = ">=2021,<2023"
attrs = "^21.4"
click = "^8.0"
msgpack = "^1.0"
wsproto = "^1.0"
h11 = "^0.13"
# Can use marshmallow or the toasted flavour as you like ;-)
# marshmallow = "2.14.0"
toastedmarshmallow = "0.2.6" # updating causes consitency problem in test
PyNaCl = "^1.5"
trio = ">=0.20,<0.22"
trio_typing = "^0.5" # updating causes conflict with qtrio dependency
sentry-sdk = "^1.5"
structlog = ">=21.5,<23.0"
# colorama = "^0.4.4  # structlog colored output"
async_exit_stack = "^1.0"
outcome = "^1.1"
oscrypto = "^1.2.1"

# Backend-only requirements

jinja2 = { version="^3.0", optional=true }
# Quart
quart-trio = { version="^0.9.1", optional=true }
quart = { version="^0.17.0", optional=true }
hypercorn = { version="^0.13.2", optional=true }
# PostgreSQL
triopg = { version="^0.6", optional=true }
trio-asyncio = { version="^0.12", optional=true }
# S3
boto3 = { version="^1.23", optional=true }
botocore = { version="^1.26", optional=true }
# Swift
python-swiftclient = { version=">=3.13,<5.0", optional=true }
pbr = { version="^5.9", optional=true }

# Core-only requirements

packaging = "^21.3"
PyQt5 = { version="^5.15", optional=true }
pyqt5-sip = { version="^12.9", optional=true }
qtrio = { version="^0.5", optional=true }
qrcode = { version="^7.3", optional=true }
fusepy = { version="^3.0", markers="platform_system=='Linux' or platform_system=='Darwin'", optional=true }
winfspy = { version="^0.8", markers="platform_system=='Windows'", optional=true }
zxcvbn = { version="^4.4", optional=true }
psutil = { version="^5.9", markers="platform_system=='Windows'", optional=true }
pypac = { version="^0.16", optional=true }

[tool.poetry.extras]
backend = [
    "jinja2",
    "quart-trio",
    "quart",
    "hypercorn",
    "triopg",
    "trio-asyncio",
    "boto3",
    "botocore",
    "python-swiftclient",
    "pbr",
]
core = [
    "packaging",
    "PyQt5",
    "pyqt5-sip",
    "qtrio",
    "qrcode",
    "fusepy",
    "winfspy",
    "zxcvbn",
    "psutil",
    "pypac",
]

[tool.poetry.dev-dependencies]
pytest = "^7.0"
pytest-cov = "^3.0"
pytest-xdist = "^2.5"
pytest-trio = "^0.7"
pytest-qt = "^4.0"
pytest-rerunfailures =  "^10.2"
hypothesis = "^6.54"
hypothesis-trio = "^0.6"
trustme = "^0.9"
winfspy = { version="^0.8", extras=["test"], markers="platform_system=='Windows'" }
psutil = "^5.9"
poetry-lock-package = "^0.4.4"
docutils = "^0.17"
Babel = "^2.10"
PyQt5_stubs = "^5.15"
# PyInstaller is only needed for packaging, but it must be installed in the same
# venv the code to package is installed. Hence it's simpler to have it here so
# it dependencies won't clash with the rest of the project.
pyinstaller = "^5.3"

flake8 = "5.0.4"
black = "^22.6.0"
# Latest version compatible with `trio_typing~=0.5`, required by qtrio
mypy = "v0.910"

setuptools = "^63.1.0"
maturin = "~=0.13"
cibuildwheel = "2.9.0"
editorconfig-checker = "2.4.0"

[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.cibuildwheel]
build = "cp39-{manylinux,macos,win}*"
archs = ["auto64"]
build-verbosity = 3
before-all = "bash misc/setup-rust.sh"
before-build = "python -m pip install -U pip"
test-extras = "core"
test-command = "parsec --version && parsec core list_devices"

[tool.cibuildwheel.environment]
# As it name suggests, `misc/setup-rust.sh` (run during cibuildwheel's before-all) will
# install Rust if it is not already available. In this case, Rust bin dir was previously
# non-existant and hence $PATH don't know about it (and maturin will fail when calling cargo).
# For this reason we force $PATH to contain Rust bin dir.
PATH = "$PATH:$HOME/.cargo/bin"

[tool.maturin]
features = ["extension-module"]

[build-system]
# Be careful `build-system` entry works out of poetry,
# hence those dependencies are not resolved & pinned into `poetry.lock`
requires = [
    "poetry-core>=1.0.0",
    "setuptools",
    "maturin~=0.13",
    "PyQt5~=5.15",
    "Babel~=2.10",
    "docutils~=0.17",
]
build-backend = "poetry.core.masonry.api"
