name: Package desktop

on:
  pull_request:
    paths:
      - .github/workflows/package-desktop.yml
      - bindings/electron/scripts
      - bindings/electron/package*.json
      - client/electron/package.js
      - client/electron/snap/*
  workflow_call:
    inputs:
      version:
        description: The version to use
        type: string
        required: true
      version_patch_run_id:
        description: |
          The run id where the version.patch artifact was uploaded.
          If not provided, the workflow will generate the patch by itself.
        type: string
        required: true
      commit_sha:
        required: true
        type: string
        description: The commit SHA to use when checkout'ing the repository
        default: ${{ github.sha }}
      nightly_build:
        type: boolean
        description: The current build is a nightly build
        default: false
    secrets:
      SENTRY_AUTH_TOKEN:
        required: true
      MACOS_CI_KEYCHAIN_PASSWD:
        required: true
      MACOS_CERT_PASSWD:
        required: true
      MACOS_CERT:
        required: true
      MACOS_CERT_COMMON_NAME:
        required: true
      MACOS_NOTARIZATION_TEAM_ID:
        required: true
      MACOS_NOTARIZATION_APPLE_ID:
        required: true
      MACOS_NOTARIZATION_PASSWD:
        required: true
  workflow_dispatch:
    inputs:
      version:
        description: The version to use (if not provided, will generate one from code space version)
        type: string
        required: false

# Set `concurrency` to prevent this workflow from being run on code that is not up-to-date on a PR (e.g. when making many push quickly on a PR).
# This behavior is only intended for a PR and not for merge commits on the main branch. Having the workflow run on each merge commit can be useful to spot regressions missed by previous checks.
# To distinguish between these cases, we use `head_ref` that is only defined on `pull-request` and fallback to `run_id` (this is a counter, so it's value is unique between workflow call).
concurrency:
  group: package-desktop-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  # We use the version 18.12 because the version >= 18.13 have some breaking changes on how they format the date.
  # That would break our unit test if we don't update them.
  node-version: 22.14.0
  WINFSP_VERSION: 2.0.23075

permissions:
  contents: read

jobs:
  version:
    if: ${{ inputs.version_patch_run_id == '' }}
    uses: ./.github/workflows/_parse_version.yml
    with:
      version: ${{ inputs.version }}
      commit_sha: ${{ inputs.commit_sha }}

  electron-snap:
    needs: version
    runs-on: ubuntu-22.04
    # Always run the job if `version` job is skipped otherwise only if `version` job was successful.
    if: inputs.version_patch_run_id != '' && always() || success()
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin v4.2.2
        with:
          ref: ${{ inputs.commit_sha }}
        timeout-minutes: 5

      - name: Download version.patch artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # pin v4.3.0
        with:
          name: version.patch
          path: ${{ runner.temp }}/version.patch
          run-id: ${{ inputs.version_patch_run_id || github.run_id }}

      - name: Load version config
        id: version
        shell: bash
        run: |
          cat version.patch/version.ini > "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
        working-directory: ${{ runner.temp }}

      - name: Apply version.patch
        run: git apply --allow-empty ${{ runner.temp }}/version.patch/version.patch

      # In case this step timeout, check the status of snapcraft.io at https://status.snapcraft.io/
      - name: Install snapcraft
        uses: samuelmeuli/action-snapcraft@fceeb3c308e76f3487e72ef608618de625fb7fe8 # pin v3.0.1
        timeout-minutes: 15

      - name: Setup LXD
        uses: canonical/setup-lxd@a3c85fc6fb7fff43fcfeae87659e41a8f635b7dd # pin v0.1.3
        timeout-minutes: 2

      - name: Patch snapcraft for nightly build
        if: inputs.nightly_build
        run:
          sed -i 's/node package.js --mode prod --platform linux dir/& --nightly/' snap/snapcraft.yaml
        working-directory: client/electron

      # We need to patch the vite.config.js because we cannot pass the secret to the snap build (either via build-args or env).
      # Build we only do that is the event is not a PR from dependabot (because it does not have access to secrets, thus failing the build).
      - name: Patch vite config for snap build
        if: (!(github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'))
        run: >-
          sed -i
          -e s'/if (process.env.PARSEC_APP_SENTRY_AUTH_TOKEN)/if (true)/'
          -e s';authToken: process.env.PARSEC_APP_SENTRY_AUTH_TOKEN;authToken: "${{ secrets.SENTRY_AUTH_TOKEN }}";'
          vite.config.ts
        working-directory: client

      # We only patch snapcraft.yaml is the event is not a PR from dependabot (because it does not have access to secrets, thus failing the build).
      - name: Patch snapcraft file for sentry auth token
        if: (!(github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'))
        run: >-
          sed -i -e s';SENTRY_AUTH_TOKEN: __TOKEN__;SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}";' snap/snapcraft.yaml
        working-directory: client/electron

      - name: Patch snapcraft file for vite mode
        run: >-
          sed -i -e s'/VITE_MODE: development/VITE_MODE: ${{ steps.version.outputs.type }}/' snap/snapcraft.yaml
        working-directory: client/electron

      - name: Build snap
        run: |
          ln -sv client/electron/snap
          snapcraft pack --use-lxd -v
        timeout-minutes: 30

      - name: Rename artifacts
        shell: bash -eux -o pipefail {0}
        run: |
          ARCH=$(uname -m)
          FINAL_ARTIFACT_NAME="Parsec_${{ steps.version.outputs.full }}_linux_$ARCH.snap"
          mv -v parsec_*_*.snap $FINAL_ARTIFACT_NAME
          yq --null-input ".linux-gnu.$ARCH.client.snap = \"$FINAL_ARTIFACT_NAME\"" | tee artifacts.yml

      # Install syft
      - uses: taiki-e/install-action@7b20dfd705618832f20d29066e34aa2f2f6194c2 # pin v2.52.8
        with:
          tool: syft@0.84.0

      - name: Generate SBOM
        run: syft packages --config=.syft.yaml --output=spdx-json=Parsec-SBOM-Electron-linux-snap.spdx.json .

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # pin v4.6.2
        with:
          name: linux-snap-${{ runner.arch }}-electron
          path: |
            Parsec_${{ steps.version.outputs.full }}_linux_*.snap
            Parsec-SBOM-*.spdx.json
            artifacts.yml
          if-no-files-found: error
        timeout-minutes: 10

  electron-non-snap:
    needs: version
    # Always run the job if `version` job is skipped otherwise only if `version` job was successful.
    if: ${{ inputs.version_patch_run_id != '' && always() || success() }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🏁 Windows
            platform: windows
            os: windows-2022
            raw_latest_file: latest.yml
            extensions: exe
            os_alias: win
            artifact_tag: windows-exe
          - name: 🍎 macOS x86
            platform: macos
            os: macos-13
            raw_latest_file: latest-mac.yml
            extensions: dmg zip
            os_alias: mac
            artifact_tag: macos-dmg
          - name: 🍎 macOS ARM
            platform: macos
            os: macos-15
            raw_latest_file: latest-mac.yml
            extensions: dmg zip
            os_alias: mac
            artifact_tag: macos-dmg
          - name: 🐧 AppImage 4 Linux
            platform: linux-gnu
            os: ubuntu-22.04
            raw_latest_file: latest-linux.yml
            os_alias: linux
            extensions: AppImage
            artifact_tag: linux-appimage
    name: "${{ matrix.name }}: ⚡ Package electron"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin v4.2.2
        with:
          ref: ${{ inputs.commit_sha }}
        timeout-minutes: 5

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020  # pin v4.4.0
        with:
          node-version: ${{ env.node-version }}
        timeout-minutes: 2

      - name: Download version.patch artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # pin v4.3.0
        with:
          name: version.patch
          path: ${{ runner.temp }}/version.patch
          run-id: ${{ inputs.version_patch_run_id || github.run_id }}

      - name: Load version config
        id: version
        shell: bash
        run: |
          cat version.patch/version.ini > "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
        working-directory: ${{ runner.temp }}

      - name: Apply version.patch
        run: git apply --allow-empty ${{ runner.temp }}/version.patch/version.patch

      - name: Windows > Install WinFSP
        if: matrix.platform == 'windows'
        shell: bash -eux {0}
        run: |
          choco install winfsp -y --version=${{ env.WINFSP_VERSION }}
          curl -L https://github.com/winfsp/winfsp/releases/download/v2.0/winfsp-tests-${{ env.WINFSP_VERSION }}.zip -o '${{ runner.temp }}/winfsp-tests.zip'
          unzip '${{ runner.temp }}/winfsp-tests.zip' -d '${{ runner.temp }}/'
          mv '${{ runner.temp }}/winfsp-tests-x64.exe' 'C:/Program Files (x86)/WinFsp/bin/'
        timeout-minutes: 2

      # Building OpenSSL requires a perl interpreter.
      # The default one does not provide windows-style filesystem
      # paths so we have to switch to Strawberry.
      - name: Use strawberry perl
        if: matrix.platform == 'windows'
        shell: bash
        run: |
          echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
          echo PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
        timeout-minutes: 1

      - name: Windows > Install yq
        if: matrix.platform == 'windows'
        run: choco install yq
        timeout-minutes: 3

      - name: MacOS > Install macFUSE
        if: matrix.platform == 'macos'
        run: brew install --cask macfuse
        timeout-minutes: 5

      - name: Linux > Install system dependencies
        if: matrix.platform == 'linux-gnu'
        run: |
          sudo apt-get install -y fuse3 libfuse3-dev libdbus-1-dev
        timeout-minutes: 2

      - name: Setup rust cache for debugging
        if: false
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # pin v2.7.8
        with:
          cache-on-failure: true
          save-if: true
        timeout-minutes: 5

      - name: Install client dependencies
        # Use `--ignore-scripts` to prevent the postinstall script trying to be smarter than us and
        # install electron dependencies (as it would use `npm install` instead of `npm clean-install`).
        run: npm clean-install --ignore-scripts --verbose
        working-directory: client
        timeout-minutes: 30

      - name: Install electron dependencies
        run: npm clean-install --verbose
        working-directory: client/electron
        timeout-minutes: 10

      - name: Install electron bindings dependencies
        run: npm clean-install
        working-directory: bindings/electron
        timeout-minutes: 1

      - name: Build Electron bindings
        run: npm run build:release
        working-directory: bindings/electron
        # MacOS is really slow when building rust
        timeout-minutes: 30

      - name: Inspect rust electron build
        run: ls -Rl .
        shell: bash
        working-directory: bindings/electron
        timeout-minutes: 1

      - name: Build client for electron
        run: npm run native:build -- ${{ matrix.platform == 'windows' && '--' || '' }} --mode ${{ steps.version.outputs.type }}
        working-directory: client
        timeout-minutes: 5
        env:
          NODE_OPTIONS: --max-old-space-size=8092

      - name: Copy client build result to electron
        run: npm exec cap copy @capacitor-community/electron
        working-directory: client
        timeout-minutes: 1

      # Do not prepare codesign if the PR is from dependabot (it does not have access to secrets).
      - name: Prepare codesign
        shell: bash -o pipefail -eux {0}
        if: matrix.platform == 'macos' && !(github.event_name == 'pull_request' && github.actor == 'dependabot[bot]')
        run: |
          printenv MACOS_CERT | base64 --decode > certificate.p12

          security create-keychain -p "${{ secrets.MACOS_CI_KEYCHAIN_PASSWD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.MACOS_CI_KEYCHAIN_PASSWD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERT_PASSWD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.MACOS_CI_KEYCHAIN_PASSWD }}" build.keychain
        env:
          MACOS_CERT: ${{ secrets.MACOS_CERT }}
        timeout-minutes: 2

      - name: Build Electron apps
        # What's about the extra `--` in `-- --nightly`?
        # The reason is for npm to pass the flag `--nightly` to the underlying npm script.
        # But since the base npm script `npm run electron:release` call another npm script,
        # we need to escape the flag another time by adding another `--`.
        shell: bash -eux -o pipefail {0}
        run: |
          if ${{ matrix.platform == 'macos' }}; then
            # export DEBUG='electron-notarize*'
            export CSC_LINK='${{ secrets.MACOS_CERT }}'
            export CSC_KEY_PASSWORD='${{ secrets.MACOS_CERT_PASSWD }}'
            export CSC_NAME='${{ secrets.MACOS_CERT_COMMON_NAME }}'
            export CSC_IDENTITY_AUTO_DISCOVERY=true
            # If FirelightFlagboy trigger the build, sign the dmg
            export CSC_FOR_PULL_REQUEST='${{ github.actor == 'FirelightFlagboy' }}'
            export CSC_KEYCHAIN=build.keychain
            export APPLE_TEAM_ID='${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}'
            export APPLE_ID='${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}'
            export APPLE_APP_SPECIFIC_PASSWORD='${{ secrets.MACOS_NOTARIZATION_PASSWD }}'
          fi
          npm run electron:release \
            ${{ (matrix.platform == 'linux-gnu' || inputs.nightly_build || matrix.platform == 'macos') && '--' || '' }} \
            ${{ matrix.platform == 'linux-gnu' && 'appimage' || '' }} \
            ${{ inputs.nightly_build && '--nightly' || '' }} \
            ${{ matrix.platform == 'macos' && '--sign' || ''}}
        env:
          PARSEC_APP_SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        working-directory: client/electron
        timeout-minutes: 10

      # Do not upload sourcemaps if it's a PR from dependabot because it does not have access to secrets.
      - name: Upload client electron sourcemaps
        if: (!(github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'))
        run: npm run sentry:sourcemaps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        working-directory: client/electron
        timeout-minutes: 1

      # Install syft
      - uses: taiki-e/install-action@7b20dfd705618832f20d29066e34aa2f2f6194c2 # pin v2.52.8
        with:
          tool: syft@0.84.0

      - name: Generate SBOM
        run: syft packages --config=.syft.yaml --output=spdx-json=client/electron/dist/Parsec-SBOM-Electron-${{ matrix.artifact_tag }}-${{ runner.arch }}.spdx.json .

      - name: Debug dist folder
        if: runner.debug || false
        run: ls client/electron/dist

      - name: Build info & validate
        id: build-info
        shell: bash -eux -o pipefail {0}
        run: |
          arch=$(uname -m)
          app_file_no_ext="Parsec_${{ steps.version.outputs.full }}_${{ matrix.os_alias }}_${arch}${{ (matrix.platform == 'windows' || matrix.platform == 'linux-gnu') && '.unsigned' || '' }}"
          latest_file="latest-${{ matrix.os_alias }}-${arch}.yml"
          artifact_file=artifacts.yml

          EOF="EOF-$(dd if=/dev/urandom bs=15 count=1 status=none | base64)"
          cat << EOF | tee -a $GITHUB_OUTPUT
          arch=$arch
          latest_file=$latest_file
          files_to_upload<<$EOF
          client/electron/dist/$latest_file
          client/electron/dist/$artifact_file
          EOF

          mv -v "${{ matrix.raw_latest_file }}" "${latest_file}"

          touch $artifact_file
          for ext in ${{ matrix.extensions }}; do
            app_file=${app_file_no_ext}.${ext}

            # Sanity check that latest_file refer app_file
            grep -q -e "${app_file}" "${latest_file}"

            # Update artifact file
            yq -i ".${{ matrix.platform }}.${arch}.client.${ext} = \"${app_file}\"" $artifact_file

            # Add to files_to_upload
            echo client/electron/dist/$app_file | tee -a $GITHUB_OUTPUT
            echo client/electron/dist/$app_file.blockmap | tee -a $GITHUB_OUTPUT
          done

          # Print artifact file
          cat $artifact_file

          # Close files_to_upload multiline variable
          echo $EOF >> $GITHUB_OUTPUT
        working-directory: client/electron/dist

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # pin v4.6.2
        with:
          name: ${{ matrix.artifact_tag }}-${{ runner.arch }}-electron
          path: |
            ${{ steps.build-info.outputs.files_to_upload }}
            client/electron/dist/Parsec-SBOM-*.spdx.json
          if-no-files-found: error
        timeout-minutes: 10

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # pin v4.6.2
        if: matrix.platform == 'windows'
        with:
          name: ${{ matrix.artifact_tag }}-${{ runner.arch }}-electron-pre-built
          path: |
            client/electron/app
            client/electron/build
            client/electron/assets
            client/electron/scripts
            client/electron/package.js
            client/electron/package.json
            client/electron/package-lock.json
            client/electron/sign-windows-package.cmd
            client/electron/README.md
          if-no-files-found: error
        timeout-minutes: 10
