name: CI Rust

on:
  workflow_call:
  workflow_dispatch:

# We set `concurrency` to prevent having this workflow being run on code that is not up-to-date on a PR (a user make multiple push in a quick manner).
# But on the main branch, we don't want that behavior.
# Having the workflow run on each merge commit is something we would like, that could help us where a regression was made and missed by previous checks.
#
# For that we use `head_ref` that is only defined on `pull-request` and fallback to `run_id` (this is a counter, so it's value is unique between workflow call).
concurrency:
  group: ci-rust-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  cargo-nextest-version: 0.9.53
  # Cargo will be faster with this configuration.
  # It will only update it's index for the dependencies that we use.
  # https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#cargos-sparse-protocol
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

permissions:
  contents: read
  packages: read

jobs:
  # Cannot factorize the jobs with a matrix since we use a service container that is
  # only available on linux (see https://github.com/orgs/community/discussions/25578)
  test-rust-linux:
    name: "🐧 Linux: 🦀 Rust tests"
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    # Testbed server comes as a Docker image, so it will eventually goes out of sync
    # with the tests (typically a new API is introduced in the Parsec server, or a new
    # testbed template is introduced).
    # In such case, the container url should be updated from the, see:
    # https://github.com/Scille/parsec-cloud/pkgs/container/parsec-cloud%2Fparsec-testbed-server
    services:
      parsec-testbed-server:
        image: ghcr.io/scille/parsec-cloud/parsec-testbed-server:v2.15.0-dev.2023-06-07-sha.1058bbc
        ports:
          - 6777:6777
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin v3.5.3
        timeout-minutes: 5

      - uses: actions-rust-lang/setup-rust-toolchain@f3c84ee10bf5a86e7a5d607d487bf17d57670965 # pin v1.5.0
        with:
          # We setup the cache by hand, see below
          cache: false
        timeout-minutes: 10

      # Just need a python good enough to run `misc/libparsec_crates_flags.py`
      - uses: actions/setup-python@bd6b4b6205c4dbad673328db7b31b7fab9e241c0 # pin v4.6.1
        with:
          python-version: "3.10"

      - name: Retrieve Rust cache
        uses: Swatinem/rust-cache@988c164c3d0e93c4dbab36aaf5bbeb77425b2894 # pin v2.4.0
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not accross PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: ${{ github.ref == 'refs/heads/master' }}
        timeout-minutes: 5

      # Install cargo nextest command
      - uses: taiki-e/install-action@9c39ca3f8b02b26c0e29347638c082275374354e # pin v2.11.2
        with:
          tool: nextest@${{ env.cargo-nextest-version }}

      - name: Test Rust codebase (platform agnostic)
        shell: bash
        run: |
          set -ex
          AGNOSTIC_CRATES=`python misc/libparsec_crates_flags.py agnostic`
          cargo nextest run --cargo-profile ci-rust $AGNOSTIC_CRATES
          # By default `libparsec_crypto` uses RustCrypto, so here we test the sodiumoxide
          # implementation and it compatibility with the rest of the project
          cargo nextest run --cargo-profile ci-rust --package libparsec_crypto --features use-sodiumoxide
          NON_BINDINGS_CRATES=`python misc/libparsec_crates_flags.py agnostic platform`
          cargo check --profile ci-rust $NON_BINDINGS_CRATES --features use-sodiumoxide
        timeout-minutes: 30
        env:
          RUST_LOG: debug
          TESTBED_SERVER: http://localhost:6777

      - name: Test Rust codebase (🐧 Linux specific)
        shell: bash
        run: |
          set -ex
          CRATES=`python misc/libparsec_crates_flags.py platform`
          # Use sodiumoxide here given 1) it is composed of C code, so not totally
          # platform independant and 2) it is what is going to be used in release
          cargo nextest run --cargo-profile ci-rust $CRATES --features libparsec_crypto/use-sodiumoxide
        timeout-minutes: 30
        env:
          RUST_LOG: debug

      # Clippy basically compile the project, hence it's faster to run it in
      # the test-rust-matrix job where compilation cache is reused !
      - uses: ./.github/actions/use-pre-commit
        with:
          extra-args: clippy --verbose
        timeout-minutes: 10

      - name: Check rust code format
        run: cargo fmt --check
        timeout-minutes: 2

  test-rust-non-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🍎 macOS
            os: macos-12
          - name: 🏁 Windows
            os: windows-2022
    name: "${{ matrix.name }}: 🦀 Rust tests"
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin v3.5.3
        timeout-minutes: 5

      - uses: actions-rust-lang/setup-rust-toolchain@f3c84ee10bf5a86e7a5d607d487bf17d57670965 # pin v1.5.0
        with:
          # We setup the cache by hand, see below
          cache: false
        timeout-minutes: 10

      # Just need a python good enough to run `misc/libparsec_crates_flags.py`
      - uses: actions/setup-python@bd6b4b6205c4dbad673328db7b31b7fab9e241c0 # pin v4.6.1
        with:
          python-version: "3.10"

      - name: Retrieve Rust cache
        uses: Swatinem/rust-cache@988c164c3d0e93c4dbab36aaf5bbeb77425b2894 # pin v2.4.0
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not accross PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: ${{ github.ref == 'refs/heads/master' }}
        timeout-minutes: 5

      # Building OpenSSL requires a perl interpreter.
      # The default one does not provide windows-style filesystem
      # paths so we have to switch to Strawberry.
      - name: Use strawberry perl
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
        timeout-minutes: 1

      # Install cargo nextest command
      - uses: taiki-e/install-action@9c39ca3f8b02b26c0e29347638c082275374354e # pin v2.11.2
        with:
          tool: nextest@${{ env.cargo-nextest-version }}

      # Don't run platform agnostic tests here (only runned on Linux)

      - name: Test Rust codebase (${{ matrix.name }} specific)
        shell: bash
        run: |
          set -ex
          CRATES=`python misc/libparsec_crates_flags.py platform`
          cargo nextest run --cargo-profile ci-rust $CRATES --features libparsec_crypto/use-sodiumoxide
          # By default `libparsec_crypto` uses RustCrypto, so here we test the sodiumoxide
          # implementation and it compatibility with the rest of the project
          cargo nextest run --cargo-profile ci-rust --package libparsec_crypto --features use-sodiumoxide
          NON_BINDINGS_CRATES=`python misc/libparsec_crates_flags.py agnostic platform`
          cargo check --profile ci-rust $NON_BINDINGS_CRATES --features use-sodiumoxide
        timeout-minutes: 30
        env:
          RUST_LOG: debug
          TESTBED_SERVER: http://localhost:6777
