name: package-ci

on:
  pull_request:
    paths:
      - .github/workflows/package-ci.yml
      - packaging
  push:
    branches:
      - master
      - "[0-9]+.[0-9]+"
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

env:
  rust-version: 1.63.0
  python-version: 3.9
  poetry-version: 1.2.0b3

jobs:
  package-wheel:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: üêß Linux
            os: ubuntu-22.04
          - name: üçé macOS
            os: macos-10.15
          - name: üèÅ Windows
            os: windows-2022
    name: '${{ matrix.name }}: üì¶ Packaging (build Wheel)'
    runs-on: ${{ matrix.os }}
    outputs:
      wheel-version: ${{ steps.wheel-version.outputs.version }}
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin v3.0.2

      - uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.python-version }}
          poetry-version: ${{ env.poetry-version }}
        timeout-minutes: 10

      - name: Get wheel version
        id: wheel-version
        shell: bash
        run: |
          set -eux
          # Retrieve Parsec version and customize it if we are not building on a tag
          # See https://www.python.org/dev/peps/pep-0440/#local-version-identifiers
          if ([ "${{ github.ref_type }}" == "tag" ])
          then
            # Use tag name as version
            VERSION=`git describe --tag`
          else
            # Use `<tag_name>+dev<commit_hash>` as version
            VERSION=`sed -n 's/^__version__ = "\\(.*\\)"$/\\1/p' parsec/_version.py`
            COMMIT=`git rev-parse --verify --short HEAD`
            VERSION="$VERSION.$COMMIT"
            # Customize version with tag
            sed -i.back -e "s#^\\(__version__ = \\).*\$#\\1'$VERSION'#" parsec/_version.py
            test $(grep -E 'version = ' -o pyproject.toml | wc -l) -eq 1  # Sanity check for the next sed
            sed -i.back -e "s#^\\(version = \\).*\$#\\1'$VERSION'#" pyproject.toml
          fi

          echo "::warning title=Wheel version::$VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Build wheel
        uses: pypa/cibuildwheel@afb4329fe32181c15d34ef94bf64dad7715b44ba  # ping v2.8.1
        with:
          output-dir: dist
        timeout-minutes: 30

      - name: Set file for wheel version
        run: echo ${{ steps.wheel-version.outputs.version }} > dist/version

      - name: Generate requirements & constraints infos
        run: python packaging/wheel/wheel_it.py . --output dist --skip-wheel

      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin v3.1.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist/
        timeout-minutes: 5

  package-linux-build-snap:
    name: 'üêß Linux: üì¶ Packaging (build Snap)'
    needs: package-wheel
    runs-on: ubuntu-20.04
    env:
      WHEEL_VERSION: ${{ needs.package-wheel.outputs.wheel-version }}
    steps:
      - name: Install snapcraft
        run: sudo snap install snapcraft --classic

      - name: Debug snapcraft version
        run: |
          set -e
          echo "::warning title=Snapcraft Version::using $(snapcraft --version)"

      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin v3.0.2

      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # pin v3.0.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - name: Copy snap build configuration
        working-directory: ${{ runner.temp }}
        run: |
          cp -Rv ${{ github.workspace }}/packaging/snap/{bin,snap} .


      - name: Copy wheel configuration + python requirement
        working-directory: ${{ runner.temp }}
        run: |
          mkdir src
          WHEEL=$(ls -1 ${{ github.workspace }}/dist/parsec_cloud-*.whl)
          cp -Rv $WHEEL src/
          cp -v ${{ github.workspace }}/dist/core-requirements.txt src/

      - name: Set snap build version
        run: |
          sed -i.back 's/__PARSEC_VERSION__/"${{ env.WHEEL_VERSION }}"/' ${{ runner.temp }}/snap/snapcraft.yaml
          diff -u ${{ runner.temp }}/snap/snapcraft.yaml{.back,} || true

      - name: Run snapcraft
        working-directory: ${{ runner.temp }}
        run: snapcraft --destructive-mode

      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin v3.1.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-snap
          path: ${{ runner.temp }}/parsec*.snap

  package-linux-test-snap:
    name: 'üêß Linux: üì¶ Packaging (test Snap on ${{ matrix.os }})'
    needs: package-linux-build-snap
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04, ubuntu-22.04 ]
    steps:
      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # pin v3.0.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-snap
          path: dist

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@10d7d0a84d9d86098b19f872257df314b0bd8e2d # pin v1.2.0

      - name: Never trust a Snap
        run: |
          set -eux
          sudo snap install --classic --dangerous dist/parsec*.snap
          parsec.cli --version
          parsec.cli --help
          # Make sure snap contains core but not backend
          MODULES_NOT_AVAILABLE=$(parsec.cli --help | grep -i "not available")
          test "$(echo $MODULES_NOT_AVAILABLE | grep -i 'backend')"
          test -z "$(echo $MODULES_NOT_AVAILABLE | grep -i 'core')"
          xvfb-run parsec --diagnose

  package-linux-release-snap:
    name: 'üêß Linux: üì¶ Packaging (release Snap)'
    needs: [ package-linux-build-snap, package-linux-test-snap ]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # pin v3.0.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-snap
          path: dist

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@10d7d0a84d9d86098b19f872257df314b0bd8e2d # pin v1.2.0
        with:
          snapcraft_token: ${{ secrets.SNAPCRAFT_CREDENTIALS }}

      - name: Upload Snap
        run: snapcraft upload --release=edge dist/parsec*.snap

  package-linux-release-pypi:
    name: 'üêß Linux: üì¶ Packaging (release Pypi)'
    needs: [ package-wheel, package-linux-test-snap ]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # pin v3.0.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - name: Publish wheel on PyPI
        uses: pypa/gh-action-pypi-publish@37f50c210e3d2f9450da2cd423303d6a14a6e29f # pin v1.5.1
        with:
          user: __token__
          password: ${{ secrets.PYPI_CREDENTIALS }}

  package-windows-build-installer-content:
    name: 'üèÅ Windows: üì¶ Packaging (build installer content)'
    needs: package-wheel
    runs-on: windows-2022
    steps:
      - uses: actions/setup-python@c4e89fac7e8767b327bbad6cb4d859eda999cf08  # pin v4.1.0
        with:
          python-version: ${{ env.python-version }}

      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin v3.0.2

      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # pin v3.0.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - name: Prepare build directory
        run: Copy-Item -Recurse -Path ${{ github.workspace }}\packaging\windows\* -Destination ${{ runner.temp }}
        working-directory: ${{ runner.temp }}

      - name: Debug ${{ runner.temp }} dir
        run: Get-ChildItem -Recurse -Path ${{ runner.temp }}

      - name: Freeze Parsec
        run: python3 freeze_program.py ${{ github.workspace }} --wheel-it-dir ${{ github.workspace }}/dist
        working-directory: ${{ runner.temp }}

      - name: Debug build directory
        run: Get-ChildItem -Path ${{ runner.temp }}\build

      - name: Test start generated app
        shell: bash
        run: ./build/parsec-*/parsec.exe --diagnose
        working-directory: ${{ runner.temp }}

      # Cannot do the NSIS installer part in CI given it requires to sign `parsec.exe`

      - name: Prepare artifact
        run: |
          md dist
          Copy-Item -Path build\manifest.ini -Destination dist
          Copy-Item -Path build\install_files.nsh -Destination dist
          Copy-Item -Path build\uninstall_files.nsh -Destination dist
          Copy-Item -Recurse -Path build\parsec-* -Destination dist
          Copy-Item -Path build\winfsp-* -Destination dist
        working-directory: ${{ runner.temp }}

      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin v3.1.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer-content
          path: ${{ runner.temp }}/dist/

  package-macos-build-app:
    runs-on: macos-10.15
    name: 'üçé macOS: üì¶ Packaging (build installer content)'
    needs: package-wheel
    env:
      WHEEL_VERSION: ${{ needs.package-wheel.outputs.wheel-version }}
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin v3.0.2

      - uses: actions/setup-python@c4e89fac7e8767b327bbad6cb4d859eda999cf08  # pin v4.1.0
        id: setup-python
        with:
          python-version: ${{ env.python-version }}

      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # pin v3.0.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - name: Copy packaging script
        run: cp -Rv ${{ github.workspace }}/packaging/macOS/* ${{ runner.temp }}

      - name: Freeze Parsec
        run: python freeze_program.py ${{ github.workspace }} --wheel-it-dir ${{ github.workspace }}/dist
        working-directory: ${{ runner.temp }}

      - name: Debug ${{ runner.temp }} dir
        run: ls -lR ${{ runner.temp }}

      - name: Test open generated app
        run: open build/pyinstaller_dist/parsec.app --args --diagnose
        working-directory: ${{ runner.temp }}

      - name: Generate Parsec.app
        run: >
          tar --verbose --create --bzip2
          --file parsec-${{ env.WHEEL_VERSION }}-macos-amd64.tar.bz2
          --directory build/pyinstaller_dist parsec.app
        working-directory: ${{ runner.temp }}

      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin v3.1.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer
          path: ${{ runner.temp }}/parsec-${{ env.WHEEL_VERSION }}-macos-amd64.tar.bz2

  package-electron-app:
    runs-on: ubuntu-22.04
    name: ‚ö° Package electron
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin v3.0.2

      - name: Install dependencies
        run: |
          npm clean-install
          (cd electron && npm clean-install)
          (cd ../bindings/neon && npm clean-install)
        working-directory: oxidation/client

      - name: Build Electron App
        run: |
          npm run electron:copy
          npm run electron:dist
        working-directory: oxidation/client

      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin v3.1.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-electron-app
          path: |
            oxidation/client/electron/dist/client_*_*.snap
            oxidation/client/electron/dist/client-*.AppImage
