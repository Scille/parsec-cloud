name: package-ci

on:
  workflow_dispatch:
  pull_request:
    paths:
      - .github/workflows/package-ci.yml
      - packaging
      - build.py
      - pyproject.toml
  push:
    branches:
      - master
      - "[0-9]+.[0-9]+"
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

env:
  rust-version: 1.68.0
  node-version: 18.13.0
  python-version: 3.9
  poetry-version: 1.3.2
  # Cargo will be faster with this configuration.
  # It will only update it's index for the dependencies that we use.
  # https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#cargos-sparse-protocol
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  package-wheel:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: üêß Linux
            os: ubuntu-22.04
          - name: üçé macOS
            os: macos-12
          - name: üèÅ Windows
            os: windows-2022
    name: '${{ matrix.name }}: üì¶ Packaging (build Wheel)'
    runs-on: ${{ matrix.os }}
    outputs:
      wheel-version: ${{ steps.wheel-version.outputs.version }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.python-version }}
          poetry-version: ${{ env.poetry-version }}
        timeout-minutes: 10

      - name: Get wheel version
        id: wheel-version
        shell: bash
        run: |
          set -eux
          # Retrieve Parsec version and customize it if we are not building on a tag
          # See https://www.python.org/dev/peps/pep-0440/#local-version-identifiers
          if ([ "${{ github.ref_type }}" == "tag" ])
          then
            # Use tag name as version
            VERSION=`git describe --tag`
          else
            # Use `<tag_name>+dev<commit_hash>` as version
            VERSION=`sed -n 's/^__version__ = "\\(.*\\)"$/\\1/p' parsec/_version.py`
            COMMIT=`git rev-parse --verify --short HEAD`
            VERSION="$VERSION.$COMMIT"
            # Customize version with tag
            sed -i.back -e "s#^\\(__version__ = \\).*\$#\\1'$VERSION'#" parsec/_version.py
            test $(grep -E '^version = ' -o pyproject.toml | wc -l) -eq 1  # Sanity check for the next sed
            sed -i.back -e "s#^\\(version = \\).*\$#\\1'$VERSION'#" pyproject.toml
          fi

          echo "::warning title=Wheel version::$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build wheel
        uses: pypa/cibuildwheel@02ad79a31bf7aa0eee07f690509048d2fb9fd445  # pin v2.12.1
        with:
          output-dir: dist
        timeout-minutes: 50
        env:
          RUST_TOOLCHAIN: ${{ env.rust-version }}

      - name: Set file for wheel version
        run: echo ${{ steps.wheel-version.outputs.version }} > dist/version

      - name: Hack the wheel macos version
        if: startsWith(matrix.os, 'macos-')
        shell: bash
        run: |
          set -eux
          # Old wheel name
          OLD_WHEEL_NAME=$(basename dist/parsec_cloud-*.whl)
          # Unzip the wheel
          mkdir temp
          cd temp
          unzip ../dist/$OLD_WHEEL_NAME
          # Get platform new wheel name
          python -m pip install wheel
          PLATFORM=$(python -c "from wheel.bdist_wheel import get_platform; print(get_platform('.'))")
          NEW_WHEEL_NAME=$(basename ../dist/parsec_cloud-*.whl | sed "s/macosx_.*_x86_64/$PLATFORM/")
          # Update archive and zip back
          sed -i "" "s/macosx_.*_x86_64/$PLATFORM/" parsec_cloud-*.dist-info/WHEEL
          zip -r $NEW_WHEEL_NAME *
          cd ..
          # Replace old wheel with the new one
          mv temp/$NEW_WHEEL_NAME dist/
          rm dist/$OLD_WHEEL_NAME
          rm -rf temp

      - name: Generate requirements & constraints infos
        run: python packaging/wheel/wheel_it.py . --output dist --skip-wheel

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist/
          if-no-files-found: error
        timeout-minutes: 5

  package-linux-build-snap:
    name: 'üêß Linux: üì¶ Packaging (build Snap)'
    needs: package-wheel
    runs-on: ubuntu-20.04
    env:
      WHEEL_VERSION: ${{ needs.package-wheel.outputs.wheel-version }}
    steps:
      - name: Install snapcraft
        run: sudo snap install snapcraft --classic

      - name: Debug snapcraft version
        run: |
          set -e
          echo "::warning title=Snapcraft Version::using $(snapcraft --version)"

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # pin v3.0.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - name: Copy snap build configuration
        working-directory: ${{ runner.temp }}
        run: |
          cp -Rv ${{ github.workspace }}/packaging/snap/{bin,snap} .


      - name: Copy wheel configuration + python requirement
        working-directory: ${{ runner.temp }}
        run: |
          mkdir src
          WHEEL=$(ls -1 ${{ github.workspace }}/dist/parsec_cloud-*.whl)
          cp -Rv $WHEEL src/
          cp -v ${{ github.workspace }}/dist/core-requirements.txt src/

      - name: Set snap build version
        run: |
          sed -i.back 's/__PARSEC_VERSION__/"${{ env.WHEEL_VERSION }}"/' ${{ runner.temp }}/snap/snapcraft.yaml
          diff -u ${{ runner.temp }}/snap/snapcraft.yaml{.back,} || true

      - name: Run snapcraft
        working-directory: ${{ runner.temp }}
        run: snapcraft --destructive-mode

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-snap
          path: ${{ runner.temp }}/parsec*.snap
          if-no-files-found: error

  package-linux-test-snap:
    name: 'üêß Linux: üì¶ Packaging (test Snap on ${{ matrix.os }})'
    needs: package-linux-build-snap
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-22.04 ]
    steps:
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # pin v3.0.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-snap
          path: dist

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@75db9a03f97072c02648bf8339bd4ac678fe2607

      - name: Never trust a Snap
        run: |
          set -eux
          sudo snap install --classic --dangerous dist/parsec*.snap
          parsec.cli --version
          parsec.cli --help
          # Make sure snap contains core but not backend
          MODULES_NOT_AVAILABLE=$(parsec.cli --help | grep -i "not available")
          test "$(echo $MODULES_NOT_AVAILABLE | grep -i 'backend')"
          test -z "$(echo $MODULES_NOT_AVAILABLE | grep -i 'core')"
          xvfb-run parsec --diagnose

  package-linux-release-snap:
    name: 'üêß Linux: üì¶ Packaging (release Snap)'
    needs: [ package-linux-build-snap, package-linux-test-snap ]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # pin v3.0.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-snap
          path: dist

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@75db9a03f97072c02648bf8339bd4ac678fe2607

      - name: Upload Snap
        run: snapcraft upload --release=edge dist/parsec*.snap
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_CREDENTIALS }}

  package-linux-release-pypi:
    name: 'üêß Linux: üì¶ Packaging (release Pypi)'
    needs: [ package-wheel, package-linux-test-snap ]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # pin v3.0.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - name: Remove all non-wheel files from the `dist` directory
        run: find . -type f ! -name '*.whl' -delete

      - name: Publish wheel on PyPI
        uses: pypa/gh-action-pypi-publish@48b317d84d5f59668bb13be49d1697e36b3ad009 # pin v1.8.3
        with:
          user: __token__
          password: ${{ secrets.PYPI_CREDENTIALS }}

  package-windows-build-installer-content:
    name: 'üèÅ Windows: üì¶ Packaging (build installer content)'
    needs: package-wheel
    runs-on: windows-2022
    steps:
      - uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912  # pin v4.4.0
        with:
          python-version: ${{ env.python-version }}

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # pin v3.0.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - uses: microsoft/setup-msbuild@1ff57057b5cfdc39105cd07a01d78e9b0ea0c14c # pin v1.3.1

      - name: Build Icon overlays COM objects
        run: msbuild -maxCpuCount -property:Configuration=Release .\windows-icon-handler\windows-icon-handler.sln
        shell: cmd

      - name: Prepare build directory
        run: Copy-Item -Recurse -Path ${{ github.workspace }}\packaging\windows\* -Destination ${{ runner.temp }}
        working-directory: ${{ runner.temp }}

      - name: Debug ${{ runner.temp }} dir
        run: Get-ChildItem -Recurse -Path ${{ runner.temp }}

      - name: Freeze Parsec
        run: python3 freeze_program.py ${{ github.workspace }} --wheel-it-dir ${{ github.workspace }}/dist
        working-directory: ${{ runner.temp }}

      - name: Debug build directory
        run: Get-ChildItem -Path ${{ runner.temp }}\build

      - name: Test start generated exe
        shell: bash
        run: ./build/parsec-*/parsec.exe --diagnose
        working-directory: ${{ runner.temp }}

      # Cannot do the NSIS installer part in CI given it requires to sign `parsec.exe`

      - name: Prepare artifact
        run: |
          md dist
          Copy-Item -Path build\manifest.ini -Destination dist
          Copy-Item -Path build\install_files.nsh -Destination dist
          Copy-Item -Path build\uninstall_files.nsh -Destination dist
          Copy-Item -Recurse -Path build\parsec-* -Destination dist
          Copy-Item -Path build\winfsp-* -Destination dist
        working-directory: ${{ runner.temp }}

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer-content
          path: ${{ runner.temp }}/dist/
          if-no-files-found: error

  package-macos-build-app:
    runs-on: macos-12
    name: 'üçé macOS: üì¶ Packaging (build installer content)'
    needs: package-wheel
    env:
      WHEEL_VERSION: ${{ needs.package-wheel.outputs.wheel-version }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912  # pin v4.4.0
        id: setup-python
        with:
          python-version: ${{ env.python-version }}

      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # pin v3.0.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - name: Copy packaging script
        run: cp -Rv ${{ github.workspace }}/packaging/macOS/* ${{ runner.temp }}

      - name: Freeze Parsec
        run: python freeze_program.py ${{ github.workspace }} --wheel-it-dir ${{ github.workspace }}/dist
        working-directory: ${{ runner.temp }}

      - name: Debug ${{ runner.temp }} dir
        run: ls -lR ${{ runner.temp }}

      - name: Generate Parsec.app
        run: >
          tar --verbose --create --bzip2
          --file parsec-${{ env.WHEEL_VERSION }}-macos-amd64.tar.bz2
          --directory build/pyinstaller_dist parsec.app
        working-directory: ${{ runner.temp }}

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer
          path: ${{ runner.temp }}/parsec-${{ env.WHEEL_VERSION }}-macos-amd64.tar.bz2
          if-no-files-found: error

  package-macos-test-app:
    runs-on: macos-${{ matrix.macos-version }}
    name: 'üçé macOS: üì¶ Packaging (test app on macOS-${{ matrix.macos-version }})'
    needs: [ package-wheel, package-macos-build-app ]
    env:
      WHEEL_VERSION: ${{ needs.package-wheel.outputs.wheel-version }}
    strategy:
      fail-fast: false
      matrix:
        macos-version: [ 11, 12 ]

    steps:
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # pin v3.0.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer
          path: dist

      # The lsregister call forces the app's entry in the Launch Services database. Otherwise the error
      # 'kLSNoExecutableErr: The executable is missing' might be raised.
      - name: Test open app
        run: |
          set -eux
          tar -xzvf dist/parsec-${{ env.WHEEL_VERSION }}-macos-amd64.tar.bz2 # cspell:disable-line
          /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -f parsec.app
          open parsec.app --args --diagnose

  package-electron-app:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: üêß Linux
            os: ubuntu-22.04
            paths: |
              oxidation/client/electron/dist/parsec_*_*.snap
              oxidation/client/electron/dist/parsec-*.AppImage
          - name: üèÅ Windows
            os: windows-2022
            paths: |
              oxidation/client/electron/dist/parsec Setup *.exe
              oxidation/client/electron/dist/parsec Setup *.exe.blockmap
          - name: üçé macOS
            os: macos-12
            paths: |
              oxidation/client/electron/dist/parsec-*.dmg
              oxidation/client/electron/dist/parsec-*.dmg.blockmap
    name: '${{matrix.name }}: ‚ö° Package electron'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912  # pin v4.4.0
        id: setup-python
        with:
          python-version: ${{ env.python-version }}
        timeout-minutes: 10

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@b44cb146d03e8d870c57ab64b80f04586349ca5d
        with:
          toolchain: ${{ env.rust-version }}
        timeout-minutes: 10

      - name: Install dependencies
        shell: bash
        run: |
          npm clean-install
          (cd electron && npm clean-install)
          (cd ../bindings/electron && npm clean-install)
        working-directory: oxidation/client
        timeout-minutes: 40

      - name: Build Electron App
        run: npm run electron:release:sodium
        working-directory: oxidation/client
        timeout-minutes: 40

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-electron-app
          path: ${{ matrix.paths }}
          if-no-files-found: error
        timeout-minutes: 10

  package-android-app:
    runs-on: ubuntu-22.04
    name: ü§ñ Package Android app
    env:
      NDK_VERSION: 23.2.8568313
      SDK_VERSION: 30.0.3
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - name: Install rust toolchain
        id: rust-toolchain
        uses: dtolnay/rust-toolchain@b44cb146d03e8d870c57ab64b80f04586349ca5d
        with:
          toolchain: ${{ env.rust-version }}
          targets: armv7-linux-androideabi, i686-linux-android, aarch64-linux-android, x86_64-linux-android

      - name: Configure Runner environment
        run: |
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" > $GITHUB_PATH

      - name: Install dependencies for Android
        run: sdkmanager --install "ndk;${{ env.NDK_VERSION }}" "build-tools;${{ env.SDK_VERSION }}"

      - name: Install dependencies for ionic project
        run: npm clean-install
        working-directory: oxidation/client

      - name: Build ionic for Android
        run: |
          npm run android:copy:release
        working-directory: oxidation/client

      - name: Build apk
        run: bash ./gradlew assembleRelease
        working-directory: oxidation/client/android

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.2
        with:
          name: unsigned-android-app
          path: |
            oxidation/client/android/app/build/outputs/apk/release/app-release-unsigned.apk
            oxidation/client/android/app/build/outputs/apk/release/output-metadata.json
          if-no-files-found: error

  package-web-app:
    runs-on: ubuntu-22.04
    name: ‚ö° Package web app
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.0.2
        timeout-minutes: 5

      - name: Install dependencies
        run: npm clean-install
        working-directory: oxidation/client

      - name: Build Vue App
        run: npm run web:release
        working-directory: oxidation/client

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.0
        with:
          name: webapp
          path: oxidation/client/dist/
          if-no-files-found: error
