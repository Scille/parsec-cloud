name: CI Web

on:
  workflow_call:
  workflow_dispatch:

# We set `concurrency` to prevent having this workflow being run on code that is not up-to-date on a PR (a user make multiple push in a quick manner).
# But on the main branch, we don't want that behavior.
# Having the workflow run on each merge commit is something we would like, that could help us where a regression was made and missed by previous checks.
#
# For that we use `head_ref` that is only defined on `pull-request` and fallback to `run_id` (this is a counter, so it's value is unique between workflow call).
concurrency:
  group: ci-web-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  # We use the version 18.12 because the version >= 18.13 have some breaking changes on how they format the date.
  # That would break our unit test if we don't update them.
  node-version: 18.12.0
  wasm-pack-version: 0.12.1

permissions:
  contents: read
  packages: read

jobs:
  test-web-app:
    runs-on: ubuntu-22.04
    name: 🌐 Web tests
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 20
    # Testbed server comes as a Docker image, so it will eventually goes out of sync
    # with the tests (typically a new API is introduced in the Parsec server, or a new
    # testbed template is introduced).
    # In such case, the container url should be updated from the, see:
    # https://github.com/Scille/parsec-cloud/pkgs/container/parsec-cloud%2Fparsec-testbed-server
    services:
      parsec-testbed-server:
        image: ghcr.io/scille/parsec-cloud/parsec-testbed-server:3.0.0-b.6.dev.19880.184fd49
        ports:
          - 6777:6777
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin v4.1.7
        timeout-minutes: 5

      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8  # pin v4.0.2
        with:
          node-version: ${{ env.node-version }}
        timeout-minutes: 2

      - name: Install dependencies
        run: |
          # Execute 'npm clean-install' until success,
          # This is done that way because sometime some CDN response with 503
          until npm clean-install; do
            echo "Failed clean-install, retrying ...";
          done
        working-directory: client
        timeout-minutes: 5

      - name: Check lint
        run: npm run lint
        working-directory: client
        timeout-minutes: 5

      - name: Check prettier
        run: npx prettier . --check
        working-directory: client
        timeout-minutes: 5

      - name: Setup cache-key
        id: cache-key
        run: >-
          echo "key=web-${{ hashFiles(
            'bindings/web/**',
            'libparsec/**',
            'rust-toolchain.toml',
            'Cargo.lock'
          ) }}-libparsec" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Restore libparsec if Rust hasn't been modified
        id: cache-libparsec
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # pin v4.0.2
        with:
          key: ${{ steps.cache-key.outputs.key }}
          path: |
            bindings/web/pkg/
            bindings/web/pkg/
        timeout-minutes: 2

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # pin v1.9.0
        if: steps.cache-libparsec.outputs.cache-hit != 'true'
        with:
          target: wasm32-unknown-unknown
          # We setup the cache by hand, see below
          cache: false
        timeout-minutes: 5

      - name: Retrieve Rust cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # pin v2.7.3
        if: steps.cache-libparsec.outputs.cache-hit != 'true'
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not across PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: ${{ github.ref == 'refs/heads/master' }}
        timeout-minutes: 5

      # Install wasm-pack command
      - uses: taiki-e/install-action@e6c7481b7078ae07f9bc243a2c974cbf2fee8334 # pin v2.41.3
        with:
          tool: wasm-pack@${{ env.wasm-pack-version }}

      - name: Build web bindings
        if: steps.cache-libparsec.outputs.cache-hit != 'true'
        run: npm run build:dev
        working-directory: bindings/web
        timeout-minutes: 10

      - name: Save libparsec to be reuse later
        if: steps.cache-libparsec.outputs.cache-hit != 'true'
        uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # pin v4.0.2
        with:
          key: ${{ steps.cache-key.outputs.key }}
          path: |
            bindings/web/pkg/
            bindings/web/pkg/
        timeout-minutes: 2

      - name: Unit tests
        run: npm run test:unit
        working-directory: client
        timeout-minutes: 10

      - name: Check testbed server is running
        run: curl http://localhost:6777

      - name: E2E tests
        run: npm run test:e2e:headless
        env:
          TESTBED_SERVER_URL: parsec3://localhost:6777?no_ssl=true
        working-directory: client
        timeout-minutes: 20

      - name: Install Playwright dependencies
        run: npx playwright install --with-deps
        working-directory: client
        timeout-minutes: 5

      - name: Playwright E2E tests
        run: npm run pw:e2e:headless
        env:
          TESTBED_SERVER_URL: parsec3://localhost:6777?no_ssl=true
        working-directory: client
        timeout-minutes: 20
