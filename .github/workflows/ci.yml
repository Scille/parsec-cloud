name: ci

on:
  pull_request:
  push:
    branches:
      - master

env:
  python-version: "3.9"
  rust-version: 1.65.0
  node-version: "16"
  poetry-version: 1.2.2
  # TODO: We stick to PostgreSQL 12 for the moment given later versions are
  # much slower (postgresql tests runs in ~9mn on 12 vs ~36mn on 14 !)
  postgresql-version: 12
  pytest-base-args: >-
    --log-level=DEBUG
    --durations=10
    --side-effects-timeout=10
    -vv
    -x
  # Override the default rust compilation profile made in `build.py`,
  # We prefer using one that is more fit to the CI.
  CARGO_PROFILE: integration

jobs:

  # Github PR merging is configured to only require this job to pass
  ci-is-happy:
    name: ⭐ CI is happy ⭐
    needs:
      - check-quality-assurance
      - test-python-matrix
      - test-rust-matrix
      - test-web-app
      - test-wasm
    runs-on: ubuntu-latest
    if: always()
    steps:
      # The Needs context value contains only:
      # - the final state a jobs (if it fail or not)
      # - it's output (actually none of our jobs are configuring outputs variable)
      #
      # https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context
      - name: Debug the needs context values
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: printenv NEEDS

      - name: We're very sorry
        run: |
          echo "Oh No, we have jobs that have failed/cancelled/skipped :("
          exit 42
        if: >-
          contains(needs.*.result, 'failure')
          || contains(needs.*.result, 'skipped')
          || contains(needs.*.result, 'cancelled')
          || ! contains(needs.*.result, 'success')

      - name: It's showtime
        run: echo "My job here is done !"

  ##############################################################################
  #                                   📊 Q&A                                   #
  ##############################################################################

  check-quality-assurance:
    name: 📊 Q&A
    # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin v3.1.0

      - uses: ./.github/actions/paths-filter
        id: changes

      - uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.python-version }}
          poetry-version: ${{ env.poetry-version }}

      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516  # pin v3.5.1
        with:
          node-version: ${{ env.node-version }}

      - uses: ./.github/actions/setup-rust
        with:
          version: ${{ env.rust-version }}
          components: rustfmt, clippy
          cache-key: ${{ github.job }}-ubuntu-20.04
        timeout-minutes: 10

      - name: Debug installed tools
        run: |
          python --version
          node --version
          # Rust tools
          whereis rustup
          rustup --version
          whereis rustc
          rustc --version
          whereis cargo
          cargo --version

      - name: Debug rust cache
        run: ls -la ~/.cargo/{.,bin,git,registry} target || true

      - name: Check Commit Signature
        run: python .github/scripts/check_commit_signature.py

      - name: Check Newsfragment
        if: |
          startsWith(github.ref, 'refs/pull/')
          && steps.changes.outputs.newsfragments == 'true'
        run: |
          whereis git
          git fetch origin master
          python .github/scripts/check_newsfragments.py ${{ github.head_ref }}

      - name: Patch pre-commit for line-ending
        run: |
          sed -i '/id: mixed-line-ending/a\        args: [ --fix=lf ]' .pre-commit-config.yaml
          cat .pre-commit-config.yaml

      - name: Install project (needed for mypy check)
        run: poetry install -E core -E backend

      - uses: ./.github/actions/use-pre-commit
        timeout-minutes: 30

  ##############################################################################
  #                            🐍 Python tests                                 #
  ##############################################################################

  test-python-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux
            # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
            # 20.04 is required to install PostgreSQL 12
            os: ubuntu-20.04
          - name: 🍎 macOS
            os: macos-12
          - name: 🏁 Windows
            os: windows-2022
            winfsp-version: 1.11.22176
    name: '${{ matrix.name }}: 🐍 Python tests'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin v3.1.0

      - uses: ./.github/actions/paths-filter
        id: changes

      - name: Check modified path that require python-ci run
        id: python-changes
        if: >-
          steps.changes.outputs.python == 'true'
          || steps.changes.outputs.rust-ext == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - name: (🐧 Linux) Configure PostgreSQL APT repository
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        env:
          POSTGRE_APT_KEY_SHA_512: df557805862cd279f40819834af14e1723b18044df9dc22bea710b6980c98cc8ed39e75ed5c9adaa1932992710f1180f0491dc9437bfd485b4aa2b75776407d4  /usr/share/keyrings/postgre-sql-keyring.gpg
        run: |
          set -x -o pipefail

          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc \
            | sudo gpg --dearmor --output /usr/share/keyrings/postgre-sql-keyring.gpg

          printenv POSTGRE_APT_KEY_SHA_512 | sha512sum --strict -c -

          echo "deb [signed-by=/usr/share/keyrings/postgre-sql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" \
            | sudo tee /etc/apt/sources.list.d/postgre-sql.list

          sudo apt-get update

        # Install required packages for ubuntu:
        # - LibFuse2 since only libfuse3 is available on ubuntu-20.04,
        # - `desktop-file-utils` provides `update-desktop-database` used by `tests/scripts/run_testenv.sh`
        # - A specific version of postgresql is used for PostgreSQL's tests
        # - dependencies for Qt testing. See: https://pytest-qt.readthedocs.io/en/latest/troubleshooting.html#github-actions
      - name: (🐧 Linux) Install packages fuse2, PostgreSQL-${{ env.postgresql-version }}
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        run: >
          sudo apt-get -y install
          libfuse2
          fuse
          desktop-file-utils
          postgresql-${{ env.postgresql-version }}
          libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0
          libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
          libxcb-xinerama0 libxcb-xfixes0 x11-utils

      - name: (🍎 macOS) Install macfuse
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-')
        run: brew install --cask macfuse

      - name: (🏁 Windows) Install WinFSP
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'windows-')
        shell: bash
        run: |
          choco install -y --limit-output winfsp --version=${{ matrix.winfsp-version }}
          mkdir winfsp-test
          curl -L https://github.com/billziss-gh/winfsp/releases/download/v1.8/winfsp-tests-1.8.20304.zip -o winfsp-test/winfsp-tests.zip
          unzip winfsp-test/winfsp-tests.zip -d winfsp-test
          pwd
          echo "$(pwd)\winfsp-test" >> "$GITHUB_PATH"

      - uses: ./.github/actions/setup-rust
        if: steps.python-changes.outputs.run == 'true'
        with:
          version: ${{ env.rust-version }}
          cache-key: ${{ github.job }}-${{ matrix.os }}
        timeout-minutes: 10

      - uses: ./.github/actions/setup-python-poetry
        if: steps.python-changes.outputs.run == 'true'
        id: setup-python
        with:
          python-version: ${{ env.python-version }}
          poetry-version: ${{ env.poetry-version }}

      - name: Install python deps
        if: steps.python-changes.outputs.run == 'true'
        run: poetry install -E core -E backend

      - name: Debug python & pip version
        if: steps.python-changes.outputs.run == 'true'
        shell: bash
        continue-on-error: true
        run: |
          set -x
          poetry run python --version
          poetry run pip --version

      - name: Basic tests
        if: steps.python-changes.outputs.run == 'true'
        run: poetry run pytest ${{ env.pytest-base-args }} tests -n auto
        timeout-minutes: 10

      - name: (🐧🏁 Not macOS) Mountpoint tests
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-') != true
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runmountpoint --runslow -m mountpoint
        timeout-minutes: 10

      - name: (🐧 Linux) Install pytest-xvfb plugin for pytest for Qt Testing
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        run: poetry run pip install pytest-xvfb

      - name: (🐧🏁 Not macOS) GUI tests
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-') != true
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runmountpoint --runslow --rungui -m gui
        timeout-minutes: 10

      - name: (🐧 Linux) PostgreSQL tests
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        env:
          PGINSTALLATION: /usr/lib/postgresql/${{ env.postgresql-version }}/bin
        run: poetry run pytest ${{ env.pytest-base-args }} tests/backend tests/test_cli.py -k 'not test_shuffle_roles' --postgresql --runslow
        timeout-minutes: 20

      - name: Hypothesis tests
        if: steps.python-changes.outputs.run == 'true'
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runslow -m slow --numprocesses auto
        timeout-minutes: 50

  ##############################################################################
  #                            🦀 Rust tests                                   #
  ##############################################################################

  test-rust-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux
            # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
            os: ubuntu-20.04
          - name: 🍎 macOS
            os: macos-12
          - name: 🏁 Windows
            os: windows-2022
    name: '${{ matrix.name }}: 🦀 Rust tests'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin v3.1.0

      - uses: ./.github/actions/paths-filter
        id: changes

      - name: Check modified path that require rust-ci run
        id: rust-changes
        if: >-
          steps.changes.outputs.rust == 'true'
          || steps.changes.outputs.rust-ext == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - uses: ./.github/actions/setup-rust
        if: steps.rust-changes.outputs.run == 'true'
        with:
          version: ${{ env.rust-version }}
          cache-key: ${{ github.job }}-${{ matrix.os }}
        timeout-minutes: 10

      # Pyo3 need additional configuration on MacOS to be manually build
      # see https://pyo3.rs/master/building_and_distribution.html#macos
      - name: (🍎 macOS) Configure cargo for PyO3
        if: >-
          steps.rust-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-')
        shell: bash
        run: |
          set -eux
          set -o pipefail
          mkdir -p .cargo
          cat << EOF | tee .cargo/config.toml
          [target.x86_64-apple-darwin]
          rustflags = [
            "-C", "link-arg=-undefined",
            "-C", "link-arg=dynamic_lookup",
          ]
          EOF

      # Pyo3 can't build for test with `multiple-pymethods` feature
      # see https://github.com/PyO3/pyo3/issues/2623
      - name: Build rust codebase
        if: steps.rust-changes.outputs.run == 'true'
        shell: bash
        run: |
          set -ex
          cargo build --workspace
          cargo test --workspace --no-run

      - name: Test rust codebase
        if: steps.rust-changes.outputs.run == 'true'
        shell: bash
        run: |
          set -ex
          cargo test --package libparsec_crypto --features use-sodiumoxide --no-default-features
          cargo test --package libparsec_crypto --features use-rustcrypto --no-default-features
          cargo test --workspace --features mock-time --exclude libparsec_crypto

  ##############################################################################
  #                            🐜 Wasm tests                                   #
  ##############################################################################

  test-wasm:
    runs-on: ubuntu-20.04
    # We're using a matrix, because we need to have a list to configure:
    # - The job `Check changed files` (To watch if the specified crate we're changed).
    # - The job `Run WasmPack test` (where we run the test on each specified crate).
    # So it's simpler to have only 1 list to maintain (DRY).
    strategy:
      fail-fast: false
      matrix:
        include:
          - crate_to_test:
              - oxidation/libparsec/crates/platform_async
              - oxidation/libparsec/crates/platform_web
    name: 🐜 Wasm tests
    env:
      WASM_PACK_VERSION: 0.10.3
      NAVIGATORS: >-
        firefox
        chrome
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin v3.1.0

      - name: Check changed files
        uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50  # pin v2.11.1
        id: changes
        with:
          filters: |
            wasm: ${{ toJSON(matrix.crate_to_test) }}
            github:
              - .github/**

      - name: Check modified path that require wasm-pack-ci run
        id: wasm-pack-changes
        if: >-
          steps.changes.outputs.wasm == 'true'
          || steps.changes.outputs.github == 'true'
          || github.ref == 'refs/head/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - uses: ./.github/actions/setup-rust
        if: steps.wasm-pack-changes.outputs.run == 'true'
        with:
          version: ${{ env.rust-version }}
          target: wasm32-unknown-unknown
          cache-key: wasm32

      - name: Install Wasm-Pack
        if: steps.wasm-pack-changes.outputs.run == 'true'
        run: |
          set -eux
          mkdir -p ~/.local/bin
          cd ~/.local/bin
          wget https://github.com/rustwasm/wasm-pack/releases/download/v${{ env.WASM_PACK_VERSION }}/wasm-pack-v${{ env.WASM_PACK_VERSION }}-x86_64-unknown-linux-musl.tar.gz -O ~/wasm-pack.tar.gz
          tar xzf ~/wasm-pack.tar.gz --directory ~/.local/bin --strip-components=1
          chmod +x ~/.local/bin/wasm-pack
          echo ~/.local/bin >> "$GITHUB_PATH"
          ~/.local/bin/wasm-pack --version

      - name: Run WasmPack test
        if: steps.wasm-pack-changes.outputs.run == 'true'
        run: |
          set -eu
          for crate_to_test in ${{ join(matrix.crate_to_test.*, ' ') }}; do
            for navigator in ${{ env.NAVIGATORS }}; do
              echo "###################################"
              echo "# Running WASM test"
              echo "#   navigator: $navigator"
              echo "#   crate: $crate_to_test"
              echo "###################################"

              (set -x; wasm-pack test --headless --$navigator $crate_to_test)
            done
          done


  ##############################################################################
  #                            🌐 Web tests                                    #
  ##############################################################################

  test-web-app:
    runs-on: ubuntu-22.04
    name: 🌐 Web tests
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin v3.1.0

      - uses: ./.github/actions/paths-filter
        id: changes

      - name: Check modified path that require `test-web` to run
        id: web-change
        if: >-
          steps.changes.outputs.client-web == 'true'
          || steps.changes.outputs.client-common == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        if: steps.web-change.outputs.run == 'true'
        run: npm clean-install
        working-directory: oxidation/client

      # Replace it with `npm run test:unit && npm run test:e2e` when those are stable.
      # Then move this step to package-ci.yml
      - name: Build WebApp
        if: steps.web-change.outputs.run == 'true'
        run: npm run web:release
        working-directory: oxidation/client
