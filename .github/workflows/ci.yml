name: ci

on:
  workflow_dispatch:
  merge_group:
  pull_request:
  push:
    branches:
      - master

env:
  python-version: "3.9"
  # We use the version 18.12 because the version >= 18.13 have some breaking changes on how they format the date.
  # That would break our unit test if we don't update them.
  node-version: 18.12.0
  poetry-version: 1.3.2
  # TODO: We stick to PostgreSQL 12 for the moment given later versions are
  # much slower (postgresql tests runs in ~9mn on 12 vs ~36mn on 14 !)
  postgresql-version: 12
  pytest-base-args: >-
    --log-level=DEBUG
    --durations=10
    --side-effects-timeout=10
    -vv
    -x
  cargo-exclude-unused-crates: >-
    --exclude=parsec
    --exclude=libparsec_bindings_android
    --exclude=libparsec_bindings_web
    --exclude=libparsec_bindings_electron
  # Cargo will be faster with this configuration.
  # It will only update it's index for the dependencies that we use.
  # https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#cargos-sparse-protocol
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:

  # Github PR merging is configured to only require this job to pass
  ci-is-happy:
    name: ⭐ CI is happy ⭐
    needs:
      - check-quality-assurance
      - test-python-matrix
      - test-rust-matrix
      - test-web-app
    runs-on: ubuntu-latest
    if: always()
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 2
    steps:
      # The Needs context value contains only:
      # - the final state a jobs (if it fails or not)
      # - it's output (actually none of our jobs are configuring outputs variable)
      #
      # https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context
      - name: Debug the needs context values
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: printenv NEEDS

      - name: We're very sorry
        run: |
          echo "Oh No, we have jobs that have failed/cancelled/skipped :("
          exit 42
        if: >-
          contains(needs.*.result, 'failure')
          || contains(needs.*.result, 'skipped')
          || contains(needs.*.result, 'cancelled')
          || ! contains(needs.*.result, 'success')

      - name: It's showtime
        run: echo "My job here is done !"

  ##############################################################################
  #                                   📊 Q&A                                   #
  ##############################################################################

  check-quality-assurance:
    name: 📊 Q&A
    # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
    runs-on: ubuntu-20.04
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50  # pin v2.11.1
        id: newsfragment-have-changed
        with:
          list-files: shell
          filters: |
            all:
              - added|modified: '**'
            newsfragments:
              - newsfragments/**

      - name: Install Cargo fmt
        run: |
          set -ex
          rustup component add rustfmt
          cargo fmt --version
        timeout-minutes: 2

      - uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.python-version }}
          poetry-version: ${{ env.poetry-version }}
        timeout-minutes: 5

      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c  # pin v3.6.0
        with:
          node-version: ${{ env.node-version }}
        timeout-minutes: 2

      - name: Check Commit Signature
        run: python .github/scripts/check_commit_signature.py

      - name: Check News fragments
        if: |
          startsWith(github.ref, 'refs/pull/')
          && !(
            startsWith(github.head_ref, 'yolo')
            || startsWith(github.head_ref, 'release')
            || startsWith(github.head_ref, 'revert')
            || startsWith(github.head_ref, 'acknowledge')
            )
          && steps.newsfragment-have-changed.outputs.newsfragments == 'true'
        run: |
          whereis git
          git fetch origin master
          python .github/scripts/check_newsfragments.py ${{ github.head_ref }}
        timeout-minutes: 5

      - name: Patch pre-commit for line-ending
        id: patched-pre-commit-config
        run: |
          TEMP_FILE=$(mktemp)
          sed '/id: mixed-line-ending/a\        args: [ --fix=lf ]' .pre-commit-config.yaml > $TEMP_FILE
          diff --unified .pre-commit-config.yaml $TEMP_FILE || true
          echo "path=$TEMP_FILE" >> $GITHUB_OUTPUT

      - name: Install project (needed for mypy check)
        run: |
          set -ex
          poetry install -E core -E backend
        # We skip _parsec.so compilation given Mypy only cares about _parsec.pyi
        env:
          POETRY_LIBPARSEC_BUILD_STRATEGY: no_build
        timeout-minutes: 10

      # Clippy basically compile the project, hence it's faster to run it in
      # the test-rust-matrix job where compilation cache is reused !
      - uses: ./.github/actions/use-pre-commit
        with:
          # On main branch or in the merge queue we provide an empty string for the changes files,
          # thus running pre-commit on all files
          changed-files: >-
            ${{
              (github.ref == 'refs/heads/master'
              || contains(github.ref, 'gh-readonly-queue')) && '' || steps.changes.outputs.all_files
            }}
          config-file: ${{ steps.patched-pre-commit-config.outputs.path }}
        env:
          SKIP: clippy
        timeout-minutes: 30

  ##############################################################################
  #                            🐍 Python tests                                 #
  ##############################################################################

  test-python-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux
            # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
            # 20.04 is required to install PostgreSQL 12
            os: ubuntu-20.04
          - name: 🍎 macOS
            os: macos-12
          - name: 🏁 Windows
            os: windows-2022
            winfsp-version: 1.11.22176
    name: '${{ matrix.name }}: 🐍 Python tests'
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50  # pin v2.11.1
        id: changes
        with:
          filters: .github/filters/ci.yml

      - name: Check modified path that require python-ci run
        id: should-run-python-jobs
        if: >-
          steps.changes.outputs.python-jobs == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - name: (🐧 Linux) Set apt mirror
        # GitHub Actions apt proxy is super unstable
        # see https://github.com/actions/runner-images/issues/7048
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        run: |
          set -e -o pipefail
          (
            # make sure there is a `\t` between URL and `priority:*` attributes
            printf 'http://azure.archive.ubuntu.com/ubuntu	priority:1\n';
            curl http://mirrors.ubuntu.com/mirrors.txt | grep https
          ) | sudo tee /etc/apt/mirrors.txt
          sudo sed -i 's/http:\/\/azure.archive.ubuntu.com\/ubuntu\//mirror+file:\/etc\/apt\/mirrors.txt/' /etc/apt/sources.list

      - name: (🐧 Linux) Configure PostgreSQL APT repository
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        env:
          POSTGRE_APT_KEY_SHA_512: df557805862cd279f40819834af14e1723b18044df9dc22bea710b6980c98cc8ed39e75ed5c9adaa1932992710f1180f0491dc9437bfd485b4aa2b75776407d4  /usr/share/keyrings/postgre-sql-keyring.gpg
        run: |
          set -x -o pipefail

          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc \
            | sudo gpg --dearmor --output /usr/share/keyrings/postgre-sql-keyring.gpg

          printenv POSTGRE_APT_KEY_SHA_512 | sha512sum --strict -c -

          echo "deb [signed-by=/usr/share/keyrings/postgre-sql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" \
            | sudo tee /etc/apt/sources.list.d/postgre-sql.list

          sudo apt-get update
        timeout-minutes: 5

        # Install required packages for ubuntu:
        # - LibFuse2 since only libfuse3 is available on ubuntu-20.04.
        # - `desktop-file-utils` provides `update-desktop-database` used by `tests/scripts/run_testenv.sh`.
        # - A specific version of postgresql is used for PostgreSQL's tests.
        # - dependencies for Qt testing. See: https://pytest-qt.readthedocs.io/en/latest/troubleshooting.html#github-actions.
      - name: (🐧 Linux) Install packages fuse2, PostgreSQL-${{ env.postgresql-version }}
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        run: |
          # Retry the command until it succeed.
          # We retry because sometime the APT repo configured
          # by the runner seems drop the connection causing the command to fail.
          until sudo apt-get -y install ${{ env.PACKAGE_TO_INSTALL }}; do
            echo "Fail to install APT package retrying ...";
          done
        env:
          PACKAGE_TO_INSTALL: >-
            libfuse2
            fuse
            desktop-file-utils
            postgresql-${{ env.postgresql-version }}
            libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0
            libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
            libxcb-xinerama0 libxcb-xfixes0 x11-utils
        timeout-minutes: 5

      - name: (🍎 macOS) Install macfuse
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-')
        run: brew install --cask macfuse
        timeout-minutes: 2

      - name: (🏁 Windows) Install WinFSP
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'windows-')
        shell: bash
        run: |
          choco install -y --limit-output winfsp --version=${{ matrix.winfsp-version }}
          mkdir winfsp-test
          curl -L https://github.com/billziss-gh/winfsp/releases/download/v1.8/winfsp-tests-1.8.20304.zip -o winfsp-test/winfsp-tests.zip
          unzip winfsp-test/winfsp-tests.zip -d winfsp-test
          pwd
          echo "$(pwd)\winfsp-test" >> "$GITHUB_PATH"
        timeout-minutes: 5

      - uses: ./.github/actions/setup-python-poetry
        if: steps.should-run-python-jobs.outputs.run == 'true'
        id: setup-python
        with:
          python-version: ${{ env.python-version }}
          poetry-version: ${{ env.poetry-version }}
        timeout-minutes: 10

      # libparsec is slow to compile, so we save it in cache and skip the
      # compilation entirely if the Rust code hasn't changed !

      # Key cache contains a hash of all the files that are used to produce _parsec.so
      # Hence if we have a cache hit we know that there is no need for a rebuild !
      - name: Setup cache-key
        if: steps.should-run-python-jobs.outputs.run == 'true'
        id: cache-key
        run: echo "key=${{ matrix.os }}-${{ hashFiles('src/**', 'oxidation/libparsec/**', 'rust-toolchain.toml', 'Cargo.toml', 'Cargo.lock') }}-libparsec-python" >> $GITHUB_OUTPUT
        shell: bash

      - name: Restore libparsec if Rust hasn't been modified
        id: cache-libparsec
        if: steps.should-run-python-jobs.outputs.run == 'true'
        uses: actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # pin v3.3.1
        with:
          key: ${{ steps.cache-key.outputs.key }}
          path: |
            parsec/_parsec.*.pyd
            parsec/_parsec.*.so
        timeout-minutes: 2

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@64fef3b54176f6c03745153e9aae267bf88cbc0f # pin v1.4.3
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && steps.cache-libparsec.outputs.cache-hit != 'true'
        with:
          # We setup the cache by hand, see below
          cache: false
        timeout-minutes: 5

      - name: Retrieve Rust cache
        uses: Swatinem/rust-cache@6fd3edff6979b79f87531400ad694fb7f2c84b1f # pin v2.2.1
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && steps.cache-libparsec.outputs.cache-hit != 'true'
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not accross PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: ${{ github.ref == 'refs/heads/master' }}
        timeout-minutes: 2

      - name: Install python deps
        if: steps.should-run-python-jobs.outputs.run == 'true'
        shell: bash
        run: |
          set -ex
          if ${{ steps.cache-libparsec.outputs.cache-hit == 'true' }}; then export POETRY_LIBPARSEC_BUILD_STRATEGY=no_build; fi
          python make.py python-ci-install
        timeout-minutes: 20

      # We only save the libparsec lib when:
      # - We are not in a github queue branch (they're a one time use so caching won't help)
      # - We haven't already cached it.
      - name: Save cached libparsec to be reused on later call
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && steps.cache-libparsec.outputs.cache-hit != 'true'
          && contains(github.ref, 'gh-readonly-queue') != 'true'
        uses: actions/cache/save@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # pin v3.3.1
        with:
          key: ${{ steps.cache-key.outputs.key }}
          path: |
            parsec/_parsec.*.pyd
            parsec/_parsec.*.so
        timeout-minutes: 2

      - name: Basic tests
        if: steps.should-run-python-jobs.outputs.run == 'true'
        run: poetry run pytest ${{ env.pytest-base-args }} tests -n auto
        timeout-minutes: 10

      # TODO: remove me once client connection oxidation is done
      - name: (🐧 Linux) Basic tests (with unstable Rust client connection)
        if: steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        # TODO: -n auto doesn't work see: https://github.com/Scille/parsec-cloud/issues/4145
        run: poetry run pytest ${{ env.pytest-base-args }} tests
        timeout-minutes: 10
        env:
          UNSTABLE_OXIDIZED_CLIENT_CONNECTION: true

      - name: (🐧🏁 Not macOS) Mountpoint tests
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-') != true
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runmountpoint --runslow -m mountpoint
        timeout-minutes: 10

      - name: (🐧 Linux) Install pytest-xvfb plugin for pytest for Qt Testing
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        run: poetry run pip install pytest-xvfb
        timeout-minutes: 2

      - name: (🐧🏁 Not MacOS) GUI tests
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-') != true
        # Note: using `--numprocesses 1` force pytest to print the test that it will be executing
        # This is usefull to pinpoint exactly which test in blocking.
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runmountpoint --runslow --rungui -m gui --numprocesses 1
        timeout-minutes: 10

      - name: (🐧 Linux) PostgreSQL tests
        if: >-
          steps.should-run-python-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        env:
          PGINSTALLATION: /usr/lib/postgresql/${{ env.postgresql-version }}/bin
        run: poetry run pytest ${{ env.pytest-base-args }} tests/backend tests/test_cli.py -k 'not test_shuffle_roles' --postgresql --runslow
        timeout-minutes: 20

      - name: Hypothesis tests
        if: steps.should-run-python-jobs.outputs.run == 'true'
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runslow -m slow --numprocesses auto
        timeout-minutes: 50

  ##############################################################################
  #                            🦀 Rust tests                                   #
  ##############################################################################

  test-rust-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux
            # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
            os: ubuntu-20.04
          - name: 🍎 macOS
            os: macos-12
          - name: 🏁 Windows
            os: windows-2022
    name: '${{ matrix.name }}: 🦀 Rust tests'
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50  # pin v2.11.1
        id: changes
        with:
          filters: .github/filters/ci.yml

      - name: Check modified path that require rust-ci run
        id: should-run-rust-jobs
        if: >-
          steps.changes.outputs.rust-jobs == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - uses: actions-rust-lang/setup-rust-toolchain@64fef3b54176f6c03745153e9aae267bf88cbc0f # pin v1.4.3
        if: steps.should-run-rust-jobs.outputs.run == 'true'
        with:
          # We setup the cache by hand, see below
          cache: false
        timeout-minutes: 10

      - name: Retrieve Rust cache
        uses: Swatinem/rust-cache@6fd3edff6979b79f87531400ad694fb7f2c84b1f # pin v2.2.1
        if: steps.should-run-rust-jobs.outputs.run == 'true'
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not accross PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: ${{ github.ref == 'refs/heads/master' }}
        timeout-minutes: 5


      # Building OpenSSL requires a perl interpreter.
      # The default one does not provide windows-style filesystem
      # paths so we have to switch to Strawberry.
      - name: Use strawberry perl
        if: steps.should-run-rust-jobs.outputs.run == 'true' && startsWith(matrix.os, 'windows')
        shell: bash
        run: echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
        timeout-minutes: 1

      - name: Test rust codebase
        if: steps.should-run-rust-jobs.outputs.run == 'true'
        shell: bash
        run: |
          set -ex
          cargo test --profile ci-rust --workspace ${{ env.cargo-exclude-unused-crates }}
          # By default, `libparsec_crypto` uses Rust Crypto
          cargo test --profile ci-rust --package libparsec_crypto --features use-sodiumoxide
        timeout-minutes: 30
        env:
          RUST_LOG: debug

      # Clippy basically compile the project, hence it's faster to run it in
      # the test-rust-matrix job where compilation cache is reused !
      - uses: ./.github/actions/use-pre-commit
        if: >-
          steps.should-run-rust-jobs.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        with:
          extra-args: clippy --all-files --verbose

  ##############################################################################
  #                            🌐 Web tests                                    #
  ##############################################################################

  test-web-app:
    runs-on: ubuntu-22.04
    name: 🌐 Web tests
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin v3.3.0
        timeout-minutes: 5

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50  # pin v2.11.1
        id: changes
        with:
          filters: .github/filters/ci.yml

      - name: Check modified path that require `test-web` to run
        id: should-run-web-jobs
        if: >-
          steps.changes.outputs.web-jobs == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c  # pin v3.6.0
        if: steps.should-run-web-jobs.outputs.run == 'true'
        with:
          node-version: ${{ env.node-version }}
        timeout-minutes: 2

      # TODO: cache libparsec and reuse it if Rust code hasn't changed !

      - name: Install dependencies
        if: steps.should-run-web-jobs.outputs.run == 'true'
        run: |
          # Execute 'npm clean-install' until success,
          # This is done that way because sometime some CDN response with 503
          until npm clean-install; do
            echo "Failed clean-install, retrying ...";
          done
        working-directory: oxidation/client
        timeout-minutes: 5

      - name: E2E tests
        if: steps.should-run-web-jobs.outputs.run == 'true'
        # Without `VUE_CLI_TEST` set, the command hangs forever because
        # it fails to stop the server :'(
        # (see https://github.com/vuejs/vue-cli/issues/3401)
        run: VUE_CLI_TEST=1 npm run test:e2e:headless
        working-directory: oxidation/client
        timeout-minutes: 10

      # Need to run e2e first, as it will trigger compilation of the
      # libparsec web plugin that is also needed for the unit tests (but
      # which doesn't trigger it compilation...)
      - name: Unit tests
        if: steps.should-run-web-jobs.outputs.run == 'true'
        run: npm run test:unit
        working-directory: oxidation/client
        timeout-minutes: 10
