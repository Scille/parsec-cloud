name: ci

on:
  pull_request:
  push:
    branches:
      - master

env:
  python-version: "3.9"
  rust-version: 1.66.1
  node-version: 18.13.0
  poetry-version: 1.2.2
  # TODO: We stick to PostgreSQL 12 for the moment given later versions are
  # much slower (postgresql tests runs in ~9mn on 12 vs ~36mn on 14 !)
  postgresql-version: 12
  pytest-base-args: >-
    --log-level=DEBUG
    --durations=10
    --side-effects-timeout=10
    -vv
    -x
  cargo-exclude-unused-crates: >-
    --exclude=libparsec_bindings_android
    --exclude=libparsec_bindings_web
    --exclude=libparsec_bindings_electron
  # Temporary fix for macos tests:
  # See: https://github.com/python-poetry/poetry/issues/7161
  SYSTEM_VERSION_COMPAT: "0"

jobs:

  # Github PR merging is configured to only require this job to pass
  ci-is-happy:
    name: ⭐ CI is happy ⭐
    needs:
      - check-quality-assurance
      - test-python-matrix
      - test-rust-matrix
      - test-web-app
    runs-on: ubuntu-latest
    if: always()
    steps:
      # The Needs context value contains only:
      # - the final state a jobs (if it fails or not)
      # - it's output (actually none of our jobs are configuring outputs variable)
      #
      # https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context
      - name: Debug the needs context values
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: printenv NEEDS

      - name: We're very sorry
        run: |
          echo "Oh No, we have jobs that have failed/cancelled/skipped :("
          exit 42
        if: >-
          contains(needs.*.result, 'failure')
          || contains(needs.*.result, 'skipped')
          || contains(needs.*.result, 'cancelled')
          || ! contains(needs.*.result, 'success')

      - name: It's showtime
        run: echo "My job here is done !"

  ##############################################################################
  #                                   📊 Q&A                                   #
  ##############################################################################

  check-quality-assurance:
    name: 📊 Q&A
    # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # pin v3.2.0

      - uses: ./.github/actions/paths-filter
        id: changes

      - name: Install Cargo fmt
        run: |
          set -ex
          rustup component add rustfmt
          cargo fmt --version

      - uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.python-version }}
          poetry-version: ${{ env.poetry-version }}

      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516  # pin v3.5.1
        with:
          node-version: ${{ env.node-version }}

      - name: Check Commit Signature
        run: python .github/scripts/check_commit_signature.py

      - name: Check News fragments
        if: |
          startsWith(github.ref, 'refs/pull/')
          && !(
            startsWith(github.head_ref, 'yolo')
            || startsWith(github.head_ref, 'release')
            || startsWith(github.head_ref, 'revert')
            || startsWith(github.head_ref, 'acknowledge')
            )
          && steps.changes.outputs.newsfragments == 'true'
        run: |
          whereis git
          git fetch origin master
          python .github/scripts/check_newsfragments.py ${{ github.head_ref }}

      - name: Patch pre-commit for line-ending
        run: |
          sed -i '/id: mixed-line-ending/a\        args: [ --fix=lf ]' .pre-commit-config.yaml
          cat .pre-commit-config.yaml

      - name: Install project (needed for mypy check)
        run: |
          set -ex
          poetry install -E core -E backend
        # We skip _parsec.so compilation given Mypy only cares about _parsec.pyi
        env:
          POETRY_LIBPARSEC_BUILD_STRATEGY: no_build

      # Clippy basically compile the project, hence it's faster to run it in
      # the test-rust-matrix job where compilation cache is reused !
      - uses: ./.github/actions/use-pre-commit
        env:
          SKIP: clippy
        timeout-minutes: 30

  ##############################################################################
  #                            🐍 Python tests                                 #
  ##############################################################################

  test-python-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux
            # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
            # 20.04 is required to install PostgreSQL 12
            os: ubuntu-20.04
          - name: 🍎 macOS
            os: macos-12
          - name: 🏁 Windows
            os: windows-2022
            winfsp-version: 1.11.22176
    name: '${{ matrix.name }}: 🐍 Python tests'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # pin v3.2.0

      - uses: ./.github/actions/paths-filter
        id: changes

      - name: Check modified path that require python-ci run
        id: python-changes
        if: >-
          steps.changes.outputs.python == 'true'
          || steps.changes.outputs.rust-ext == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - name: (🐧 Linux) Configure PostgreSQL APT repository
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        env:
          POSTGRE_APT_KEY_SHA_512: df557805862cd279f40819834af14e1723b18044df9dc22bea710b6980c98cc8ed39e75ed5c9adaa1932992710f1180f0491dc9437bfd485b4aa2b75776407d4  /usr/share/keyrings/postgre-sql-keyring.gpg
        run: |
          set -x -o pipefail

          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc \
            | sudo gpg --dearmor --output /usr/share/keyrings/postgre-sql-keyring.gpg

          printenv POSTGRE_APT_KEY_SHA_512 | sha512sum --strict -c -

          echo "deb [signed-by=/usr/share/keyrings/postgre-sql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" \
            | sudo tee /etc/apt/sources.list.d/postgre-sql.list

          sudo apt-get update

        # Install required packages for ubuntu:
        # - LibFuse2 since only libfuse3 is available on ubuntu-20.04.
        # - `desktop-file-utils` provides `update-desktop-database` used by `tests/scripts/run_testenv.sh`.
        # - A specific version of postgresql is used for PostgreSQL's tests.
        # - dependencies for Qt testing. See: https://pytest-qt.readthedocs.io/en/latest/troubleshooting.html#github-actions.
      - name: (🐧 Linux) Install packages fuse2, PostgreSQL-${{ env.postgresql-version }}
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        run: >
          sudo apt-get -y install
          libfuse2
          fuse
          desktop-file-utils
          postgresql-${{ env.postgresql-version }}
          libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0
          libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
          libxcb-xinerama0 libxcb-xfixes0 x11-utils

      - name: (🍎 macOS) Install macfuse
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-')
        run: brew install --cask macfuse

      - name: (🏁 Windows) Install WinFSP
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'windows-')
        shell: bash
        run: |
          choco install -y --limit-output winfsp --version=${{ matrix.winfsp-version }}
          mkdir winfsp-test
          curl -L https://github.com/billziss-gh/winfsp/releases/download/v1.8/winfsp-tests-1.8.20304.zip -o winfsp-test/winfsp-tests.zip
          unzip winfsp-test/winfsp-tests.zip -d winfsp-test
          pwd
          echo "$(pwd)\winfsp-test" >> "$GITHUB_PATH"

      - uses: ./.github/actions/setup-python-poetry
        if: steps.python-changes.outputs.run == 'true'
        id: setup-python
        with:
          python-version: ${{ env.python-version }}
          poetry-version: ${{ env.poetry-version }}

      # libparsec is slow to compile, so we save it in cache and skip the
      # compilation entirely if the Rust code hasn't changed !

      - name: Use cached libparsec if Rust hasn't been modified
        id: cache-libparsec
        if: >-
          steps.python-changes.outputs.run == 'true'
          && steps.rust-changes.outputs.run != 'true'
        uses: actions/cache@v3
        with:
          # Key cache contains a hash of all the files that are used to produce _parsec.so
          # Hence if we have a cache hit we know that there is no need for a rebuild !
          key: ${{ matrix.os }}-${{ hashFiles('src/**', 'oxidation/libparsec/**', 'rust-toolchain.toml', 'Cargo.toml', 'Cargo.lock') }}-libparsec-python
          path: |
            parsec/_parsec.*.pyd
            parsec/_parsec.*.so

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@685abf830623a8456904376fce2de24302d98a7f # pin v1.3.4
        if: >-
          steps.python-changes.outputs.run == 'true'
          && steps.cache-libparsec.outputs.cache-hit != 'true'
        with:
          # We setup the cache by hand, see below
          cache: false

      - name: Retreive Rust cache
        uses: Swatinem/rust-cache@359a70e43a0bb8a13953b04a90f76428b4959bb6 # pin v2.2.0
        if: >-
          steps.python-changes.outputs.run == 'true'
          && steps.cache-libparsec.outputs.cache-hit != 'true'
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not accross PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: github.ref == 'refs/heads/master'

      - name: Install python deps
        if: steps.python-changes.outputs.run == 'true'
        run: |
          if ${{ steps.cache-libparsec.outputs.cache-hit == 'true' }}; then export POETRY_LIBPARSEC_BUILD_STRATEGY=no_build; fi
          poetry install -E core -E backend
        shell: bash
        env:
          CARGO_PROFILE: ci-python

      - name: Basic tests
        if: steps.python-changes.outputs.run == 'true'
        run: poetry run pytest ${{ env.pytest-base-args }} tests -n auto
        timeout-minutes: 10

      - name: (🐧🏁 Not macOS) Mountpoint tests
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-') != true
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runmountpoint --runslow -m mountpoint
        timeout-minutes: 10

      - name: (🐧 Linux) Install pytest-xvfb plugin for pytest for Qt Testing
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        run: poetry run pip install pytest-xvfb

      - name: (🐧🏁 Not macOS) GUI tests
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'macos-') != true
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runmountpoint --runslow --rungui -m gui
        timeout-minutes: 10

      - name: (🐧 Linux) PostgreSQL tests
        if: >-
          steps.python-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        env:
          PGINSTALLATION: /usr/lib/postgresql/${{ env.postgresql-version }}/bin
        run: poetry run pytest ${{ env.pytest-base-args }} tests/backend tests/test_cli.py -k 'not test_shuffle_roles' --postgresql --runslow
        timeout-minutes: 20

      - name: Hypothesis tests
        if: steps.python-changes.outputs.run == 'true'
        run: poetry run pytest ${{ env.pytest-base-args }} tests --runslow -m slow --numprocesses auto
        timeout-minutes: 50

  ##############################################################################
  #                            🦀 Rust tests                                   #
  ##############################################################################

  test-rust-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux
            # All linux jobs must run the same ubuntu version to avoid Rust caching issues !
            os: ubuntu-20.04
          - name: 🍎 macOS
            os: macos-12
          - name: 🏁 Windows
            os: windows-2022
    name: '${{ matrix.name }}: 🦀 Rust tests'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # pin v3.2.0

      - uses: ./.github/actions/paths-filter
        id: changes

      - name: Check modified path that require rust-ci run
        id: rust-changes
        if: >-
          steps.changes.outputs.rust == 'true'
          || steps.changes.outputs.rust-ext == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      - uses: actions-rust-lang/setup-rust-toolchain@685abf830623a8456904376fce2de24302d98a7f # pin v1.3.4
        if: steps.rust-changes.outputs.run == 'true'
        with:
          # We setup the cache by hand, see below
          cache: false

      - name: Retreive Rust cache
        uses: Swatinem/rust-cache@359a70e43a0bb8a13953b04a90f76428b4959bb6 # pin v2.2.0
        if: steps.rust-changes.outputs.run == 'true'
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not accross PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: github.ref == 'refs/heads/master'

      # Building OpenSSL requires a perl interpreter.
      # The default one does not provide windows-style filesystem
      # paths so we have to switch to Strawberry.
      - name: Use strawberry perl
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV

      - name: Additional Check (for packaging)
        if: startsWith(matrix.os, 'ubuntu')
        run: cargo check --profile ci-rust --no-default-features --features use-sodiumoxide

      - name: Test rust codebase
        if: steps.rust-changes.outputs.run == 'true'
        shell: bash
        run: |
          set -ex
          cargo test --profile ci-rust --workspace --features mock-time ${{ env.cargo-exclude-unused-crates }} --exclude libparsec_crypto
          cargo test --profile ci-rust --package libparsec_crypto --no-default-features --features use-sodiumoxide
          cargo test --profile ci-rust --package libparsec_crypto

      # Clippy basically compile the project, hence it's faster to run it in
      # the test-rust-matrix job where compilation cache is reused !
      - uses: ./.github/actions/use-pre-commit
        if: >-
          steps.rust-changes.outputs.run == 'true'
          && startsWith(matrix.os, 'ubuntu-')
        with:
          extra-args: clippy --all-files --verbose

  ##############################################################################
  #                            🌐 Web tests                                    #
  ##############################################################################

  test-web-app:
    runs-on: ubuntu-22.04
    name: 🌐 Web tests
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # pin v3.2.0

      - uses: ./.github/actions/paths-filter
        id: changes

      - name: Check modified path that require `test-web` to run
        id: web-change
        if: >-
          steps.changes.outputs.client-web == 'true'
          || github.ref == 'refs/heads/master'
        run: echo "run=true" >> $GITHUB_OUTPUT
        shell: bash

      # TODO: cache libparsec and reuse it if Rust code hasn't changed !

      - name: Install dependencies
        if: steps.web-change.outputs.run == 'true'
        run: npm clean-install
        working-directory: oxidation/client

      - name: E2E tests
        if: steps.web-change.outputs.run == 'true'
        # Without `VUE_CLI_TEST` set, the command hangs forever because
        # it fails to stop the server :'(
        # (see https://github.com/vuejs/vue-cli/issues/3401)
        run: VUE_CLI_TEST=1 npm run test:e2e:headless
        working-directory: oxidation/client
        timeout-minutes: 10

      # Need to run e2e first, as it will trigger compilation of the
      # libparsec web plugin that is also needed for the unit tests (but
      # which doesn't trigger it compilation...)
      - name: Unit tests
        if: steps.web-change.outputs.run == 'true'
        run: npm run test:unit
        working-directory: oxidation/client
        timeout-minutes: 10
