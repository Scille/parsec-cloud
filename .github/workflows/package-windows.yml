name: package-windows

# This workflow will be triggered on:
# - push on the main branch
# - push on the releases branches
# - tag push matching the version pattern
on:
  pull_request:
    paths:
      - .github/workflows/package-windows.yml
  push:
    branches:
      - master
      - "[0-9]+.[0-9]+"
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

env:
  python-version: "3.9"

jobs:
  package-windows-build-wheel:
    runs-on: windows-2022
    env:
      # Need feature from poetry 1.2.x that aren't present in 1.1.x
      poetry-version: 1.2.0b3
    outputs:
      wheel-version: ${{ steps.wheel-version.outputs.version }}
    steps:
      - name: Install poetry
        shell: bash
        run: |
          set -eux
          export POETRY_HOME=${APPDATA}/.poetry
          curl -sSL https://install.python-poetry.org \
            | python3 - --version=${{ env.poetry-version }}
          echo "${APPDATA}\.poetry\bin" >> "$GITHUB_PATH"

      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin v3.0.2

      - uses: actions/setup-python@c4e89fac7e8767b327bbad6cb4d859eda999cf08  # pin v4.1.0
        with:
          python-version: ${{ env.python-version }}
          cache: poetry

      - name: Get wheel version
        id: wheel-version
        shell: bash
        run: |
          set -eux
          # Retrieve Parsec version and customize it if we are not building on a tag
          # See https://www.python.org/dev/peps/pep-0440/#local-version-identifiers
          if ([ "${{ github.ref_type }}" == "tag" ])
          then
            # Use tag name as version
            VERSION=`git describe --tag`
          else
            # Use `<tag_name>+dev<commit_hash>` as version
            VERSION=`sed -n 's/^__version__ = "\\(.*\\)"$/\\1/p' parsec/_version.py`
            COMMIT=`git rev-parse --verify --short HEAD`
            VERSION="$VERSION.$COMMIT"
            # Customize version with tag
            sed -i "s#^\\(__version__ = \\).*\$#\\1'$VERSION'#" parsec/_version.py
            test $(grep -E 'version = ' -o pyproject.toml | wc -l) -eq 1  # Sanity check for the next sed
            sed -i "s#^\\(version = \\).*\$#\\1'$VERSION'#" pyproject.toml
          fi

          echo "::warning title=Wheel version::$VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Include pip in the build dependencies
        # For some reason, `ensurepip` in `build.py` does not work in this specific case
        # (i.e building wheel using cibuildwheel on windows). Hence, we add `pip` to the
        # build-sytem requires, so it is included in the build environement. The reason
        # why this is not the general approach is because this fails on windows when doing
        # a `poetry install` (since it installs the requirements using `pip install ...`
        # instead of `python -m pip install ...`)
        run: sed -i "s#pip; platform_system != 'Windows'#pip#" pyproject.toml

      - name: Build wheel
        uses: pypa/cibuildwheel@afb4329fe32181c15d34ef94bf64dad7715b44ba  # ping v2.8.1
        with:
          output-dir: dist

      - name: Set file for wheel version
        run: echo ${{ steps.wheel-version.outputs.version }} > dist/version

      - name: Generate requirements & constraints infos
        run: python packaging/wheel/wheel_it.py . --output dist --skip-wheel

      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin v3.1.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist/

  package-windows-build-installer-content:
    needs: package-windows-build-wheel
    runs-on: windows-2022
    steps:
      - uses: actions/setup-python@c4e89fac7e8767b327bbad6cb4d859eda999cf08  # pin v4.1.0
        with:
          python-version: ${{ env.python-version }}

      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin v3.0.2

      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # pin v3.0.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-wheel
          path: dist

      - name: Prepare build directory
        run: Copy-Item -Recurse -Path ${{ github.workspace }}\packaging\windows\* -Destination ${{ runner.temp }}
        working-directory: ${{ runner.temp }}

      - name: Debug ${{ runner.temp }} dir
        run: Get-ChildItem -Recurse -Path ${{ runner.temp }}

      - name: Freeze Parsec
        run: python3 freeze_program.py ${{ github.workspace }} --wheel-it-dir ${{ github.workspace }}/dist
        working-directory: ${{ runner.temp }}

      - name: Debug build directory
        run: Get-ChildItem -Path ${{ runner.temp }}\build

      # Cannot do the NSIS installer part in CI given it requires to sign `parsec.exe`

      - name: Prepare artifact
        run: |
          md dist
          Copy-Item -Path build\manifest.ini -Destination dist
          Copy-Item -Path build\install_files.nsh -Destination dist
          Copy-Item -Path build\uninstall_files.nsh -Destination dist
          Copy-Item -Recurse -Path build\parsec-* -Destination dist
          Copy-Item -Path build\winfsp-* -Destination dist
        working-directory: ${{ runner.temp }}

      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin v3.1.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer-content
          path: ${{ runner.temp }}/dist/
