name: Publish package

on:
  workflow_dispatch:
    inputs:
      release:
        required: true
        description: The release tag to fetch the package to publish

  release:
    types:
      - published
      - edited

# We set `concurrency` to prevent having this workflow being run on code that is not up-to-date on a PR (a user make multiple push in a quick manner).
# But on the main branch, we don't want that behavior.
# Having the workflow run on each merge commit is something we would like, that could help us where a regression was made and missed by previous checks.
concurrency:
  group: publish-package-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-22.04
    steps:
      - name: Get tag version
        id: version
        run: |
          set -eux -o pipefail
          case "${{ github.event_name }}" in
            workflow_dispatch)
              raw_tag="${{ inputs.release}}"
              ;;
            release)
              raw_tag="${{ github.ref_name }}"
              ;;
          esac
          gh release \
            --repo=${{ github.server_url }}/${{ github.repository }} \
            download \
            $raw_tag \
            --pattern=version \
            --output=- | grep -e "full=" -e "pep440" | tee -a $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
        timeout-minutes: 2

      - name: Download Wheels from release
        run: |
          mkdir dist
          gh release \
            --repo=${{ github.server_url }}/${{ github.repository }} \
            download \
            v${{ steps.version.outputs.full }} \
            --pattern=parsec_cloud-${{ steps.version.outputs.pep440 }}-*.whl \
            --dir=dist
        env:
          GH_TOKEN: ${{ github.token }}
        timeout-minutes: 2

      - name: Download snap from release
        # FIXME: We currently don't provide a client, should use the one generated with the ionic project
        if: false
        run: |
          mkdir snap
          gh release \
            --repo=${{ github.server_url }}/${{ github.repository }} \
            download \
            v${{ steps.version.outputs.full }} \
            --pattern=parsec_v${{ steps.version.outputs.full }}_*.snap \
            --dir=snap
        env:
          GH_TOKEN: ${{ github.token }}
        timeout-minutes: 2

      - name: List downloaded files
        run: tree dist

      - name: Install Snapcraft
        if: false
        uses: samuelmeuli/action-snapcraft@d33c176a9b784876d966f80fb1b461808edc0641 # pin v2.1.1
        timeout-minutes: 2

      - name: Upload Snap
        if: false
        run: snapcraft upload --release=edge snap/parsec_v${{ steps.version.outputs.full }}_*.snap
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_CREDENTIALS }}
        timeout-minutes: 2

      - name: Publish wheel on PyPI
        uses: pypa/gh-action-pypi-publish@2f6f737ca5f74c637829c0f5c3acd0e29ea5e8bf # pin v1.8.11
        with:
          user: __token__
          password: ${{ secrets.PYPI_CREDENTIALS }}
        timeout-minutes: 2
