name: setup-python-poetry
description: Install Python & Poetry

inputs:
  poetry-version:
    description: Poetry version to install
    required: true

  project-path:
    description: Path to the directory containing the pyproject.toml
    required: true

runs:
  using: composite
  steps:
    # We need to install poetry before the correct version of python
    # Because we configured the action `setup-python` to use `poetry` as the cache system
    # And the action will failed if it can't find `poetry` or `poetry.lock`
    - name: Install poetry
      shell: bash -eux {0}
      run: pipx install 'poetry==${{ inputs.poetry-version }}'

    - name: (*Nix) Add local/bin to path
      shell: bash -eux {0}
      if: runner.os != 'Windows'
      run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"

    - name: (Windows) Add local/bin to path
      shell: bash -eux {0}
      if: runner.os == 'Windows'
      run: echo "${USERPROFILE}\.local\bin" >> "$GITHUB_PATH"

    - name: Install poetry-plugin-export
      shell: bash -eux {0}
      run: poetry self add poetry-plugin-export

    - name: Install python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # pin v5.6.0
      id: setup-python
      with:
        python-version-file: ${{ inputs.project-path }}/pyproject.toml
        cache: poetry

    # FIXME: Remove me once poetry support `virtualenv@20.33.0`
    - name: Ensure poetry use correct virtualenv
      shell: bash -eux {0}
      run: pipx inject --force poetry 'virtualenv<20.33.0'

    - name: (*Nix) Configure poetry to use the installed python
      shell: ${{ runner.os != 'Windows' && 'bash' || 'pwsh' }}
      run: poetry -C ${{ inputs.project-path }} env use ${{ steps.setup-python.outputs.python-path }}
