name: setup-python-poetry
description: Install Python & Poetry

inputs:
  poetry-version:
    description: Poetry version to install
    required: true

  project-path:
    description: Path to the directory containing the pyproject.toml
    required: true

runs:
  using: composite
  steps:
    # We need to install poetry before the correct version of python
    # Because we configured the action `setup-python` to use `poetry` as the cache system
    # And the action will failed if it can't find `poetry` or `poetry.lock`
    - name: (*Nix) Install poetry-${{ inputs.poetry-version }}
      shell: bash
      if: runner.os != 'Windows'
      run: |
        set -eux
        set -o pipefail
        export POETRY_HOME="$HOME/.poetry"
        mkdir -p "$POETRY_HOME"
        if ! curl -sSL https://install.python-poetry.org | python3 - --version=${{ inputs.poetry-version }}; then
          tail -n +0 ${{ github.workspace }}/poetry-installer*.log
          exit 3
        fi
        echo "$POETRY_HOME/bin" >> "$GITHUB_PATH"

    - name: (Windows) Install poetry-${{ inputs.poetry-version }}
      shell: bash
      if: runner.os == 'Windows'
      run: |
        set -eux
        export POETRY_HOME=${APPDATA}/.poetry
        curl -sSL https://install.python-poetry.org \
          | python3 - --version=${{ inputs.poetry-version }}
        echo "${APPDATA}\.poetry\bin" >> "$GITHUB_PATH"

    - name: Install python
      uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f  # pin v5.1.1
      id: setup-python
      with:
        python-version-file: ${{ inputs.project-path }}/pyproject.toml
        cache: poetry

    - name: (*Nix) Configure poetry to use the installed python
      shell: ${{ runner.os != 'Windows' && 'bash' || 'pwsh' }}
      run: poetry -C ${{ inputs.project-path }} env use ${{ steps.setup-python.outputs.python-path }}
