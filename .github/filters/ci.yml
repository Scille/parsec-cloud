########
# RUST #
########

# Every non platform rust source files.
libparsec-rust-not-platform: &libparsec-rust-not-platform libparsec/crates/!(platform_*)/src/**

# We consider a schema to be ending with `.json5` suffix in libparsec folder.
libparsec-schema-file: &libparsec-schema-file libparsec/**/*.json5

# Only list root Cargo files,
# We only need those, since changes like:
# - Version bump of one of our crate
# - An addition/deletion of a dependency
# - A new added crate
# - A renamed crate
# will be reflected in the lock file
rust-dependencies-workspace: &rust-dependencies-workspace
  - Cargo.toml
  - Cargo.lock

# We run `cargo-deny` on dependencies changes or configuration change.
rust-cargo-deny: &rust-cargo-deny
  - deny.toml
  - *rust-dependencies-workspace

rust-toolchain: &rust-toolchain rust-toolchain.toml

# Rust code used to defined the python extension.
rust-python-binding: &rust-python-binding
  - server/src/**/*.rs
  - server/Cargo.toml

# Rust code used to defined the wasm module.
rust-web-binding: &rust-web-binding bindings/web/**/*.rs

# Web specific rust code, this include every rust file in platform crates that are not in the `windows`, `unix` or `native` module.
rust-platform-crates-web: &rust-platform-crates-web
  - libparsec/crates/platform_*/src/!(windows|unix|native)/*.rs
  - libparsec/crates/platform_*/src/!(windows|unix|native).rs

# Rust code of the CLI application.
rust-cli: &rust-cli cli/**/*.rs

# We run the rust wasm tests only when:
# - Rust web specific code or shared code is modified
# - When platform tests are edited
# - When toolchain or dependencies have changed
rust-test-wasm: &rust-test-wasm
  - *rust-platform-crates-web
  - libparsec/crates/platform_*/tests/**.rs
  - *rust-toolchain
  - *rust-dependencies-workspace

# What we consider a rust changes is anything related to rust have changed (code, dependencies, tests, cargo-deny)
rust-changes: &rust-changes
  - *rust-dependencies-workspace
  - libparsec/**/*.rs
  - *libparsec-schema-file
  - *rust-toolchain
  - *rust-python-binding
  - *rust-web-binding
  - *rust-cli
  - *rust-cargo-deny

# The rust jobs need to watch for:
# - The change on the rust code.
# - The change in the dependencies list.
# - We change the toolchain
# - We modify the Ci workflow
rust-jobs:
  - .github/workflows/ci-rust.yml
  - *rust-changes

##########
# PYTHON #
##########

any-python-files: &any-python-files
  - "**.py"

python-server: &python-server
  - server/parsec/**
  - server/tests/**
  - make.py
  - server/build.py

python-dependencies-project: &python-dependencies-project
  - server/pyproject.toml
  - server/poetry.lock
  - server/setup.cfg

python-changes: &python-changes
  - *python-dependencies-project
  - *python-server

# The python jobs need to be run when:
# - The ci workflow has changed
# - The action `setup-python-poetry` has changed
# - The rust has changed
#   - The dependencies
#   - The pure code has changed
# - The rust python binding has changed
# - The python code (test & code) was modified
# - We updated the python dependencies
# > Note: We don't use `rust-changes` because it include all the change made to the rust code
# > including change made to the ionic part.
python-jobs:
  - .github/workflows/ci-python.yml
  - .github/actions/**
  - *python-changes
  - *rust-dependencies-workspace
  - *libparsec-rust-not-platform
  - *libparsec-schema-file
  - *rust-toolchain
  - *rust-python-binding

#########
# IONIC #
#########

# TODO: We currently don't test the electron application
# So we don't have to watch the electron binding (likewise for the client code related to electron)
# rust-electron-binding: &rust-electron-binding bindings/electron
# new-client-electron: &new-client-electron: /client/electron

# TODO: We currently don't test the android application
# So we don't have to watch the android binding (likewise for the client code related to android)
# rust-android-binding: &rust-android-binding bindings/android
# new-client-android: &new-client-android: /client/android

# TODO: We currently don't test the ios application
# So we don't have to watch the client code related to the ios application
# new-client-ios: &new-client-ios /client/ios

web: &web
  - client/public/**
  - client/resources/**
  - client/src/**
  - client/tests/**
  - client/electron/**

new-client-dependencies-project: &new-client-dependencies-project
  - client/*.ts
  - client/*.json
  - client/*.js
  - client/.browserslistrc
  - client/.env

# The web jobs need to be run when:
# - The ci workflow has changed
# - The rust has changed
#   - The dependencies
#   - The pure code has changed
#   - Platform code specific to the web interface
# - The rust web binding has changed
# - The Web code / test has changed
# - The web dependencies has changed
# > Note: We don't use `rust-changes` because it include all the change made to the rust code
# > including change made to the python part.
web-jobs:
  - .github/workflows/ci-web.yml
  - *rust-dependencies-workspace
  - *libparsec-rust-not-platform
  - *rust-platform-crates-web
  - *libparsec-schema-file
  - *rust-toolchain
  - *rust-web-binding
  - *new-client-dependencies-project
  - *web

########
# Docs #
########

docs-jobs:
  - .github/workflows/ci-docs.yml
  - docs/hosting/**
  - docs/userguide/**
  - docs/figures/**
  - docs/_static/**
  - docs/parsec*.png
  - docs/locale/**.po
  - docs/conf.py
  - docs/pyproject.toml
  - docs/poetry.lock
  - docs/Makefile
  - docs/**.rst
