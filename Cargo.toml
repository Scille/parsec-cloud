[package]
name = "parsec"
# We don't use this version to set the version of parsec
# For that you're looking for `parsec/_version.py`
version = "0.0.0"
edition = "2021"

[package.metadata.maturin]
name = "parsec._parsec"

[lib]
name = "parsec"
crate-type = ["cdylib"]

[workspace]
members = [
    "oxidation/libparsec",
    "oxidation/libparsec/crates/*",
    "oxidation/bindings/web",
    "oxidation/bindings/electron",
    "oxidation/bindings/android/libparsec/rust",
]
# Ignore bindings stuff given they are special snowflakes that require exotic toolchain and dependencies
default-members = ["oxidation/libparsec"]

[features]
test-utils = ["libparsec/test-utils"]

[dependencies]
libparsec = { path = "oxidation/libparsec" }

regex = "1.7.3"
paste = "1.0.12"
pyo3 = { version = "0.17.3", features = ["multiple-pymethods", "extension-module"] }
uuid = { version = "1.2.2", features = ["serde", "v4", "fast-rng"] }
tokio = { version = "1.27", features = ["rt", "rt-multi-thread"] }
lazy_static = "1.4.0"
futures = "0.3.21"

# Rust unoptimized code is really slow with crypto algorithm and regex compilation,
# hence we optimize our 3rd party dependencies.
[profile.dev.package."*"]
opt-level = 1

[profile.dev-python]
inherits = "dev"
# We don't optimize our own crates here given it comes with a high impact on
# when doing single change recompilation.

# Custom profiles for the CI. The idea here is to try to save compilation time
# and artifacts size (to keep cache efficient).

[profile.ci-rust]
inherits = "dev"
# Remove debug symbols saves roughly ~30% compilation time and ~50% artifacts size
debug = false
# Given we don't keep our crate in the cache, we always build them from the
# ground. Removing that saves ~20% in artifacts size.
incremental = false

[profile.ci-python]
inherits = "ci-rust"
# Using `opt-level = 0` divides by 2 compilation time, however it makes code run much
# slower which is a no-go for Python tests :'(
opt-level = 1
