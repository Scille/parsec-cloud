# See https://aka.ms/yaml for documentation

trigger:
  branches:
    include:
      - "*"
  tags:
    include:
      - "*"

variables:
  python.version: "3.9"
  node.version: 16.x
  # pyinstaller is picky on the version to use
  python.version_for_macos_packaging: "3.9"
  postgresql.version: "12"
  winfsp.version: 1.8.20304
  pytest.base_args: |
    --log-level=DEBUG \
    --durations=10 \
    --side-effects-timeout=10 \
    -v \
  debug.stress_flaky_tests: 0  # Repeat all flaky tests X times
  rust.version: 1.62.0

jobs:


  #################################################################################
  # Step 0: Wheel build
  - job: s0_build_wheel
    displayName: Build wheel
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    timeoutInMinutes: 10
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: self
        submodules: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)
      - bash: |
          set -eux
          sudo apt-get update
          python --version
          # pip 21.3 introduces in-tree-build by default
          python -m pip install 'pip>=21.3' --user --upgrade
          python -m pip --version
          # Must use poetry>=1.2.0b2 given otherwise `poetry export` produce buggy output
          python -m pip install --user --upgrade 'poetry>=1.2.0b2' wheel
          poetry --version
        displayName: Bootstrap
      - bash: |
          set -eux
          mkdir dist/

          # Retrieve Parsec version and customize it if we are not building on a tag
          # See https://www.python.org/dev/peps/pep-0440/#local-version-identifiers
          if ([[ $(Build.SourceBranch) = "refs/tags/"* ]])
          then
            # Use tag name as version
            VERSION=`git -C $(Build.SourcesDirectory) describe --tag`
          else
            # Use `<tag_name>+dev<commit_hash>` as version
            VERSION=`sed -n 's/^__version__ = "\\(.*\\)"$/\\1/p' $(Build.SourcesDirectory)/parsec/_version.py`
            COMMIT=`git -C $(Build.SourcesDirectory) rev-parse --verify --short HEAD`
            VERSION="$VERSION.$COMMIT"
            # Customize version with tag
            sed -i "s#^\\(__version__ = \\).*\$#\\1'$VERSION'#" parsec/_version.py
            test $(grep -E 'version = ' -o pyproject.toml | wc -l) -eq 1  # Sanity check for the next sed
            sed -i "s#^\\(version = \\).*\$#\\1'$VERSION'#" pyproject.toml
          fi

          echo "Version label: $VERSION"
          echo $VERSION > dist/version

          python packaging/wheel/wheel_it.py . --output dist/

          ls dist
        displayName: Build Wheel, requirements & constraints
      - publish: dist/
        artifact: wheel

  #################################################################################
  # Step 1: Tests

  - job: s1_oxidation
    displayName: Rust Oxidation
    dependsOn: s0_build_wheel
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    timeoutInMinutes: 60
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: self
        submodules: true

      - download: current
        artifact: wheel

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)

      - bash: |
          set -eux
          sudo apt-get update
          python --version
          # Rust stuff
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain $(rust.version) -y
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
          # pip 21.3 introduces in-tree-build by default
          python -m pip install 'pip>=21.3' --user --upgrade
          python -m pip --version
        displayName: Bootstrap

      - template: ci/cache-rust.yml
        parameters:
          cache_git_database: false

      - bash: |
          set -eux

          # Test libparsec_crypto with both features
          cargo test --package libparsec_crypto --features use-sodiumoxide
          cargo test --package libparsec_crypto --features use-rustcrypto

          cargo test --workspace --features mock-time
        workingDirectory: $(Build.SourcesDirectory)/oxidation
        displayName: Rust Tests

      - bash: |
          set -eux
          # Remove the parsec folder from the source to force use of the wheel
          rm -rf parsec
          # Install the parsec wheel with all dependencies
          WHEEL=$(ls $(Pipeline.Workspace)/wheel/parsec_cloud-*.whl)
          # Install Parsec with restricted dependencies and also dev dependencies
          python -m pip install --requirement $(Pipeline.Workspace)/wheel/all-requirements.txt
          python -m pip install $WHEEL[core,backend] --no-deps
          # Now install oxidation extensions
          pip install oxidation/libparsec_python
          # Check dependency compatibility
          python -m pip check parsec[core,backend]
          python -m pip check libparsec_python
        displayName: Install

      - bash: |
          set -eux
          python -m pytest $(pytest.base_args) tests -n auto --runrust
        displayName: Python Tests

      - bash: ls -la ./{.target,oxidation} $(HOME)/.cargo/{git,registry} || true
        workingDirectory: $(Build.SourcesDirectory)
        displayName: Inspect Cargo directory

  - job: s1_linux_test
    displayName: Linux tests
    dependsOn: s0_build_wheel
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    timeoutInMinutes: 60
    pool:
      vmImage: ubuntu-latest
    variables:
      PGINSTALLATION: /usr/lib/postgresql/$(postgresql.version)/bin
    steps:
      - checkout: self
        submodules: true
      - download: current
        artifact: wheel
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)
      - bash: |
          set -eux
          sudo apt-get update
          python --version
          # pip 21.3 introduces in-tree-build by default
          python -m pip install 'pip>=21.3' --user --upgrade
          python -m pip --version
          sudo apt-get install \
            postgresql-$(postgresql.version) \
            desktop-file-utils  # Provides `update-desktop-database` used by `tests/scripts/run_testenv.sh`
          psql --version
        displayName: Bootstrap

      - bash: |
          set -eux
          # Remove the parsec folder from the source to force use of the wheel
          rm -rf parsec
          # Install the parsec wheel with all dependencies
          WHEEL=$(ls $(Pipeline.Workspace)/wheel/parsec_cloud-*.whl)
          # Install Parsec with restricted dependencies and also dev dependencies
          python -m pip install --requirement $(Pipeline.Workspace)/wheel/all-requirements.txt
          python -m pip install $WHEEL[core,backend] --no-deps
          # Check dependency compatibility
          python -m pip check parsec[core,backend]
        displayName: Install
      - bash: |
          set -eux
          timeout 200 py.test $(pytest.base_args) \
            tests \
            -n auto --max-worker-restart=0 -x \
            --junitxml=test-results-fast.xml
        displayName: Tests fast
      - bash: |
          set -eux
          timeout 200 py.test $(pytest.base_args) \
            tests --runmountpoint --runslow -m mountpoint \
            -n auto --max-worker-restart=0 -x \
            --junitxml=test-results-mountpoint.xml
        displayName: Tests mountpoint
      - bash: |
          set -eux
          timeout 1000 py.test $(pytest.base_args) \
            tests --runslow -m slow \
            -n auto --max-worker-restart=0 -x \
            --junitxml=test-results-slow.xml
        displayName: Tests slow
      - bash: |
          set -eux
          # `test_cli.py` uses `--postgresql` option to test DB migration cli
          timeout 1000 py.test $(pytest.base_args) \
            tests/backend tests/test_cli.py --postgresql --runslow \
            -n auto --max-worker-restart=0 -x \
            --junitxml=test-results-postgresql.xml
        displayName: Tests PostgreSQL
      # The full disk test are run separately since they rely on running a sqlite3 database
      # on a fuse mountpoint which can deadlock if run with the rest of the test suite
      # TEMPORARILY DISABLED BECAUSE THEY CAUSE ISSUES
      # - bash: |
      #     set -eux
      #     py.test $(pytest.base_args) \
      #       tests --rundiskfull --runslow -m diskfull -x \
      #       --junitxml=test-results-fulldisk.xml
      #   displayName: "Tests full disk"
      # TODO: run gui tests with xvfb
      # - bash: |
      #     set -eux
      #     py.test $(pytest.base_args) \
      #       tests -m gui --runmountpoint --runslow --rungui -x \
      #       --junitxml=test-results-gui.xml
      #   displayName: "Tests GUI"
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: test-results-*.xml
          testRunTitle: Linux
        condition: succeededOrFailed()


  - job: s1_macos_test
    displayName: MacOS tests
    dependsOn: s0_build_wheel
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    timeoutInMinutes: 60
    pool:
      vmImage: macOS-12
    variables:
      PGINSTALLATION: /usr/local/bin
    steps:
      - checkout: self
        submodules: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)
      - download: current
        artifact: wheel
      - bash: |
          set -eux
          python --version
          # pip 21.3 introduces in-tree-build by default
          python -m pip install 'pip>=21.3' --user --upgrade
          python -m pip --version
          brew install \
            desktop-file-utils  # Provides `update-desktop-database` used by `tests/scripts/run_testenv.sh`
          brew install --cask macfuse
        displayName: Bootstrap
      - bash: |
          set -eux
          # Remove the parsec folder from the source to force use of the wheel
          rm -rf parsec
          # Install the parsec wheel with all dependencies
          WHEEL=$(ls $(Pipeline.Workspace)/wheel/parsec_cloud-*.whl)
          # Install Parsec with restricted dependencies and also dev dependencies
          python -m pip install --requirement $(Pipeline.Workspace)/wheel/all-requirements.txt
          python -m pip install $WHEEL[core,backend] --no-deps
          # Check dependency compatibility
          python -m pip check parsec[core,backend]
        displayName: Install
      - bash: |
          set -eux
          # Don't use `-n auto` option given macOS on Azure is basically as stable
          # as an average irishman in a pub during St Patrick.
          # I though pytest-xdist might be the root cause of the random crash given
          # it doesn't guarantee tests to be run run on the main thread of
          # spawned processes (see: https://github.com/pytest-dev/pytest-xdist/issues/739)
          # However even with run_parallel.py (our own custom rewrite of xdist using
          # multiprocessing) we end up with random crashes...
          # Also, do not run slow and mountpoint tests as they are slow and unstable in the CI
          py.test $(pytest.base_args) tests --junitxml=test-results-memory.xml
        displayName: Tests memory
      # - bash: |
      #    set -eux
      #    py.test $(pytest.base_args) \
      #      tests -m gui --runmountpoint --runslow --rungui -x \
      #      --junitxml=test-results-gui.xml
      #  displayName: "Tests GUI"
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: test-results-*.xml
          testRunTitle: macOS
        condition: succeededOrFailed()


  - job: s1_windows_test
    displayName: Windows tests
    dependsOn: s0_build_wheel
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    timeoutInMinutes: 60
    pool:
      vmImage: windows-latest
    variables:
      PGINSTALLATION: C:\\Program Files\\PostgreSQL\\$(postgresql.version)\\bin
    steps:
      - checkout: self
        submodules: true
      - download: current
        artifact: wheel
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)
          architecture: x64
      - bash: |
          set -eux
          python.exe --version
          pip uninstall pipx -y  # dunno why this thing is here...
          # pip 21.3 introduces in-tree-build by default
          python -m pip install 'pip>=21.3' --user --upgrade
          python -m pip --version
          choco install -y --limit-output winfsp --version=$(winfsp.version)
          # Install winfsp-test and put it in PATH
          mkdir winfsp-test
          curl -L https://github.com/billziss-gh/winfsp/releases/download/v1.8/winfsp-tests-1.8.20304.zip -o winfsp-test/winfsp-tests.zip
          unzip winfsp-test/winfsp-tests.zip -d winfsp-test
          echo "##vso[task.prependpath]$(Build.SourcesDirectory)\\winfsp-test"
        displayName: Bootstrap
      - bash: |
          set -eux
          # Remove the parsec folder from the source to force use of the wheel
          rm -rf parsec
          # Install the parsec wheel with all dependencies
          WHEEL_DIRECTORY=`python -c 'print(r"$(Pipeline.Workspace)/wheel".replace("\\\\", "/"))'`
          WHEEL=$(ls $WHEEL_DIRECTORY/parsec_cloud-*.whl)
          # Install Parsec with restricted dependencies and also dev dependencies
          python -m pip install --requirement $WHEEL_DIRECTORY/all-requirements.txt
          python -m pip install $WHEEL[core,backend] --no-deps
          # Check dependency compatibility
          python -m pip check parsec[core,backend]
          # Check winfsp-tests availability
          python.exe -c "import winfspy.tests.winfsp_tests"
        displayName: Install
      - bash: |
          set -eux
          # Install pytest-repeat
          pip install pytest-repeat
          # Repeat flaky tests X times
          py.test tests --runmountpoint --runslow --rungui -m flaky --count $(debug.stress_flaky_tests) -v
        displayName: "Debug: stress flaky tests"
        condition: and(succeeded(), gt(variables['debug.stress_flaky_tests'], 0))
      - powershell: |
          Get-NetTCPConnection -State Listen -RemoteAddress "0.0.0.0"
          netsh interface ipv4 show excludedportrange protocol=tcp
        displayName: Show used/reserved TCP ports
      - bash: |
          set -eux
          py.test $(pytest.base_args) \
            tests -n auto --max-worker-restart=0 -x \
            --junitxml=test-results-fast.xml
        displayName: Tests fast
      - bash: |
          set -eux
          py.test $(pytest.base_args) \
            tests --runmountpoint --runslow -m mountpoint -x \
            --junitxml=test-results-mountpoint.xml
        displayName: Tests mountpoint
      - bash: |
          set -eux
          py.test $(pytest.base_args) \
            tests --runmountpoint --runslow --rungui -m gui -x \
            --junitxml=test-results-gui.xml
        displayName: Tests GUI
      - bash: |
          set -eux
          py.test $(pytest.base_args) \
            tests --runslow -m slow \
            -n auto --max-worker-restart=0 -x \
            --junitxml=test-results-slow.xml
        displayName: Tests slow
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: test-results-*.xml
          testRunTitle: Windows
        condition: succeededOrFailed()


  #################################################################################
  # Step 2: Release packages build
  - job: s2_linux_snap_build
    displayName: Linux snap build
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    timeoutInMinutes: 60
    dependsOn: s0_build_wheel
    pool:
      # 20.04 requested to build a core20 image with --destructive-mode
      vmImage: ubuntu-20.04
    steps:
      - checkout: self
        submodules: true
      - download: current
        artifact: wheel
      - bash: |
          set -eux
          sudo apt-get update
          sudo snap install snapcraft --classic
          snapcraft --version
        displayName: Bootstrap
      - bash: |
          set -eux
          cp -R $(Build.SourcesDirectory)/packaging/snap snapbuild
          cd snapbuild
          mkdir src
          WHEEL=$(ls $(Pipeline.Workspace)/wheel/parsec_cloud-*.whl)
          cp $WHEEL src/
          cp $(Pipeline.Workspace)/wheel/core-requirements.txt src/
          VERSION=$(cat $(Pipeline.Workspace)/wheel/version)
          sed -i "s/__PARSEC_VERSION__/$VERSION/" snap/snapcraft.yaml
          # Now build the snap !
          snapcraft --destructive-mode
          mkdir dist
          cp parsec*.snap dist
        displayName: Build snap
        workingDirectory: $(Agent.TempDirectory)
      - publish: $(Agent.TempDirectory)/snapbuild/dist
        artifact: linux_amd64_snap


  - job: s2_macos_app_build
    displayName: MacOS app build
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    timeoutInMinutes: 60
    dependsOn: s0_build_wheel
    pool:
      vmImage: macOS-12
    steps:
      - checkout: self
        submodules: true
      - download: current
        artifact: wheel
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version_for_macos_packaging)
      - bash: |
          set -eux
          brew install coreutils
        displayName: Setup
      - bash: |
          set -eux
          pushd packaging/macOS
          python freeze_program.py ../.. --wheel-it-dir $(Pipeline.Workspace)/wheel
          mkdir dist
          VERSION=$(cat $(Pipeline.Workspace)/wheel/version)
          pushd build/pyinstaller_dist/
          tar -jcf ../../dist/parsec-$VERSION-macos-amd64.tar.bz2 Parsec.app
        displayName: Build
      - publish: $(Build.SourcesDirectory)/packaging/macOS/dist
        artifact: macos_amd64_app


  - job: s2_windows_installer_content_build
    displayName: Windows installer content build
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    timeoutInMinutes: 60
    dependsOn: s0_build_wheel
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        "64bits":
          python.arch: x64
          vs.arch: amd64
        "32bits":
          python.arch: x86
          vs.arch: x86
    steps:
      - checkout: self
        submodules: true
      - download: current
        artifact: wheel
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)
          architecture: $(python.arch)
      - task: BatchScript@1
        inputs:
          filename: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
          arguments: $(vs.arch)
          modifyEnvironment: true
      - bash: |
          set -eux
          # pip 21.3 introduces in-tree-build by default
          python -m pip install 'pip>=21.3' --user --upgrade
          python -m pip --version
          # Path with backslash are a pain...
          SOURCES_DIRECTORY=`python -c 'print(r"$(Build.SourcesDirectory)".replace("\\\\", "/"))'`
          cp -R $SOURCES_DIRECTORY/packaging/windows/ winbuild
        displayName: Prepare build
        workingDirectory: $(Agent.TempDirectory)
      # Must use cmd.exe here instead of bash otherwise `C:\Program Files\Git\bin\link.exe`
      # takes priority over visual studio link.exe in PATH
      - script: |
          python freeze_program.py $(Build.SourcesDirectory) --wheel-it-dir $(Pipeline.Workspace)/wheel
        displayName: Freeze Parsec
        workingDirectory: $(Agent.TempDirectory)/winbuild
      - bash: |
          set -eux
          mkdir dist
          cp build/manifest.ini dist/
          cp build/install_files.nsh dist/
          cp build/uninstall_files.nsh dist/
          cp -R build/parsec-* dist/
          cp build/winfsp-* dist/
        displayName: Prepare artifact
        workingDirectory: $(Agent.TempDirectory)/winbuild
      # Cannot do the NSIS installer part in CI given it requires to sign `parsec.exe`
      - publish: $(Agent.TempDirectory)/winbuild/dist
        artifact: win_$(vs.arch)_installer_content


  #################################################################################
  # Step 3: Release packages tests


  - job: s3_linux_snap_test
    displayName: Never trust a snap
    dependsOn: s2_linux_snap_build
    timeoutInMinutes: 10
    pool:
      vmImage: ubuntu-latest
    steps:
      # Note there no point specifying Python version given snap doesn't take it into account
      - checkout: none
      - download: current
        artifact: linux_amd64_snap
      - bash: |
          set -eux
          sudo apt-get update
          # TODO: xvfb doesn't currently work
          # sudo apt-get install -y xvfb xorg
          sudo snap install --classic --dangerous $(Pipeline.Workspace)/linux_amd64_snap/parsec*.snap
          parsec.cli --version
          parsec.cli --help
          # Make sure snap contains core but not backend
          MODULES_NOT_AVAILABLE=$(parsec.cli --help | grep -i "not available")
          test "$(echo $MODULES_NOT_AVAILABLE | grep -i 'backend')"
          test -z "$(echo $MODULES_NOT_AVAILABLE | grep -i 'core')"
          xvfb-run parsec --diagnose
        displayName: Test Snap


  #################################################################################
  # Step 4: Release packages upload


  - job: s4_linux_snap_upload
    displayName: Upload snap
    dependsOn:
      - s0_build_wheel
      - s1_linux_test
      - s1_macos_test
      - s1_windows_test
      - s2_linux_snap_build
      - s2_macos_app_build
      - s2_windows_installer_content_build
      - s3_linux_snap_test
    condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    timeoutInMinutes: 10
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: none
      - download: current
        artifact: linux_amd64_snap
      - bash: |
          set -eux
          sudo apt-get update
          sudo snap install snapcraft --classic
          # Credentials contains `\n` which makes things tricky
          # tl;dr: figuring out the double quote around the env var cost me 2h...
          printf "$SNAPCRAFT_CREDENTIALS" | snapcraft login --with -
        displayName: Bootstrap
        env:
          SNAPCRAFT_CREDENTIALS: $(SNAPCRAFT_CREDENTIALS)
      - bash: |
          snapcraft upload --release=edge $(Pipeline.Workspace)/linux_amd64_snap/parsec*.snap
        displayName: Upload Snap


  - job: s4_wheel_pypi_upload
    displayName: Upload wheel on PyPI
    dependsOn:
      - s0_build_wheel
      - s1_linux_test
      - s1_macos_test
      - s1_windows_test
      - s2_linux_snap_build
      - s2_macos_app_build
      - s2_windows_installer_content_build
      - s3_linux_snap_test
    condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    timeoutInMinutes: 10
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: none
      - download: current
        artifact: wheel
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python.version)
      - bash: |
          set -eux
          sudo apt-get update
          pip install twine
        displayName: Bootstrap
      - bash: |
          set -eux
          echo "
          [pypi]
          username = __token__
          password = $PYPI_CREDENTIALS
          " > ~/.pypirc
          WHEEL=$(ls $(Pipeline.Workspace)/wheel/parsec_cloud-*.whl)
          twine upload $WHEEL
        env:
          PYPI_CREDENTIALS: $(PYPI_CREDENTIALS)
        displayName: Upload to PyPI
