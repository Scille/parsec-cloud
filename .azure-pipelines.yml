# See https://aka.ms/yaml for documentation

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

variables:
  python.version: '3.9'
  node.version: '16.x'
  # pyinstaller is picky on the version to use
  python.version_for_macos_packaging: '3.9'
  postgresql.version: '12'
  winfsp.version: '1.8.20304'
  pytest.base_args: |
    --log-level=DEBUG \
    --durations=10 -v \
  debug.stress_flaky_tests: 0  # Repeat all flaky tests X times
  rust.version: 1.60.0

jobs:


#################################################################################
# Step 0: Wheel build


- job: 's0_build_wheel'
  displayName: 'Build wheel'
  timeoutInMinutes: 10
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      sudo apt-get update
      python --version
      # pip 20.3 introduces the new dependency resolver
      pip install pip>=20.3 --user --upgrade
      pip install -r pre-requirements.txt
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      python -m build --wheel
    env:
      # oxidation extra_requirements referes to a local path which is forbidden by pypi
      IGNORE_OXIDATION: "true"
    displayName: 'Build Wheel'
  - publish: dist/
    artifact: wheel

#################################################################################
# Step 1: Tests


- job: 's1_qa'
  displayName: 'Q&A'
  timeoutInMinutes: 60
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - task: NodeTool@0
    inputs:
      versionSpec: '$(node.version)'
  - bash: |
      set -eux
      sudo apt-get update
      python --version
      pip --version
      node --version
      npm --version
      pip install pre-commit
      # Rust stuff (needed by pre-commit)
      curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain $(rust.version) -y
      rustup --version
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      rustup component add rustfmt clippy
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      # Commit signature is not mandatory for the repo (yet ?), however we
      # want to make sure the signed commits are actually valid.
      # Indeed, it seems the signature process breaks from time to time,
      # see for instance commit 1e1535b010050c025d85b685e96e08db5e9cd7bb
      # that is considered invalid, but has been generated 3mn after the valid
      # 2df2c661a4774097615b7f66078207b15a56316b on the same computer with
      # the same key...)
      python -c "
      from urllib.request import urlopen
      import json
      import re
      match = re.match(r'refs/pull/([0-9]+)/merge', '$(Build.SourceBranch)')
      if match:
        pr_id = match.group(1)
        r = urlopen(f'https://api.github.com/repos/Scille/parsec-cloud/pulls/{pr_id}/commits')
        bad_commits = [c['sha'] for c in json.load(r) if c['commit']['verification']['reason'] == 'invalid']
        if bad_commits:
          raise SystemExit(f'''Invalid signatures in commits: {', '.join(bad_commits)}''')
      "
    displayName: 'Commits signatures'
  - bash: |
      set -eux
      # PRs must contain a newsfragment that reference an opened issue
      python -c "
      from pathlib import Path
      from subprocess import run
      from urllib.request import urlopen, Request, HTTPError
      from concurrent.futures import ThreadPoolExecutor
      import json
      # If file never existed in master, consider as a new newsfragment
      # Cannot just git diff against master branch here given newsfragments
      # removed in master will be considered as new items in our branch
      # --exit-code makes the command exit with 0 if there are changes
      basecmd = 'git log origin/master --exit-code --'.split()
      def check_newsfragment(fragment):
          ret = run([*basecmd, fragment], capture_output=True)
          if ret.returncode == 0:
              print(f'Found new newsfragment {fragment.name}')
              id, *_ = fragment.name.split('.')
              req = Request(
                  method='GET',
                  url=f'https://api.github.com/repos/Scille/parsec-cloud/issues/{id}',
                  headers={'Accept': 'application/vnd.github.v3+json'},
              )
              try:
                  ret = urlopen(req)
              except HTTPError as exc:
                  raise SystemExit('New newsfragment ID doesn\'t correspond to an issue !')
              data = json.loads(ret.read())
              if 'pull_request' in data:
                  raise SystemExit('New newsfragement ID correspond to a pull request instead of an issue !')
              if data['state'] != 'open':
                  raise SystemExit('New newsfragement ID correspond to a closed issue')
              return True
          return False
      with ThreadPoolExecutor() as pool:
          ret = pool.map(check_newsfragment, Path('newsfragments').glob('*.rst'))
      if True not in ret:
          raise SystemExit('No new newsfragment found')
      "
    condition: |
      and(
        eq(variables['Build.Reason'], 'PullRequest'),
        not(startsWith(variables['System.PullRequest.SourceBranch'], 'dependabot')),
        not(startsWith(variables['System.PullRequest.SourceBranch'], 'yolo'))
      )
    displayName: 'Newsfragment'
#  - bash: |
#      git fetch --tags  # Needed by releaser.py to have a consistent `git describe`
#      python ./misc/releaser.py check --verbose
#    displayName: 'Version check'
  - bash: |
      set -eux
      # Patch .pre-commit-config.yaml to force mixed-line-ending checks to LF
      sed -i '/id: mixed-line-ending/a\      args:\n\        - "--fix=lf"' .pre-commit-config.yaml
      cat .pre-commit-config.yaml
      # Run all pre-commit hooks on all files
      pre-commit run --all-files --show-diff-on-failure
    displayName: 'Pre-commit hooks check'


#################################################################################


- job: 's1_oxidation'
  displayName: 'Rust Oxidation'
  timeoutInMinutes: 60
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      sudo apt-get update
      python --version
      # Rust stuff
      curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain $(rust.version) -y
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      # pip 20.3 introduces the new dependency resolver
      pip install pip>=20.3 --user --upgrade
      pip install -r pre-requirements.txt
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      cargo test --features mock-time
    workingDirectory: $(Build.SourcesDirectory)/oxidation
    displayName: 'Rust Tests'
  - bash: |
      set -eux
      pip install .[all,oxidation]
      # Remove the parsec folder from the source to force use of the wheel
      rm -rf parsec
    displayName: 'Install'
  - bash: |
      set -eux
      py.test $(pytest.base_args) tests -n auto --runrust
    displayName: 'Python Tests'


#################################################################################


- job: 's1_linux_test'
  displayName: 'Linux tests'
  dependsOn: s0_build_wheel
  timeoutInMinutes: 60
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    PGINSTALLATION: '/usr/lib/postgresql/$(postgresql.version)/bin'
  steps:
  - checkout: self
    submodules: true
  - download: current
    artifact: wheel
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      sudo apt-get update
      python --version
      # pip 20.3 introduces the new dependency resolver
      pip install pip>=20.3 --user --upgrade
      pip install -r pre-requirements.txt
      sudo apt-get install \
        postgresql-$(postgresql.version) \
        desktop-file-utils  # Provides `update-desktop-database` used by `tests/scripts/run_testenv.sh`
      psql --version
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      # Remove the parsec folder from the source to force use of the wheel
      rm -rf parsec
      # Install the parsec wheel with all dependencies
      WHEEL=$(ls $(Pipeline.Workspace)/wheel/parsec_cloud-*.whl)
      echo $WHEEL
      pip install $WHEEL[all]
      # Check dependency compatibility
      pip check parsec[all]
    displayName: 'Install'
  - bash: |
      set -eux
      py.test $(pytest.base_args) \
        tests --runmountpoint --runslow \
        -n auto --max-worker-restart=0 -x \
        --junitxml=test-results-memory.xml
    displayName: 'Tests memory'
  - bash: |
      set -eux
      # `test_cli.py` uses `--postgresql` option to test DB migration cli
      py.test $(pytest.base_args) \
        tests/backend tests/test_cli.py --postgresql --runslow \
        -n auto --max-worker-restart=0 -x \
        --junitxml=test-results-postgresql.xml
    displayName: 'Tests PostgreSQL'
  # The full disk test are run separately since they rely on running a sqlite3 database
  # on a fuse mountpoint which can deadlock if run with the rest of the test suite
  # TEMPORARILY DISABLED BECAUSE THEY CAUSE ISSUES
  # - bash: |
  #     set -eux
  #     py.test $(pytest.base_args) \
  #       tests --rundiskfull --runslow -m diskfull -x \
  #       --junitxml=test-results-fulldisk.xml
  #   displayName: 'Tests full disk'
  # TODO: run gui tests with xvfb
  # - bash: |
  #     set -eux
  #     py.test $(pytest.base_args) \
  #       tests -m gui --runmountpoint --runslow --rungui -x \
  #       --junitxml=test-results-gui.xml
  #   displayName: 'Tests GUI'
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'test-results-*.xml'
      testRunTitle: 'Linux'
    condition: succeededOrFailed()


#################################################################################


- job: 's1_macos_test'
  displayName: 'MacOS tests'
  dependsOn: s0_build_wheel
  timeoutInMinutes: 60
  pool:
    vmImage: 'macOS-10.15'
  variables:
    PGINSTALLATION: '/usr/local/bin'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - download: current
    artifact: wheel
  - bash: |
      set -eux
      python --version
      # pip 20.3 introduces the new dependency resolver
      pip install pip>=20.3 --user --upgrade
      pip install -r pre-requirements.txt
      brew install \
        desktop-file-utils  # Provides `update-desktop-database` used by `tests/scripts/run_testenv.sh`
      brew install --cask osxfuse
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      # Remove the parsec folder from the source to force use of the wheel
      rm -rf parsec
      # Install the parsec wheel with all dependencies
      WHEEL=$(ls $(Pipeline.Workspace)/wheel/parsec_cloud-*.whl)
      echo $WHEEL
      pip install $WHEEL[all]
      # Check dependency compatibility
      pip check parsec[all]
    displayName: 'Install'
  - bash: |
      set -eux
      py.test $(pytest.base_args) \
        tests --runmountpoint --runslow \
        -n auto --max-worker-restart=0 -x \
        --junitxml=test-results-memory.xml
    displayName: 'Tests memory'
  #- bash: |
  #    set -eux
  #    py.test $(pytest.base_args) \
  #      tests -m gui --runmountpoint --runslow --rungui -x \
  #      --junitxml=test-results-gui.xml
  #  displayName: 'Tests GUI'
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'test-results-*.xml'
      testRunTitle: 'macOS'
    condition: succeededOrFailed()


#################################################################################


- job: 's1_windows_test'
  displayName: 'Windows tests'
  dependsOn: s0_build_wheel
  timeoutInMinutes: 60
  pool:
    vmImage: 'windows-latest'
  variables:
    PGINSTALLATION: C:\\Program Files\\PostgreSQL\\$(postgresql.version)\\bin
  steps:
  - checkout: self
    submodules: true
  - download: current
    artifact: wheel
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - bash: |
      set -eux
      python.exe --version
      pip uninstall pipx -y  # dunno why this thing is here...
      # pip 20.3 introduces the new dependency resolver
      pip install pip>=20.3 --user --upgrade
      pip install -r pre-requirements.txt
      choco install -y --limit-output winfsp --version=$(winfsp.version)
      # Install winfsp-test and put it in PATH
      mkdir winfsp-test
      curl -L https://github.com/billziss-gh/winfsp/releases/download/v1.8/winfsp-tests-1.8.20304.zip -o winfsp-test/winfsp-tests.zip
      unzip winfsp-test/winfsp-tests.zip -d winfsp-test
      echo "##vso[task.prependpath]$(Build.SourcesDirectory)\\winfsp-test"
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      # Remove the parsec folder from the source to force use of the wheel
      rm -rf parsec
      # Install the parsec wheel with all dependencies
      WHEEL_DIRECTORY=`python -c 'print(r"$(Pipeline.Workspace)/wheel".replace("\\\\", "/"))'`
      WHEEL=$(ls $WHEEL_DIRECTORY/parsec_cloud-*.whl)
      echo $WHEEL
      pip install $WHEEL[all]
      # Check dependency compatibility
      pip check parsec[all]
      # Check winfsp-tests availability
      python.exe -c "import winfspy.tests.winfsp_tests"
    displayName: 'Install'
  - bash: |
      set -eux
      # Install pytest-repeat
      pip install pytest-repeat
      # Repeat flaky tests X times
      py.test tests --runmountpoint --runslow --rungui -m flaky --count $(debug.stress_flaky_tests) -v
    displayName: 'Debug: stress flaky tests'
    condition: and(succeeded(), gt(variables['debug.stress_flaky_tests'], 0))
  - bash: |
      set -eux
      py.test $(pytest.base_args) \
        tests -n auto --max-worker-restart=0 -x \
        --junitxml=test-results-fast.xml
    displayName: 'Tests fast'
  - bash: |
      set -eux
      py.test $(pytest.base_args) \
        tests --runmountpoint --runslow -m mountpoint -x \
        --junitxml=test-results-mountpoint.xml
    displayName: 'Tests mountpoint'
  - bash: |
      set -eux
      py.test $(pytest.base_args) \
        tests --runmountpoint --runslow --rungui -m gui -x \
        --junitxml=test-results-gui.xml
    displayName: 'Tests GUI'
  - bash: |
      set -eux
      py.test $(pytest.base_args) \
        tests --runslow -m slow \
        -n auto --max-worker-restart=0 -x \
        --junitxml=test-results-slow.xml
    displayName: 'Tests slow'
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'test-results-*.xml'
      testRunTitle: 'Windows'
    condition: succeededOrFailed()


#################################################################################
# Step 2: Release packages build


- job: 's2_linux_snap_build'
  displayName: 'Linux snap build'
  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
  timeoutInMinutes: 60
  pool:
    # 20.04 requested to build a core20 image with --destructive-mode
    vmImage: 'ubuntu-20.04'
  steps:
  - checkout: self
    submodules: true
  - bash: |
      set -eux
      sudo apt-get update
      sudo snap install snapcraft --classic
      snapcraft --version
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      cp -R $(Build.SourcesDirectory)/packaging/snap snapbuild
      cd snapbuild
      mkdir src
      cp -R $(Build.SourcesDirectory)/parsec src
      cp $(Build.SourcesDirectory)/pre-requirements.txt src
      cp -R $(Build.SourcesDirectory)/requirement src
      cp $(Build.SourcesDirectory)/setup.py src
      cp $(Build.SourcesDirectory)/README.rst src
      cp $(Build.SourcesDirectory)/HISTORY.rst src
      # Retrieve Parsec version and customize it if we are not building on a tag
      # See https://www.python.org/dev/peps/pep-0440/#local-version-identifiers
      if ([[ $(Build.SourceBranch) = "refs/tags/"* ]])
      then
        # Use tag name as version
        VERSION=`git -C $(Build.SourcesDirectory) describe --tag`
      else
        # Use `<tag_name>+dev<commit_hash>` as version
        VERSION=`sed -n 's/^__version__ = "\\(.*\\)"$/\\1/p' $(Build.SourcesDirectory)/parsec/_version.py`
        COMMIT=`git -C $(Build.SourcesDirectory) rev-parse --verify --short HEAD`
        VERSION="$VERSION.$COMMIT"
      fi
      echo "Version label: $VERSION"
      sed -i "s#^\\(__version__ = \\).*\$#\\1'$VERSION'#" src/parsec/_version.py
      sed -i "s/__PARSEC_VERSION__/$VERSION/" snap/snapcraft.yaml
      # Now build the snap !
      snapcraft --destructive-mode
      mkdir dist
      cp parsec*.snap dist
    displayName: 'Build snap'
    workingDirectory: $(Agent.TempDirectory)
  - publish: $(Agent.TempDirectory)/snapbuild/dist
    artifact: linux_amd64_snap


#################################################################################


- job: 's2_macos_app_build'
  displayName: 'MacOS app build'
  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
  timeoutInMinutes: 60
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version_for_macos_packaging)'
  - bash: |
      set -eux
      brew install coreutils
      sh macos_pyinstaller.sh
      tar -jcvf parsec-macos-amd64.tar.bz2 dist/Parsec.app
    displayName: 'Build'
    workingDirectory: $(Build.SourcesDirectory)/packaging/macOS
  - publish:  $(Build.SourcesDirectory)/packaging/macOS/parsec-macos-amd64.tar.bz2
    artifact: macos_amd64_app


#################################################################################


- job: 's2_windows_installer_build'
  displayName: 'Windows installer build'
  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
  timeoutInMinutes: 60
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      "64bits":
        python.arch: 'x64'
        vs.arch: 'amd64'
      "32bits":
        python.arch: 'x86'
        vs.arch: 'x86'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.arch)'
  - task: BatchScript@1
    inputs:
      filename: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"'
      arguments: $(vs.arch)
      modifyEnvironment: true
  - bash: |
      set -eux
      # pip 20.3 introduces the new dependency resolver
      pip install pip>=20.3 --user --upgrade
      # Path with backslash are a pain...
      SOURCES_DIRECTORY=`python -c 'print(r"$(Build.SourcesDirectory)".replace("\\\\", "/"))'`
      # Retrieve Parsec version and customize it if we are not building on a tag
      # See https://www.python.org/dev/peps/pep-0440/#local-version-identifiers
      if ([[ $(Build.SourceBranch) = "refs/tags/"* ]])
      then
        # Use tag name as version
        VERSION=`git -C $SOURCES_DIRECTORY describe --tag`
      else
        # Use `<tag_name>+dev<commit_hash>` as version
        VERSION=`sed -n 's/^__version__ = "\\(.*\\)"$/\\1/p' $SOURCES_DIRECTORY/parsec/_version.py`
        COMMIT=`git -C $SOURCES_DIRECTORY rev-parse --verify --short HEAD`
        VERSION="$VERSION.$COMMIT"
      fi
      echo "Version label: $VERSION"
      sed -i "s#^\\(__version__ = \\).*\$#\\1'$VERSION'#" $SOURCES_DIRECTORY/parsec/_version.py
      cp -R $SOURCES_DIRECTORY/packaging/win32/ winbuild
    displayName: 'Prepare build'
    workingDirectory: $(Agent.TempDirectory)
  # Must use cmd.exe here instead of bash otherwise `C:\Program Files\Git\bin\link.exe`
  # takes priority over visual studio link.exe in PATH
  - script: |
      python freeze_program.py $(Build.SourcesDirectory)
    displayName: 'Freeze Parsec'
    workingDirectory: $(Agent.TempDirectory)/winbuild
  - bash: |
      set -eux
      makensis.exe installer.nsi
      mkdir dist
      cp build/parsec*-setup.exe dist
    displayName: 'Build NSIS setup'
    workingDirectory: $(Agent.TempDirectory)/winbuild
  - publish: $(Agent.TempDirectory)/winbuild/dist
    artifact: win_$(vs.arch)_installer


#################################################################################
# Step 3: Release packages tests


- job: 's3_linux_snap_test'
  displayName: 'Never trust a snap'
  dependsOn: s2_linux_snap_build
  timeoutInMinutes: 10
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  # Note there no point specifying Python version given snap doesn't take it into account
  - checkout: none
  - download: current
    artifact: linux_amd64_snap
  - bash: |
      set -eux
      sudo apt-get update
      # TODO: xvfb doesn't currently work
      # sudo apt-get install -y xvfb xorg
      sudo snap install --classic --dangerous $(Pipeline.Workspace)/linux_amd64_snap/parsec*.snap
      parsec.cli --version
      # Make sure snap contains core but not backend
      NOT_AVAILABLES=$(parsec.cli --help | grep -i "not available")
      test "$(echo $NOT_AVAILABLES | grep -i 'backend')"
      test -z "$(echo $NOT_AVAILABLES | grep -i 'core')"
      xvfb-run parsec --diagnose
    displayName: 'Test Snap'


#################################################################################
# Step 4: Release packages upload


- job: 's4_linux_snap_upload'
  displayName: 'Upload snap'
  dependsOn: [s0_build_wheel, s1_qa, s1_linux_test, s1_macos_test, s1_windows_test, s2_linux_snap_build, s2_macos_app_build, s2_windows_installer_build, s3_linux_snap_test]
  condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
  timeoutInMinutes: 10
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: none
  - download: current
    artifact: linux_amd64_snap
  - bash: |
      sudo apt-get update
      sudo snap install snapcraft --classic
      # Credentials contains `\n` which makes things tricky
      # tl;dr: figuring out the double quote around the env var cost me 2h...
      printf "$SNAPCRAFT_CREDENTIALS" | snapcraft login --with -
    displayName: 'Bootstrap'
    env:
      SNAPCRAFT_CREDENTIALS: $(SNAPCRAFT_CREDENTIALS)
  - bash: |
      snapcraft upload --release=edge $(Pipeline.Workspace)/linux_amd64_snap/parsec*.snap
    displayName: 'Upload Snap'


#################################################################################


- job: 's4_wheel_pypi_upload'
  displayName: 'Upload wheel on PyPI'
  dependsOn: [s0_build_wheel, s1_qa, s1_linux_test, s1_macos_test, s1_windows_test, s2_linux_snap_build, s2_macos_app_build, s2_windows_installer_build, s3_linux_snap_test]
  condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
  timeoutInMinutes: 10
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: none
  - download: current
    artifact: wheel
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      sudo apt-get update
      pip install twine
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      echo "
      [pypi]
      username = __token__
      password = $PYPI_CREDENTIALS
      " > ~/.pypirc
      WHEEL=$(ls $(Pipeline.Workspace)/wheel/parsec_cloud-*.whl)
      echo $WHEEL
      twine upload $WHEEL
    env:
      PYPI_CREDENTIALS: $(PYPI_CREDENTIALS)
    displayName: 'Upload to PyPI'
