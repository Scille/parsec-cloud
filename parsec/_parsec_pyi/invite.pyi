# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS

from __future__ import annotations

from typing import List, Tuple

from parsec._parsec_pyi.backend_connection import AuthenticatedCmds, InvitedCmds
from parsec._parsec_pyi.crypto import PrivateKey, PublicKey, SecretKey, VerifyKey
from parsec._parsec_pyi.enumerate import UserProfile
from parsec._parsec_pyi.ids import (
    DeviceID,
    DeviceLabel,
    EntryID,
    HumanHandle,
    InvitationToken,
    UserID,
)
from parsec._parsec_pyi.local_device import LocalDevice

class SASCode:
    def __init__(self, code: str) -> None: ...
    def __str__(self) -> str: ...
    def __lt__(self, other: SASCode) -> bool: ...
    def __gt__(self, other: SASCode) -> bool: ...
    def __le__(self, other: SASCode) -> bool: ...
    def __ge__(self, other: SASCode) -> bool: ...
    def __hash__(self) -> int: ...
    @classmethod
    def from_int(cls, num: int) -> SASCode: ...
    @property
    def str(self) -> str: ...

def generate_sas_codes(
    claimer_nonce: bytes, greeter_nonce: bytes, shared_secret_key: SecretKey
) -> Tuple[SASCode, SASCode]: ...
def generate_sas_code_candidates(valid_sas: SASCode, size: int) -> List[SASCode]: ...

class InviteUserData:
    def __init__(
        self,
        requested_device_label: DeviceLabel | None,
        requested_human_handle: HumanHandle | None,
        public_key: PublicKey,
        verify_key: VerifyKey,
    ) -> None: ...
    @property
    def requested_human_handle(self) -> HumanHandle | None: ...
    @property
    def requested_device_label(self) -> DeviceLabel | None: ...
    @property
    def public_key(self) -> PublicKey: ...
    @property
    def verify_key(self) -> VerifyKey: ...
    @classmethod
    def dump_and_encrypt(cls, key: SecretKey) -> bytes: ...
    @classmethod
    def decrypt_and_load(cls, encrypted: bytes, key: SecretKey) -> InviteUserData: ...

class InviteUserConfirmation:
    def __init__(
        self,
        device_id: DeviceID,
        device_label: DeviceLabel | None,
        human_handle: HumanHandle | None,
        profile: UserProfile,
        root_verify_key: VerifyKey,
    ) -> None: ...
    @property
    def human_handle(self) -> HumanHandle | None: ...
    @property
    def device_label(self) -> DeviceLabel | None: ...
    @property
    def device_id(self) -> DeviceID: ...
    @property
    def profile(self) -> UserProfile: ...
    @property
    def root_verify_key(self) -> VerifyKey: ...
    def dump_and_encrypt(self, key: SecretKey) -> bytes: ...
    @classmethod
    def decrypt_and_load(cls, encrypted: bytes, key: SecretKey) -> InviteUserConfirmation: ...

class InviteDeviceData:
    def __init__(
        self, requested_device_label: DeviceLabel | None, verify_key: VerifyKey
    ) -> None: ...
    @property
    def requested_device_label(self) -> DeviceLabel | None: ...
    @property
    def verify_key(self) -> VerifyKey: ...
    def dump_and_encrypt(self, key: SecretKey) -> bytes: ...
    @classmethod
    def decrypt_and_load(cls, encrypted: bytes, key: SecretKey) -> InviteDeviceData: ...

class InviteDeviceConfirmation:
    def __init__(
        self,
        device_id: DeviceID,
        device_label: DeviceLabel | None,
        human_handle: HumanHandle | None,
        profile: UserProfile,
        private_key: PrivateKey,
        root_verify_key: VerifyKey,
        user_manifest_id: EntryID,
        user_manifest_key: SecretKey,
    ) -> None: ...
    @property
    def device_id(self) -> DeviceID: ...
    @property
    def device_label(self) -> DeviceLabel | None: ...
    @property
    def human_handle(self) -> HumanHandle | None: ...
    @property
    def profile(self) -> UserProfile: ...
    @property
    def private_key(self) -> PrivateKey: ...
    @property
    def root_verify_key(self) -> VerifyKey: ...
    @property
    def user_manifest_id(self) -> EntryID: ...
    @property
    def user_manifest_key(self) -> SecretKey: ...
    def dump_and_encrypt(self, key: SecretKey) -> bytes: ...
    @classmethod
    def decrypt_and_load(cls, encrypted: bytes, key: SecretKey) -> InviteDeviceConfirmation: ...

# Greeter

class UserGreetInitialCtx:
    def __init__(
        self,
        cmds: AuthenticatedCmds,
        token: InvitationToken,
    ) -> None: ...
    async def do_wait_peer(self) -> UserGreetInProgress1Ctx: ...

class DeviceGreetInitialCtx:
    def __init__(
        self,
        cmds: AuthenticatedCmds,
        token: InvitationToken,
    ) -> None: ...
    async def do_wait_peer(self) -> DeviceGreetInProgress1Ctx: ...

class UserGreetInProgress1Ctx:
    async def do_wait_peer_trust(self) -> UserGreetInProgress2Ctx: ...
    @property
    def greeter_sas(self) -> SASCode: ...

class DeviceGreetInProgress1Ctx:
    async def do_wait_peer_trust(self) -> DeviceGreetInProgress2Ctx: ...
    @property
    def greeter_sas(self) -> SASCode: ...

class UserGreetInProgress2Ctx:
    async def do_signify_trust(self) -> UserGreetInProgress3Ctx: ...
    def generate_claimer_sas_choices(self, size: int) -> list[SASCode]: ...
    @property
    def claimer_sas(self) -> SASCode: ...

class DeviceGreetInProgress2Ctx:
    async def do_signify_trust(self) -> DeviceGreetInProgress3Ctx: ...
    def generate_claimer_sas_choices(self, size: int) -> list[SASCode]: ...
    @property
    def claimer_sas(self) -> SASCode: ...

class UserGreetInProgress3Ctx:
    async def do_get_claim_requests(self) -> UserGreetInProgress4Ctx: ...

class DeviceGreetInProgress3Ctx:
    async def do_get_claim_requests(self) -> DeviceGreetInProgress4Ctx: ...

class UserGreetInProgress4Ctx:
    async def do_create_new_user(
        self,
        author: LocalDevice,
        human_handle: HumanHandle | None,
        device_label: DeviceLabel | None,
        profile: UserProfile,
    ) -> None: ...
    @property
    def requested_device_label(self) -> DeviceLabel: ...
    @property
    def requested_human_handle(self) -> HumanHandle: ...

class DeviceGreetInProgress4Ctx:
    async def do_create_new_device(
        self, author: LocalDevice, device_label: DeviceLabel | None
    ) -> None: ...
    @property
    def requested_device_label(self) -> DeviceLabel: ...

# Claimer

async def claimer_retrieve_info(
    cmds: InvitedCmds,
) -> UserClaimInitialCtx | DeviceClaimInitialCtx: ...

class UserClaimInitialCtx:
    def __init__(
        self,
        cmds: InvitedCmds,
        claimer_email: str,
        greeter_user_id: UserID,
        greeter_human_handle: HumanHandle | None,
    ) -> None: ...
    async def do_wait_peer(self) -> UserClaimInProgress1Ctx: ...
    @property
    def claimer_email(self) -> str: ...
    @property
    def greeter_user_id(self) -> UserID: ...
    @property
    def greeter_human_handle(self) -> HumanHandle | None: ...

class DeviceClaimInitialCtx:
    def __init__(
        self,
        cmds: InvitedCmds,
        greeter_user_id: UserID,
        greeter_human_handle: HumanHandle | None,
    ) -> None: ...
    async def do_wait_peer(self) -> DeviceClaimInProgress1Ctx: ...
    @property
    def greeter_user_id(self) -> UserID: ...
    @property
    def greeter_human_handle(self) -> HumanHandle | None: ...

class UserClaimInProgress1Ctx:
    async def do_signify_trust(self) -> UserClaimInProgress2Ctx: ...
    @property
    def greeter_sas(self) -> SASCode: ...
    def generate_greeter_sas_choices(self, size: int) -> list[SASCode]: ...

class DeviceClaimInProgress1Ctx:
    async def do_signify_trust(self) -> DeviceClaimInProgress2Ctx: ...
    @property
    def greeter_sas(self) -> SASCode: ...
    def generate_greeter_sas_choices(self, size: int) -> list[SASCode]: ...

class UserClaimInProgress2Ctx:
    async def do_wait_peer_trust(self) -> UserClaimInProgress3Ctx: ...
    @property
    def claimer_sas(self) -> SASCode: ...

class DeviceClaimInProgress2Ctx:
    async def do_wait_peer_trust(self) -> DeviceClaimInProgress3Ctx: ...
    @property
    def claimer_sas(self) -> SASCode: ...

class UserClaimInProgress3Ctx:
    async def do_claim_user(
        self,
        requested_device_label: DeviceLabel | None,
        requested_human_handle: HumanHandle | None,
    ) -> LocalDevice: ...

class DeviceClaimInProgress3Ctx:
    async def do_claim_device(
        self,
        requested_device_label: DeviceLabel | None,
    ) -> LocalDevice: ...
