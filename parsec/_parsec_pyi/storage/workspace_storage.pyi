# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS

from __future__ import annotations

from pathlib import Path

from parsec._parsec_pyi.ids import BlockID, ChunkID, EntryID
from parsec._parsec_pyi.local_device import LocalDevice
from parsec._parsec_pyi.local_manifest import (
    AnyLocalManifest,
    LocalFileManifest,
    LocalFolderManifest,
    LocalWorkspaceManifest,
)
from parsec._parsec_pyi.regex import Regex
from parsec._parsec_pyi.time import DateTime
from parsec.core.types import FileDescriptor

PseudoFileDescriptor = int | FileDescriptor

class WorkspaceStorage:
    @staticmethod
    async def new(
        data_base_dir: Path,
        device: LocalDevice,
        workspace_id: EntryID,
        prevent_sync_pattern: Regex,
        data_vacuum_threshold: int | None = ...,
        cache_size: int | None = ...,
    ) -> WorkspaceStorage: ...
    async def close_connections(self) -> None: ...
    async def set_prevent_sync_pattern(self, pattern: Regex) -> None: ...
    async def mark_prevent_sync_pattern_fully_applied(self, pattern: Regex) -> None: ...
    def get_prevent_sync_pattern(self) -> Regex: ...
    def get_prevent_sync_pattern_fully_applied(self) -> bool: ...
    async def set_workspace_manifest(self, manifest: LocalWorkspaceManifest) -> None: ...
    def get_workspace_manifest(self) -> LocalWorkspaceManifest: ...
    async def get_manifest(self, entry_id: EntryID) -> AnyLocalManifest: ...
    async def set_manifest(
        self,
        entry_id: EntryID,
        manifest: LocalFileManifest | LocalFolderManifest,
        cache_only: bool = False,
        removed_ids: set[ChunkID] | None = None,
    ) -> None: ...
    async def clear_manifest(self, entry_id: EntryID) -> None: ...
    def create_file_descriptor(self, manifest: LocalFileManifest) -> PseudoFileDescriptor: ...
    async def load_file_descriptor(self, fd: PseudoFileDescriptor) -> LocalFileManifest: ...
    def remove_file_descriptor(self, fd: PseudoFileDescriptor) -> None: ...
    async def set_clean_block(self, block_id: BlockID, block: bytes) -> set[BlockID]: ...
    async def clear_clean_block(self, block_id: BlockID) -> None: ...
    async def get_dirty_block(self, block_id: BlockID) -> bytes: ...
    async def get_chunk(self, chunk_id: ChunkID) -> bytes: ...
    async def set_chunk(self, chunk_id: ChunkID, block: bytes) -> None: ...
    async def clear_chunk(self, chunk_id: ChunkID, miss_ok: bool = False) -> None: ...
    async def get_realm_checkpoint(self) -> int: ...
    async def update_realm_checkpoint(
        self, new_checkpoint: int, changed_vlobs: dict[EntryID, int]
    ) -> None: ...
    async def get_need_sync_entries(self) -> tuple[set[EntryID], set[EntryID]]: ...
    async def ensure_manifest_persistent(self, entry_id: EntryID) -> None: ...
    async def clear_memory_cache(self, flush: bool = True) -> None: ...
    async def run_vacuum(self) -> None: ...
    async def get_local_block_ids(self, chunk_ids: list[ChunkID]) -> tuple[ChunkID, ...]: ...
    async def get_local_chunk_ids(self, chunk_ids: list[ChunkID]) -> tuple[ChunkID, ...]: ...
    def is_manifest_cache_ahead_of_persistance(self, entry_id: EntryID) -> bool: ...
    async def is_clean_block(self, block_id: BlockID) -> bool: ...
    def to_timestamp(self) -> WorkspaceStorageSnapshot: ...
    def is_block_remanent(self) -> bool: ...
    async def enable_block_remanence(self) -> bool: ...
    async def disable_block_remanence(self) -> set[BlockID] | None: ...
    async def clear_unreferenced_blocks(
        self, block_ids: list[BlockID], not_accessed_after: DateTime
    ) -> None: ...
    async def remove_clean_blocks(self, block_ids: list[BlockID]) -> None: ...
    @property
    def device(self) -> LocalDevice: ...
    @property
    def workspace_id(self) -> EntryID: ...

class WorkspaceStorageSnapshot:
    def create_file_descriptor(self, manifest: LocalFileManifest) -> int: ...
    async def load_file_descriptor(self, fd: int) -> LocalFileManifest: ...
    def remove_file_descriptor(self, fd: int) -> None: ...
    async def get_chunk(self, chunk_id: ChunkID) -> bytes: ...
    async def get_manifest(self, entry_id: EntryID) -> AnyLocalManifest: ...
    async def set_manifest(
        self, entry_id: EntryID, manifest: LocalFileManifest | LocalFolderManifest
    ) -> None: ...
    def get_prevent_sync_pattern(self) -> Regex: ...
    def get_prevent_sync_pattern_fully_applied(self) -> bool: ...
    async def set_clean_block(self, block_id: BlockID, block: bytes) -> set[BlockID]: ...
    async def clear_clean_block(self, block_id: BlockID) -> None: ...
    async def get_dirty_block(self, block_id: BlockID) -> bytes: ...
    async def clear_local_cache(self) -> None: ...
    def to_timestamp(self) -> WorkspaceStorageSnapshot: ...
    def is_block_remanent(self) -> bool: ...
    async def enable_block_remanence(self) -> bool: ...
    async def disable_block_remanence(self) -> set[BlockID] | None: ...
    async def clear_unreferenced_blocks(
        self, block_ids: list[BlockID], not_accessed_after: DateTime
    ) -> None: ...
    async def remove_clean_blocks(self, block_ids: list[BlockID]) -> None: ...
    async def is_clean_block(self, block_id: BlockID) -> bool: ...
    @property
    def device(self) -> LocalDevice: ...
    @property
    def workspace_id(self) -> EntryID: ...

async def workspace_storage_non_speculative_init(
    data_base_dir: Path,
    device: LocalDevice,
    workspace_id: EntryID,
) -> None: ...
