# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS

from __future__ import annotations

from typing import Iterable

from parsec._parsec import (
    DateTime,
    DeviceID,
    RealmArchivingConfiguration,
    RealmID,
    UsersPerProfileDetailItem,
    VerifyKey,
)

# Organization
class ActiveUsersLimit:
    NO_LIMIT: ActiveUsersLimit

    @classmethod
    def FromOptionalInt(cls, count: int | None) -> ActiveUsersLimit: ...
    @classmethod
    def LimitedTo(cls, user_count_limit: int) -> ActiveUsersLimit: ...
    def to_int(self) -> int | None: ...
    """
    Returns the user limit count as an integer or None if there's no limit specified
    """
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class OrganizationStatsReq:
    def dump(self) -> bytes: ...

class OrganizationStatsRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> OrganizationStatsRep: ...

class OrganizationStatsRepOk(OrganizationStatsRep):
    def __init__(
        self,
        data_size: int,
        metadata_size: int,
        realms: int,
        users: int,
        active_users: int,
        users_per_profile_detail: Iterable[UsersPerProfileDetailItem],
    ) -> None: ...
    @property
    def data_size(self) -> int: ...
    @property
    def metadata_size(self) -> int: ...
    @property
    def realms(self) -> int: ...
    @property
    def users(self) -> int: ...
    @property
    def active_users(self) -> int: ...
    @property
    def users_per_profile_detail(self) -> tuple[UsersPerProfileDetailItem, ...]: ...

class OrganizationStatsRepNotAllowed(OrganizationStatsRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class OrganizationStatsRepNotFound(OrganizationStatsRep): ...

class OrganizationStatsRepUnknownStatus(OrganizationStatsRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class OrganizationConfigReq:
    def dump(self) -> bytes: ...

class OrganizationConfigRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> OrganizationConfigRep: ...

class OrganizationConfigRepOk(OrganizationConfigRep):
    def __init__(
        self,
        user_profile_outsider_allowed: bool,
        active_users_limit: ActiveUsersLimit,
        sequester_authority_certificate: bytes | None,
        sequester_services_certificates: Iterable[bytes] | None,
        minimum_archiving_period: int,
    ) -> None: ...
    @property
    def user_profile_outsider_allowed(self) -> bool: ...
    @property
    def active_users_limit(self) -> ActiveUsersLimit: ...
    @property
    def sequester_authority_certificate(self) -> bytes | None: ...
    @property
    def sequester_services_certificates(self) -> tuple[bytes, ...] | None: ...
    @property
    def minimum_archiving_period(self) -> int | None: ...  # In seconds

class OrganizationConfigRepNotFound(OrganizationConfigRep): ...

class OrganizationConfigRepUnknownStatus(OrganizationConfigRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class RealmArchivingStatus:
    def __init__(
        self,
        realm_id: RealmID,
        configured_on: DateTime | None,
        configured_by: DeviceID | None,
        configuration: RealmArchivingConfiguration,
    ) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def configured_on(self) -> DateTime | None: ...
    @property
    def configured_by(self) -> DeviceID | None: ...
    @property
    def configuration(self) -> RealmArchivingConfiguration: ...

class ArchivingConfigReq:
    def dump(self) -> bytes: ...

class ArchivingConfigRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> ArchivingConfigRep: ...

class ArchivingConfigRepOk(ArchivingConfigRep):
    def __init__(self, archiving_config: list[RealmArchivingStatus]) -> None: ...
    @property
    def archiving_config(self) -> list[RealmArchivingStatus]: ...

class ArchivingConfigRepNotFound(ArchivingConfigRep): ...

class ArchivingConfigRepUnknownStatus(ArchivingConfigRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class OrganizationBootstrapReq:
    def __init__(
        self,
        bootstrap_token: str,
        root_verify_key: VerifyKey,
        user_certificate: bytes,
        device_certificate: bytes,
        redacted_user_certificate: bytes,
        redacted_device_certificate: bytes,
        sequester_authority_certificate: bytes | None,
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def bootstrap_token(self) -> str: ...
    @property
    def root_verify_key(self) -> VerifyKey: ...
    @property
    def user_certificate(self) -> bytes: ...
    @property
    def device_certificate(self) -> bytes: ...
    @property
    def redacted_user_certificate(self) -> bytes: ...
    @property
    def redacted_device_certificate(self) -> bytes: ...
    @property
    def sequester_authority_certificate(self) -> bytes | None: ...

class OrganizationBootstrapRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> OrganizationBootstrapRep: ...

class OrganizationBootstrapRepOk(OrganizationBootstrapRep): ...

class OrganizationBootstrapRepInvalidCertification(OrganizationBootstrapRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class OrganizationBootstrapRepInvalidData(OrganizationBootstrapRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class OrganizationBootstrapRepBadTimestamp(OrganizationBootstrapRep):
    def __init__(
        self,
        reason: str | None,
        ballpark_client_early_offset: float | None,
        ballpark_client_late_offset: float | None,
        backend_timestamp: DateTime | None,
        client_timestamp: DateTime | None,
    ) -> None: ...
    @property
    def reason(self) -> str | None: ...
    @property
    def ballpark_client_early_offset(self) -> float | None: ...
    @property
    def ballpark_client_late_offset(self) -> float | None: ...
    @property
    def backend_timestamp(self) -> DateTime | None: ...
    @property
    def client_timestamp(self) -> DateTime | None: ...

class OrganizationBootstrapRepAlreadyBootstrapped(OrganizationBootstrapRep): ...
class OrganizationBootstrapRepNotFound(OrganizationBootstrapRep): ...

class OrganizationBootstrapRepUnknownStatus(OrganizationBootstrapRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...
