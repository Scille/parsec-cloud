# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS

from __future__ import annotations

from typing import Iterable

from parsec._parsec import DateTime, DeviceID, RealmID, SequesterServiceID, VlobID

# Vlob
class VlobCreateReq:
    def __init__(
        self,
        realm_id: RealmID,
        encryption_revision: int,
        vlob_id: VlobID,
        timestamp: DateTime,
        blob: bytes,
        sequester_blob: dict[SequesterServiceID, bytes] | None,
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def sequester_blob(self) -> dict[SequesterServiceID, bytes] | None: ...

class VlobCreateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobCreateRep: ...

class VlobCreateRepOk(VlobCreateRep): ...

class VlobCreateRepAlreadyExists(VlobCreateRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobCreateRepNotAllowed(VlobCreateRep): ...
class VlobCreateRepBadEncryptionRevision(VlobCreateRep): ...
class VlobCreateRepInMaintenance(VlobCreateRep): ...

class VlobCreateRepRequireGreaterTimestamp(VlobCreateRep):
    def __init__(self, strictly_greater_than: DateTime) -> None: ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class VlobCreateRepBadTimestamp(VlobCreateRep):
    def __init__(
        self,
        reason: str | None,
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def reason(self) -> str | None: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class VlobCreateRepNotASequesteredOrganization(VlobCreateRep): ...

class VlobCreateRepSequesterInconsistency(VlobCreateRep):
    def __init__(
        self,
        sequester_authority_certificate: bytes,
        sequester_services_certificates: Iterable[bytes],
    ) -> None: ...
    @property
    def sequester_authority_certificate(self) -> bytes: ...
    @property
    def sequester_services_certificates(self) -> tuple[bytes, ...]: ...

class VlobCreateRepRejectedBySequesterService(VlobCreateRep):
    def __init__(self, service_id: SequesterServiceID, service_label: str, reason: str) -> None: ...
    @property
    def service_id(self) -> SequesterServiceID: ...
    @property
    def service_label(self) -> str: ...
    @property
    def reason(self) -> str: ...

class VlobCreateRepTimeout(VlobCreateRep): ...
class VlobCreateRepRealmArchived(VlobCreateRep): ...
class VlobCreateRepRealmDeleted(VlobCreateRep): ...

class VlobCreateRepUnknownStatus(VlobCreateRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class VlobReadReq:
    def __init__(
        self,
        encryption_revision: int,
        vlob_id: VlobID,
        version: int | None,
        timestamp: DateTime | None,
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def version(self) -> int | None: ...
    @property
    def timestamp(self) -> DateTime | None: ...

class VlobReadRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobReadRep: ...

class VlobReadRepOk(VlobReadRep):
    def __init__(
        self,
        version: int,
        blob: bytes,
        author: DeviceID,
        timestamp: DateTime,
        author_last_role_granted_on: DateTime | None,
    ) -> None: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def author(self) -> DeviceID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def author_last_role_granted_on(self) -> DateTime | None: ...

class VlobReadRepNotFound(VlobReadRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobReadRepNotAllowed(VlobReadRep): ...
class VlobReadRepBadVersion(VlobReadRep): ...
class VlobReadRepBadEncryptionRevision(VlobReadRep): ...
class VlobReadRepInMaintenance(VlobReadRep): ...
class VlobReadRepRealmDeleted(VlobReadRep): ...

class VlobReadRepUnknownStatus(VlobReadRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class VlobUpdateReq:
    def __init__(
        self,
        encryption_revision: int,
        vlob_id: VlobID,
        timestamp: DateTime,
        version: int,
        blob: bytes,
        sequester_blob: dict[SequesterServiceID, bytes] | None,
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def sequester_blob(self) -> dict[SequesterServiceID, bytes] | None: ...

class VlobUpdateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobUpdateRep: ...

class VlobUpdateRepOk(VlobUpdateRep): ...

class VlobUpdateRepNotFound(VlobUpdateRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobUpdateRepNotAllowed(VlobUpdateRep): ...
class VlobUpdateRepBadVersion(VlobUpdateRep): ...
class VlobUpdateRepBadEncryptionRevision(VlobUpdateRep): ...
class VlobUpdateRepInMaintenance(VlobUpdateRep): ...

class VlobUpdateRepRequireGreaterTimestamp(VlobUpdateRep):
    def __init__(self, strictly_greater_than: DateTime) -> None: ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class VlobUpdateRepBadTimestamp(VlobUpdateRep):
    def __init__(
        self,
        reason: str | None,
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def reason(self) -> str | None: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class VlobUpdateRepNotASequesteredOrganization(VlobUpdateRep): ...

class VlobUpdateRepSequesterInconsistency(VlobUpdateRep):
    def __init__(
        self,
        sequester_authority_certificate: bytes,
        sequester_services_certificates: Iterable[bytes],
    ) -> None: ...
    @property
    def sequester_authority_certificate(self) -> bytes: ...
    @property
    def sequester_services_certificates(self) -> tuple[bytes, ...]: ...

class VlobUpdateRepRejectedBySequesterService(VlobUpdateRep):
    def __init__(self, service_id: SequesterServiceID, service_label: str, reason: str) -> None: ...
    @property
    def service_id(self) -> SequesterServiceID: ...
    @property
    def service_label(self) -> str: ...
    @property
    def reason(self) -> str: ...

class VlobUpdateRepTimeout(VlobUpdateRep): ...
class VlobUpdateRepRealmArchived(VlobUpdateRep): ...
class VlobUpdateRepRealmDeleted(VlobUpdateRep): ...

class VlobUpdateRepUnknownStatus(VlobUpdateRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class VlobPollChangesReq:
    def __init__(self, realm_id: RealmID, last_checkpoint: int) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def last_checkpoint(self) -> int: ...

class VlobPollChangesRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobPollChangesRep: ...

class VlobPollChangesRepOk(VlobPollChangesRep):
    def __init__(self, changes: dict[VlobID, int], current_checkpoint: int) -> None: ...
    @property
    def changes(self) -> dict[VlobID, int]: ...
    @property
    def current_checkpoint(self) -> int: ...

class VlobPollChangesRepNotAllowed(VlobPollChangesRep): ...

class VlobPollChangesRepNotFound(VlobPollChangesRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobPollChangesRepInMaintenance(VlobPollChangesRep): ...
class VlobPollChangesRepRealmDeleted(VlobPollChangesRep): ...

class VlobPollChangesRepUnknownStatus(VlobPollChangesRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class VlobListVersionsReq:
    def __init__(self, vlob_id: VlobID) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def vlob_id(self) -> VlobID: ...

class VlobListVersionsRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobListVersionsRep: ...

class VlobListVersionsRepOk(VlobListVersionsRep):
    def __init__(self, versions: dict[int, tuple[DateTime, DeviceID]]) -> None: ...
    @property
    def versions(self) -> dict[int, tuple[DateTime, DeviceID]]: ...

class VlobListVersionsRepNotAllowed(VlobListVersionsRep): ...

class VlobListVersionsRepNotFound(VlobListVersionsRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobListVersionsRepInMaintenance(VlobListVersionsRep): ...
class VlobListVersionsRepRealmDeleted(VlobListVersionsRep): ...

class VlobListVersionsRepUnknownStatus(VlobListVersionsRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class VlobMaintenanceGetReencryptionBatchReq:
    def __init__(self, realm_id: RealmID, encryption_revision: int, size: int) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def size(self) -> int: ...

class VlobMaintenanceGetReencryptionBatchRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobMaintenanceGetReencryptionBatchRep: ...

class VlobMaintenanceGetReencryptionBatchRepOk(VlobMaintenanceGetReencryptionBatchRep):
    def __init__(self, batch: Iterable[ReencryptionBatchEntry]) -> None: ...
    @property
    def batch(self) -> tuple[ReencryptionBatchEntry, ...]: ...

class VlobMaintenanceGetReencryptionBatchRepNotAllowed(VlobMaintenanceGetReencryptionBatchRep): ...

class VlobMaintenanceGetReencryptionBatchRepNotFound(VlobMaintenanceGetReencryptionBatchRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobMaintenanceGetReencryptionBatchRepNotInMaintenance(
    VlobMaintenanceGetReencryptionBatchRep
):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobMaintenanceGetReencryptionBatchRepBadEncryptionRevision(
    VlobMaintenanceGetReencryptionBatchRep
): ...

class VlobMaintenanceGetReencryptionBatchRepMaintenanceError(
    VlobMaintenanceGetReencryptionBatchRep
):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobMaintenanceGetReencryptionBatchRepRealmDeleted(
    VlobMaintenanceGetReencryptionBatchRep
): ...

class VlobMaintenanceGetReencryptionBatchRepUnknownStatus(VlobMaintenanceGetReencryptionBatchRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class VlobMaintenanceSaveReencryptionBatchReq:
    def __init__(
        self, realm_id: RealmID, encryption_revision: int, batch: Iterable[ReencryptionBatchEntry]
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def batch(self) -> tuple[ReencryptionBatchEntry, ...]: ...

class VlobMaintenanceSaveReencryptionBatchRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobMaintenanceSaveReencryptionBatchRep: ...

class VlobMaintenanceSaveReencryptionBatchRepOk(VlobMaintenanceSaveReencryptionBatchRep):
    def __init__(self, total: int, done: int) -> None: ...
    @property
    def total(self) -> int: ...
    @property
    def done(self) -> int: ...

class VlobMaintenanceSaveReencryptionBatchRepNotAllowed(
    VlobMaintenanceSaveReencryptionBatchRep
): ...

class VlobMaintenanceSaveReencryptionBatchRepNotFound(VlobMaintenanceSaveReencryptionBatchRep):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobMaintenanceSaveReencryptionBatchRepNotInMaintenance(
    VlobMaintenanceSaveReencryptionBatchRep
):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobMaintenanceSaveReencryptionBatchRepBadEncryptionRevision(
    VlobMaintenanceSaveReencryptionBatchRep
): ...

class VlobMaintenanceSaveReencryptionBatchRepMaintenanceError(
    VlobMaintenanceSaveReencryptionBatchRep
):
    def __init__(self, reason: str | None) -> None: ...
    @property
    def reason(self) -> str | None: ...

class VlobMaintenanceSaveReencryptionBatchRepRealmDeleted(
    VlobMaintenanceSaveReencryptionBatchRep
): ...

class VlobMaintenanceSaveReencryptionBatchRepUnknownStatus(VlobMaintenanceSaveReencryptionBatchRep):
    def __init__(self, status: str, reason: str | None) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> str | None: ...

class ReencryptionBatchEntry:
    def __init__(self, vlob_id: VlobID, version: int, blob: bytes) -> None: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
