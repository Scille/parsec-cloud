# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS

from __future__ import annotations

from parsec._parsec_pyi.backend_connection import AuthenticatedCmds
from parsec._parsec_pyi.certif import DeviceCertificate, RevokedUserCertificate, UserCertificate
from parsec._parsec_pyi.crypto import VerifyKey
from parsec._parsec_pyi.ids import DeviceID, UserID
from parsec._parsec_pyi.time import TimeProvider

class RemoteDevicesManagerError(Exception): ...
class RemoteDevicesManagerBackendOfflineError(RemoteDevicesManagerError): ...
class RemoteDevicesManagerNotFoundError(RemoteDevicesManagerError): ...
class RemoteDevicesManagerUserNotFoundError(RemoteDevicesManagerNotFoundError): ...
class RemoteDevicesManagerDeviceNotFoundError(RemoteDevicesManagerNotFoundError): ...
class RemoteDevicesManagerInvalidTrustchainError(RemoteDevicesManagerError): ...

class RemoteDevicesManager:
    def __init__(
        self,
        backend_cmds: AuthenticatedCmds,
        root_verify_key: VerifyKey,
        time_provider: TimeProvider,
    ) -> None: ...
    @property
    def cache_validity(self) -> int: ...
    async def invalidate_user_cache(self, user_id: UserID) -> None: ...
    async def get_user(
        self, user_id: UserID, no_cache: bool = False
    ) -> tuple[UserCertificate, RevokedUserCertificate | None]: ...
    async def get_device(
        self, device_id: DeviceID, no_cache: bool = False
    ) -> DeviceCertificate: ...
    async def get_user_and_devices(
        self, user_id: UserID
    ) -> tuple[UserCertificate, RevokedUserCertificate | None, list[DeviceCertificate]]: ...
