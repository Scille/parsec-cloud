from pathlib import Path
from typing import Dict, List, Optional, Pattern, Set, Tuple, Union

from parsec._parsec_pyi.local_device import LocalDevice
from parsec._parsec_pyi.local_manifest import (
    AnyLocalManifest,
    LocalFileManifest,
    LocalWorkspaceManifest,
)
from parsec._parsec_pyi.ids import BlockID, ChunkID, EntryID
from parsec._parsec_pyi.time import DateTime
from parsec.core.types import FileDescriptor

PseudoFileDescriptor = Union[int, FileDescriptor]

class WorkspaceStorage:
    def __init__(
        self,
        data_base_dir: Path,
        device: LocalDevice,
        workspace_id: EntryID,
        cache_size: int,
        data_vacuum_threshold: Optional[int] = None,
    ) -> None: ...
    def set_prevent_sync_pattern(self, pattern: Pattern) -> None: ...
    def mark_prevent_sync_pattern_fully_applied(self, pattern: Pattern) -> None: ...
    def get_prevent_sync_pattern(self) -> Pattern: ...
    def get_prevent_sync_pattern_fully_applied(self) -> bool: ...
    def get_workspace_manifest(self) -> LocalWorkspaceManifest: ...
    def get_manifest(self, entry_id: EntryID) -> AnyLocalManifest: ...
    def set_manifest(
        self,
        entry_id: EntryID,
        manifest: AnyLocalManifest,
        cache_only: bool = False,
        removed_ids: Optional[Set[ChunkID]] = None,
    ) -> None: ...
    def clear_manifest(self, entry_id: EntryID) -> None: ...
    def create_file_descriptor(self, manifest: LocalFileManifest) -> PseudoFileDescriptor: ...
    def load_file_descriptor(self, fd: PseudoFileDescriptor) -> LocalFileManifest: ...
    def remove_file_descriptor(self, fd: PseudoFileDescriptor) -> None: ...
    def set_clean_block(self, block_id: BlockID, block: bytes) -> None: ...
    def clear_clean_block(self, block_id: BlockID) -> None: ...
    def get_dirty_block(self, block_id: BlockID) -> bytes: ...
    def get_chunk(self, chunk_id: ChunkID) -> bytes: ...
    def set_chunk(self, chunk_id: ChunkID, block: bytes) -> None: ...
    def clear_chunk(self, chunk_id: ChunkID, miss_ok: bool = False) -> None: ...
    def get_realm_checkpoint(self) -> int: ...
    def update_realm_checkpoint(
        self, new_checkpoint: int, changed_vlobs: Dict[EntryID, int]
    ) -> None: ...
    def get_need_sync_entries(self) -> Tuple[Set[EntryID], Set[EntryID]]: ...
    def ensure_manifest_persistent(self, entry_id: EntryID) -> None: ...
    def clear_memory_cache(self, flush: bool = True) -> None: ...
    def run_vacuum(self) -> None: ...
    def get_local_block_ids(self, chunk_ids: List[ChunkID]) -> Tuple[ChunkID, ...]: ...
    def get_local_chunk_ids(self, chunk_ids: List[ChunkID]) -> Tuple[ChunkID, ...]: ...
    @property
    def device(self) -> LocalDevice: ...
    @property
    def workspace_id(self) -> EntryID: ...

def workspace_storage_non_speculative_init(
    data_base_dir: Path,
    device: LocalDevice,
    workspace_id: EntryID,
    timestamp: Optional[DateTime] = ...,
) -> None: ...
