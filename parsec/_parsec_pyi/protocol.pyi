from __future__ import annotations
from typing import Any, Iterable, List, Optional, Tuple, Literal

from parsec._parsec_pyi.ids import (
    BlockID,
    RealmID,
    SequesterServiceID,
    UserID,
    VlobID,
    DeviceID,
    UserID,
    HumanHandle,
)
from parsec._parsec_pyi.certif import RealmRole
from parsec._parsec import PublicKey, InvitationToken
from parsec._parsec_pyi.crypto import HashDigest
from parsec._parsec_pyi.invite import InvitationToken
from parsec._parsec_pyi.time import DateTime
from parsec.api.protocol.types import UserProfile

class AuthenticatedAnyCmdReq:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Any: ...

class InvitedAnyCmdReq:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Any: ...

# Invite

class InvitationType:
    DEVICE: InvitationType
    USER: InvitationType
    @classmethod
    def values(cls) -> List[InvitationType]: ...
    @classmethod
    def from_str(cls, value: str) -> InvitationType: ...
    @property
    def str(self) -> str: ...

class Invite1GreeterWaitPeerReq:
    def __init__(self, token: InvitationToken, greeter_public_key: PublicKey) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def greeter_public_key(self) -> PublicKey: ...

class Invite1GreeterWaitPeerRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite1GreeterWaitPeerRep: ...

class Invite1GreeterWaitPeerRepOk(Invite1GreeterWaitPeerRep):
    def __init__(self, claimer_public_key: PublicKey) -> None: ...
    @property
    def claimer_public_key(self) -> PublicKey: ...

class Invite1GreeterWaitPeerRepNotFound(Invite1GreeterWaitPeerRep): ...
class Invite1GreeterWaitPeerRepAlreadyDeleted(Invite1GreeterWaitPeerRep): ...
class Invite1GreeterWaitPeerRepInvalidState(Invite1GreeterWaitPeerRep): ...

class Invite1GreeterWaitPeerRepUnknownStatus(Invite1GreeterWaitPeerRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite2aGreeterGetHashedNonceReq:
    def __init__(self, token: InvitationToken) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...

class Invite2aGreeterGetHashedNonceRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite2aGreeterGetHashedNonceRep: ...

class Invite2aGreeterGetHashedNonceRepOk(Invite2aGreeterGetHashedNonceRep):
    def __init__(self, claimer_hashed_nonce: HashDigest) -> None: ...
    @property
    def claimer_hashed_nonce(self) -> HashDigest: ...

class Invite2aGreeterGetHashedNonceRepNotFound(Invite2aGreeterGetHashedNonceRep): ...
class Invite2aGreeterGetHashedNonceRepAlreadyDeleted(Invite2aGreeterGetHashedNonceRep): ...
class Invite2aGreeterGetHashedNonceRepInvalidState(Invite2aGreeterGetHashedNonceRep): ...

class Invite2aGreeterGetHashedNonceRepUnknownStatus(Invite2aGreeterGetHashedNonceRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite2bGreeterSendNonceReq:
    def __init__(self, token: InvitationToken, greeter_nonce: bytes) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def greeter_nonce(self) -> bytes: ...

class Invite2bGreeterSendNonceRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite2bGreeterSendNonceRep: ...

class Invite2bGreeterSendNonceRepOk(Invite2bGreeterSendNonceRep):
    def __init__(self, claimer_nonce: bytes) -> None: ...
    @property
    def claimer_nonce(self) -> bytes: ...

class Invite2bGreeterSendNonceRepNotFound(Invite2bGreeterSendNonceRep): ...
class Invite2bGreeterSendNonceRepAlreadyDeleted(Invite2bGreeterSendNonceRep): ...
class Invite2bGreeterSendNonceRepInvalidState(Invite2bGreeterSendNonceRep): ...

class Invite2bGreeterSendNonceRepUnknownStatus(Invite2bGreeterSendNonceRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite3aGreeterWaitPeerTrustReq:
    def __init__(self, token: InvitationToken) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...

class Invite3aGreeterWaitPeerTrustRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite3aGreeterWaitPeerTrustRep: ...

class Invite3aGreeterWaitPeerTrustRepOk(Invite3aGreeterWaitPeerTrustRep): ...
class Invite3aGreeterWaitPeerTrustRepNotFound(Invite3aGreeterWaitPeerTrustRep): ...
class Invite3aGreeterWaitPeerTrustRepAlreadyDeleted(Invite3aGreeterWaitPeerTrustRep): ...
class Invite3aGreeterWaitPeerTrustRepInvalidState(Invite3aGreeterWaitPeerTrustRep): ...

class Invite3aGreeterWaitPeerTrustRepUnknownStatus(Invite3aGreeterWaitPeerTrustRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite3bGreeterSignifyTrustReq:
    def __init__(self, token: InvitationToken) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...

class Invite3bGreeterSignifyTrustRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite3bGreeterSignifyTrustRep: ...

class Invite3bGreeterSignifyTrustRepOk(Invite3bGreeterSignifyTrustRep): ...
class Invite3bGreeterSignifyTrustRepNotFound(Invite3bGreeterSignifyTrustRep): ...
class Invite3bGreeterSignifyTrustRepAlreadyDeleted(Invite3bGreeterSignifyTrustRep): ...
class Invite3bGreeterSignifyTrustRepInvalidState(Invite3bGreeterSignifyTrustRep): ...

class Invite3bGreeterSignifyTrustRepUnknownStatus(Invite3bGreeterSignifyTrustRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite4GreeterCommunicateReq:
    def __init__(self, token: InvitationToken, payload: bytes) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def payload(self) -> bytes: ...

class Invite4GreeterCommunicateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite4GreeterCommunicateRep: ...

class Invite4GreeterCommunicateRepOk(Invite4GreeterCommunicateRep):
    def __init__(self, payload: bytes) -> None: ...
    @property
    def payload(self) -> bytes: ...

class Invite4GreeterCommunicateRepNotFound(Invite4GreeterCommunicateRep): ...
class Invite4GreeterCommunicateRepAlreadyDeleted(Invite4GreeterCommunicateRep): ...
class Invite4GreeterCommunicateRepInvalidState(Invite4GreeterCommunicateRep): ...

class Invite4GreeterCommunicateRepUnknownStatus(Invite4GreeterCommunicateRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class InvitationDeletedReason:
    @classmethod
    def FINISHED(cls) -> InvitationDeletedReason: ...
    @classmethod
    def CANCELLED(cls) -> InvitationDeletedReason: ...
    @classmethod
    def ROTTEN(cls) -> InvitationDeletedReason: ...
    @property
    def value(self) -> str: ...

class InviteDeleteReq:
    def __init__(self, token: InvitationToken, reason: InvitationDeletedReason) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def reason(self) -> InvitationDeletedReason: ...

class InviteDeleteRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> InviteDeleteRep: ...

class InviteDeleteRepOk(InviteDeleteRep): ...
class InviteDeleteRepNotFound(InviteDeleteRep): ...
class InviteDeleteRepAlreadyDeleted(InviteDeleteRep): ...

class InviteDeleteRepUnknownStatus(InviteDeleteRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class InviteListReq:
    def dump(self) -> bytes: ...

class InviteListRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> InviteListRep: ...

class InviteListRepUnknownStatus(InviteListRep):
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class InvitationStatus:
    IDLE: InvitationStatus
    READY: InvitationStatus
    DELETED: InvitationStatus
    @classmethod
    def values(cls) -> List[InvitationStatus]: ...
    @classmethod
    def from_str(cls, value: str) -> InvitationStatus: ...
    @property
    def str(self) -> str: ...

class InviteListItem:
    @classmethod
    def User(
        cls,
        token: InvitationToken,
        created_on: DateTime,
        claimer_email: str,
        status: InvitationStatus,
    ) -> InviteListItem: ...
    @classmethod
    def Device(
        cls, token: InvitationToken, created_on: DateTime, status: Any
    ) -> InviteListItem: ...
    @property
    def type(self) -> InvitationType: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def created_on(self) -> DateTime: ...
    @property
    def status(self) -> InvitationStatus: ...
    @property
    def claimer_email(self) -> str: ...

class InviteListRepOk(InviteListRep):
    def __init__(self, invitations: List[InviteListItem]) -> None: ...
    @property
    def invitations(self) -> List[InviteListItem]: ...

class InviteNewReq:
    def __init__(
        self, type: InvitationType, claimer_email: Optional[str], send_email: bool
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def type(self) -> InvitationType: ...
    @property
    def claimer_email(self) -> str: ...
    @property
    def send_email(self) -> bool: ...

class InviteNewRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> InviteNewRep: ...

class InvitationEmailSentStatus:
    SUCCESS: InvitationEmailSentStatus
    NOT_AVAILABLE: InvitationEmailSentStatus
    BAD_RECIPIENT: InvitationEmailSentStatus

    @classmethod
    def from_str(cls, value: str) -> InvitationEmailSentStatus: ...

class InviteNewRepOk(InviteNewRep):
    def __init__(
        self, token: InvitationToken, email_sent: Optional[InvitationEmailSentStatus]
    ) -> None: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def email_sent(self) -> InvitationEmailSentStatus: ...

class InviteNewRepNotAllowed(InviteNewRep): ...
class InviteNewRepAlreadyMember(InviteNewRep): ...
class InviteNewRepNotAvailable(InviteNewRep): ...

class InviteNewRepUnknownStatus(InviteNewRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite1ClaimerWaitPeerReq:
    def __init__(self, claimer_public_key: PublicKey) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def claimer_public_key(self) -> PublicKey: ...

class Invite1ClaimerWaitPeerRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite1ClaimerWaitPeerRep: ...

class Invite1ClaimerWaitPeerRepOk(Invite1ClaimerWaitPeerRep):
    def __init__(self, greeter_public_key: PublicKey) -> None: ...
    @property
    def greeter_public_key(self) -> PublicKey: ...

class Invite1ClaimerWaitPeerRepNotFound(Invite1ClaimerWaitPeerRep): ...
class Invite1ClaimerWaitPeerRepInvalidState(Invite1ClaimerWaitPeerRep): ...

class Invite1ClaimerWaitPeerRepUnknownStatus(Invite1ClaimerWaitPeerRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite2aClaimerSendHashedNonceReq:
    def __init__(self, claimer_hashed_nonce: HashDigest) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def claimer_hashed_nonce(self) -> HashDigest: ...

class Invite2aClaimerSendHashedNonceRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite2aClaimerSendHashedNonceRep: ...

class Invite2aClaimerSendHashedNonceRepOk(Invite2aClaimerSendHashedNonceRep):
    def __init__(self, greeter_nonce: bytes) -> None: ...
    @property
    def greeter_nonce(self) -> bytes: ...

class Invite2aClaimerSendHashedNonceRepNotFound(Invite2aClaimerSendHashedNonceRep): ...
class Invite2aClaimerSendHashedNonceRepAlreadyDeleted(Invite2aClaimerSendHashedNonceRep): ...
class Invite2aClaimerSendHashedNonceRepInvalidState(Invite2aClaimerSendHashedNonceRep): ...

class Invite2aClaimerSendHashedNonceRepUnknownStatus(Invite2aClaimerSendHashedNonceRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite2bClaimerSendNonceReq:
    def __init__(self, claimer_nonce: bytes) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def claimer_nonce(self) -> bytes: ...

class Invite2bClaimerSendNonceRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite2bClaimerSendNonceRep: ...

class Invite2bClaimerSendNonceRepOk(Invite2bClaimerSendNonceRep): ...
class Invite2bClaimerSendNonceRepNotFound(Invite2bClaimerSendNonceRep): ...
class Invite2bClaimerSendNonceRepInvalidState(Invite2bClaimerSendNonceRep): ...

class Invite2bClaimerSendNonceRepUnknownStatus(Invite2bClaimerSendNonceRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite3aClaimerSignifyTrustReq:
    def dump(self) -> bytes: ...

class Invite3aClaimerSignifyTrustRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite3aClaimerSignifyTrustRep: ...

class Invite3aClaimerSignifyTrustRepOk(Invite3aClaimerSignifyTrustRep): ...
class Invite3aClaimerSignifyTrustRepNotFound(Invite3aClaimerSignifyTrustRep): ...
class Invite3aClaimerSignifyTrustRepInvalidState(Invite3aClaimerSignifyTrustRep): ...

class Invite3aClaimerSignifyTrustRepUnknownStatus(Invite3aClaimerSignifyTrustRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite3bClaimerWaitPeerTrustReq:
    def dump(self) -> bytes: ...

class Invite3bClaimerWaitPeerTrustRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite3bClaimerWaitPeerTrustRep: ...

class Invite3bClaimerWaitPeerTrustRepOk(Invite3bClaimerWaitPeerTrustRep): ...
class Invite3bClaimerWaitPeerTrustRepNotFound(Invite3bClaimerWaitPeerTrustRep): ...
class Invite3bClaimerWaitPeerTrustRepInvalidState(Invite3bClaimerWaitPeerTrustRep): ...

class Invite3bClaimerWaitPeerTrustRepUnknownStatus(Invite3bClaimerWaitPeerTrustRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Invite4ClaimerCommunicateReq:
    def __init__(self, payload: bytes) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def payload(self) -> bytes: ...

class Invite4ClaimerCommunicateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> Invite4ClaimerCommunicateRep: ...

class Invite4ClaimerCommunicateRepOk(Invite4ClaimerCommunicateRep):
    def __init__(self, payload: bytes) -> None: ...
    @property
    def payload(self) -> bytes: ...

class Invite4ClaimerCommunicateRepNotFound(Invite4ClaimerCommunicateRep): ...
class Invite4ClaimerCommunicateRepInvalidState(Invite4ClaimerCommunicateRep): ...

class Invite4ClaimerCommunicateRepUnknownStatus(Invite4ClaimerCommunicateRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class InviteInfoReq:
    def dump(self) -> bytes: ...

class InviteInfoRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> InviteInfoRep: ...

class InviteInfoRepOk(InviteInfoRep):
    def __init__(
        self,
        type: InvitationType,
        claimer_email: Optional[str],
        greeter_user_id: UserID,
        greeter_human_handle: Optional[HumanHandle],
    ) -> None: ...
    @property
    def type(self) -> InvitationType: ...
    @property
    def claimer_email(self) -> str: ...
    @property
    def greeter_user_id(self) -> UserID: ...
    @property
    def greeter_human_handle(self) -> Optional[HumanHandle]: ...

class InviteInfoRepUnknownStatus(InviteInfoRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

# Block

class BlockCreateReq:
    def __init__(self, block_id: BlockID, realm_id: RealmID, block: bytes) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def block_id(self) -> BlockID: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def block(self) -> bytes: ...

class BlockCreateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> BlockCreateRep: ...

class BlockCreateRepOk(BlockCreateRep): ...
class BlockCreateRepAlreadyExists(BlockCreateRep): ...
class BlockCreateRepNotFound(BlockCreateRep): ...
class BlockCreateRepTimeout(BlockCreateRep): ...
class BlockCreateRepNotAllowed(BlockCreateRep): ...
class BlockCreateRepInMaintenance(BlockCreateRep): ...

class BlockCreateRepUnknownStatus(BlockCreateRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class BlockReadReq:
    def __init__(self, block_id: BlockID) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def block_id(self) -> BlockID: ...

class BlockReadRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> BlockReadRep: ...

class BlockReadRepOk(BlockReadRep):
    def __init__(self, block: bytes) -> None: ...
    @property
    def block(self) -> bytes: ...

class BlockReadRepNotFound(BlockReadRep): ...
class BlockReadRepTimeout(BlockReadRep): ...
class BlockReadRepNotAllowed(BlockReadRep): ...
class BlockReadRepInMaintenance(BlockReadRep): ...

class BlockReadRepUnknownStatus(BlockReadRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

# Events

class EventsListenReq:
    def __init__(self, wait: bool) -> None: ...
    @property
    def wait(self) -> bool: ...

class EventsListenRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> EventsListenRep: ...

class EventsListenRepOk(EventsListenRep): ...

class EventsListenRepOkPinged(EventsListenRep):
    def __init__(self, ping: str) -> None: ...
    @property
    def ping(self) -> str: ...

class EventsListenRepOkMessageReceived(EventsListenRep):
    def __init__(self, index: int) -> None: ...
    @property
    def index(self) -> int: ...

class EventsListenRepOkInviteStatusChanged(EventsListenRep):
    def __init__(self, token: InvitationToken, invitation_status: InvitationStatus) -> None: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def invitation_status(self) -> InvitationStatus: ...

class EventsListenRepOkRealmMaintenanceFinished(EventsListenRep):
    def __init__(self, realm_id: RealmID, encryption_revision: int) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...

class EventsListenRepOkRealmMaintenanceStarted(EventsListenRep):
    def __init__(self, realm_id: RealmID, encryption_revision: int) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...

class EventsListenRepOkRealmVlobsUpdated(EventsListenRep):
    def __init__(
        self, realm_id: RealmID, checkpoint: int, src_id: VlobID, src_version: int
    ) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def checkpoint(self) -> int: ...
    @property
    def src_id(self) -> VlobID: ...
    @property
    def src_version(self) -> int: ...

class EventsListenRepOkRealmRolesUpdated(EventsListenRep):
    def __init__(self, real_id: RealmID, role: RealmRole) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def role(self) -> RealmRole: ...

class EventsListenRepCancelled(EventsListenRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class EventsListenRepOkPkiEnrollmentUpdated(EventsListenRep): ...
class EventsListenRepNoEvents(EventsListenRep): ...

class EventsListenRepUnknownStatus(EventsListenRep):
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class EventsSubscribeReq: ...

class EventsSubscribeRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> EventsSubscribeRep: ...

class EventsSubscribeRepOk(EventsSubscribeRep): ...

class EventsSubscribeRepUnknownStatus(EventsSubscribeRep):
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

# Message

class MessageGetReq:
    def __init__(self, offset: int) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def offset(self) -> int: ...

class MessageGetRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> MessageGetRep: ...

class MessageGetRepOk(MessageGetRep):
    def __init__(self, messages: Iterable[Message]) -> None: ...
    @property
    def messages(self) -> Tuple[Message]: ...

class MessageGetRepUnknownStatus(MessageGetRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Message:
    def __init__(self, count: int, sender: DeviceID, timestamp: DateTime, body: bytes) -> None: ...
    @property
    def count(self) -> int: ...
    @property
    def sender(self) -> DeviceID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def body(self) -> bytes: ...

# Organization

class OrganizationStatsReq:
    def dump(self) -> bytes: ...

class OrganizationStatsRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> OrganizationStatsRep: ...

class OrganizationStatsRepOk(OrganizationStatsRep):
    def __init__(
        self,
        data_size: int,
        metadata_size: int,
        realms: int,
        users: int,
        active_users: int,
        users_per_profile_detail: Iterable[UsersPerProfileDetailItem],
    ) -> None: ...
    @property
    def data_size(self) -> int: ...
    @property
    def metadata_size(self) -> int: ...
    @property
    def realms(self) -> int: ...
    @property
    def users(self) -> int: ...
    @property
    def active_users(self) -> int: ...
    @property
    def users_per_profile_detail(self) -> Tuple[UsersPerProfileDetailItem]: ...

class OrganizationStatsRepNotAllowed(OrganizationStatsRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class OrganizationStatsRepNotFound(OrganizationStatsRep): ...

class OrganizationStatsRepUnknownStatus(OrganizationStatsRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class OrganizationConfigReq:
    def dump(self) -> bytes: ...

class OrganizationConfigRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> OrganizationConfigRep: ...

class OrganizationConfigRepOk(OrganizationConfigRep):
    def __init__(
        self,
        user_profile_outsider_allowed: bool,
        active_users_limit: Optional[int],
        sequester_authority_certificate: Optional[bytes],
        sequester_services_certificates: Optional[Iterable[bytes]],
    ) -> None: ...
    @property
    def user_profile_outsider_allowed(self) -> bool: ...
    @property
    def active_users_limit(self) -> Optional[int]: ...
    @property
    def sequester_authority_certificate(self) -> Optional[bytes]: ...
    @property
    def sequester_services_certificates(self) -> Optional[Tuple[bytes]]: ...

class OrganizationConfigRepNotFound(OrganizationConfigRep): ...

class OrganizationConfigRepUnknownStatus(OrganizationConfigRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class UsersPerProfileDetailItem:
    def __init__(self, profile: UserProfile, active: int, revoked: int) -> None: ...
    @property
    def profile(self) -> UserProfile: ...
    @property
    def active(self) -> int: ...
    @property
    def revoked(self) -> int: ...

# Realm

class RealmCreateReq:
    def __init__(self, role_certificate: bytes) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def role_certificate(self) -> bytes: ...

class RealmCreateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> RealmCreateRep: ...

class RealmCreateRepOk(RealmCreateRep): ...

class RealmCreateRepInvalidCertification(RealmCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmCreateRepInvalidData(RealmCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmCreateRepNotFound(RealmCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmCreateRepAlreadyExists(RealmCreateRep): ...

class RealmCreateRepBadTimestamp(RealmCreateRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: Optional[float],
        ballpark_client_late_offset: Optional[float],
        backend_timestamp: Optional[DateTime],
        client_timestamp: Optional[DateTime],
    ) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...
    @property
    def ballpark_client_early_offset(self) -> Optional[float]: ...
    @property
    def ballpark_client_late_offset(self) -> Optional[float]: ...
    @property
    def backend_timestamp(self) -> Optional[DateTime]: ...
    @property
    def client_timestamp(self) -> Optional[DateTime]: ...

class RealmCreateRepUnknownStatus(RealmCreateRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmStatusReq:
    def __init__(self, realm_id: RealmID) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...

class RealmStatusRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> RealmStatusRep: ...

class RealmStatusRepOk(RealmStatusRep):
    def __init__(
        self,
        in_maintenance: bool,
        maintenance_type: Optional[MaintenanceType],
        maintenance_started_on: Optional[DateTime],
        maintenance_started_by: Optional[DeviceID],
        encryption_revision: int,
    ) -> None: ...
    @property
    def in_maintenance(self) -> bool: ...
    @property
    def maintenance_type(self) -> Optional[MaintenanceType]: ...
    @property
    def maintenance_started_on(self) -> Optional[DateTime]: ...
    @property
    def maintenance_started_by(self) -> Optional[DeviceID]: ...
    @property
    def encryption_revision(self) -> int: ...

class RealmStatusRepNotAllowed(RealmStatusRep): ...

class RealmStatusRepNotFound(RealmStatusRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmStatusRepUnknownStatus(RealmStatusRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmStatsReq:
    def __init__(self, realm_id: RealmID) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...

class RealmStatsRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> RealmStatsRep: ...

class RealmStatsRepOk(RealmStatsRep):
    def __init__(self, blocks_size: int, vlobs_size: int) -> None: ...
    @property
    def blocks_size(self) -> int: ...
    @property
    def vlobs_size(self) -> int: ...

class RealmStatsRepNotAllowed(RealmStatsRep): ...

class RealmStatsRepNotFound(RealmStatsRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmStatsRepUnknownStatus(RealmStatsRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmGetRoleCertificatesReq:
    def __init__(self, realm_id: RealmID) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...

class RealmGetRoleCertificatesRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> RealmGetRoleCertificatesRep: ...

class RealmGetRoleCertificatesRepOk(RealmGetRoleCertificatesRep):
    def __init__(self, certificates: Iterable[bytes]) -> None: ...
    @property
    def certificates(self) -> Tuple[bytes]: ...

class RealmGetRoleCertificatesRepNotAllowed(RealmGetRoleCertificatesRep): ...

class RealmGetRoleCertificatesRepNotFound(RealmGetRoleCertificatesRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmGetRoleCertificatesRepUnknownStatus(RealmGetRoleCertificatesRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmUpdateRolesReq:
    def __init__(self, role_certificate: bytes, recipient_message: Optional[bytes]) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def role_certificate(self) -> bytes: ...
    @property
    def recipient_message(self) -> Optional[bytes]: ...

class RealmUpdateRolesRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> RealmUpdateRolesRep: ...

class RealmUpdateRolesRepOk(RealmUpdateRolesRep): ...

class RealmUpdateRolesRepNotAllowed(RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmUpdateRolesRepInvalidCertification(RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmUpdateRolesRepInvalidData(RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmUpdateRolesRepAlreadyGranted(RealmUpdateRolesRep): ...

class RealmUpdateRolesRepIncompatibleProfile(RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmUpdateRolesRepNotFound(RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmUpdateRolesRepInMaintenance(RealmUpdateRolesRep): ...
class RealmUpdateRolesRepUserRevoked(RealmUpdateRolesRep): ...

class RealmUpdateRolesRepRequireGreaterTimestamp(RealmUpdateRolesRep):
    def __init__(self, strictly_greater_than: DateTime) -> None: ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class RealmUpdateRolesRepBadTimestamp(RealmUpdateRolesRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class RealmUpdateRolesRepUnknownStatus(RealmUpdateRolesRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmStartReencryptionMaintenanceReq:
    def __init__(
        self,
        realm_id: RealmID,
        encryption_revision: int,
        timestamp: DateTime,
        per_participant_message: dict[UserID, bytes],
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def per_participant_message(self) -> dict[UserID, bytes]: ...

class RealmStartReencryptionMaintenanceRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> RealmStartReencryptionMaintenanceRep: ...

class RealmStartReencryptionMaintenanceRepOk(RealmStartReencryptionMaintenanceRep): ...
class RealmStartReencryptionMaintenanceRepNotAllowed(RealmStartReencryptionMaintenanceRep): ...

class RealmStartReencryptionMaintenanceRepNotFound(RealmStartReencryptionMaintenanceRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmStartReencryptionMaintenanceRepBadEncryptionRevision(
    RealmStartReencryptionMaintenanceRep
): ...

class RealmStartReencryptionMaintenanceRepParticipantMismatch(RealmStartReencryptionMaintenanceRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmStartReencryptionMaintenanceRepMaintenanceError(RealmStartReencryptionMaintenanceRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmStartReencryptionMaintenanceRepInMaintenance(RealmStartReencryptionMaintenanceRep): ...

class RealmStartReencryptionMaintenanceRepBadTimestamp(RealmStartReencryptionMaintenanceRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class RealmStartReencryptionMaintenanceRepUnknownStatus(RealmStartReencryptionMaintenanceRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmFinishReencryptionMaintenanceReq:
    def __init__(self, realm_id: RealmID, encryption_revision: int) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...

class RealmFinishReencryptionMaintenanceRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> RealmFinishReencryptionMaintenanceRep: ...

class RealmFinishReencryptionMaintenanceRepOk(RealmFinishReencryptionMaintenanceRep): ...
class RealmFinishReencryptionMaintenanceRepNotAllowed(RealmFinishReencryptionMaintenanceRep): ...

class RealmFinishReencryptionMaintenanceRepNotFound(RealmFinishReencryptionMaintenanceRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmFinishReencryptionMaintenanceRepBadEncryptionRevision(
    RealmFinishReencryptionMaintenanceRep
): ...

class RealmFinishReencryptionMaintenanceRepNotInMaintenance(RealmFinishReencryptionMaintenanceRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmFinishReencryptionMaintenanceRepMaintenanceError(RealmFinishReencryptionMaintenanceRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class RealmFinishReencryptionMaintenanceRepUnknownStatus(RealmFinishReencryptionMaintenanceRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class MaintenanceType:
    def __init__(self, maintenance_type: str) -> None: ...
    @classmethod
    def GARBAGE_COLLECTION(cls) -> MaintenanceType: ...
    @classmethod
    def REENCRYPTION(cls) -> MaintenanceType: ...

# Ping

class AuthenticatedPingReq:
    def __init__(self, ping: str) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def ping(self) -> str: ...

class AuthenticatedPingRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> AuthenticatedPingRep: ...

class AuthenticatedPingRepOk(AuthenticatedPingRep):
    def __init__(self, pong: str) -> None: ...
    @property
    def pong(self) -> str: ...

class AuthenticatedPingRepUnknownStatus(AuthenticatedPingRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class InvitedPingReq:
    def __init__(self, ping: str) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def ping(self) -> str: ...

class InvitedPingRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> InvitedPingRep: ...

class InvitedPingRepOk(InvitedPingRep):
    def __init__(self, pong: str) -> None: ...
    @property
    def pong(self) -> str: ...

class InvitedPingRepUnknownStatus(InvitedPingRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

# User

class UserGetReq:
    def __init__(self, user_id: UserID) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def user_id(self) -> UserID: ...

class UserGetRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> UserGetRep: ...

class UserGetRepOk(UserGetRep):
    def __init__(
        self,
        user_certificate: bytes,
        revoked_user_certificate: Optional[bytes],
        device_certificates: Iterable[bytes],
        trustchain: Trustchain,
    ) -> None: ...
    @property
    def user_certificate(self) -> bytes: ...
    @property
    def revoked_user_certificate(self) -> Optional[bytes]: ...
    @property
    def device_certificates(self) -> Tuple[bytes]: ...
    @property
    def trustchain(self) -> Trustchain: ...

class UserGetRepNotFound(UserGetRep): ...

class UserGetRepUnknownStatus(UserGetRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserCreateReq:
    def __init__(
        self,
        user_certificate: bytes,
        device_certificate: bytes,
        redacted_user_certificate: bytes,
        redacted_device_certificate: bytes,
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def user_certificate(self) -> bytes: ...
    @property
    def device_certificate(self) -> bytes: ...
    @property
    def redacted_user_certificate(self) -> bytes: ...
    @property
    def redacted_device_certificate(self) -> bytes: ...

class UserCreateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> UserCreateRep: ...

class UserCreateRepOk(UserCreateRep): ...

class UserCreateRepNotAllowed(UserCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserCreateRepInvalidCertification(UserCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserCreateRepInvalidData(UserCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserCreateRepAlreadyExists(UserCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserCreateRepActiveUsersLimitReached(UserCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserCreateRepUnknownStatus(UserCreateRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserRevokeReq:
    def __init__(self, revoked_user_certificate: bytes) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def revoked_user_certificate(self) -> bytes: ...

class UserRevokeRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> UserRevokeRep: ...

class UserRevokeRepOk(UserRevokeRep): ...

class UserRevokeRepNotAllowed(UserRevokeRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserRevokeRepInvalidCertification(UserRevokeRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserRevokeRepNotFound(UserRevokeRep): ...

class UserRevokeRepAlreadyRevoked(UserRevokeRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class UserRevokeRepUnknownStatus(UserRevokeRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class DeviceCreateReq:
    def __init__(self, device_certificate: bytes, redacted_device_certificate: bytes) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def device_certificate(self) -> bytes: ...
    @property
    def redacted_device_certificate(self) -> bytes: ...

class DeviceCreateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> DeviceCreateRep: ...

class DeviceCreateRepOk(DeviceCreateRep): ...

class DeviceCreateRepInvalidCertification(DeviceCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class DeviceCreateRepBadUserId(DeviceCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class DeviceCreateRepInvalidData(DeviceCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class DeviceCreateRepAlreadyExists(DeviceCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class DeviceCreateRepUnknownStatus(DeviceCreateRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class HumanFindReq:
    def __init__(
        self,
        query: Optional[str],
        omit_revoked: bool,
        omit_non_human: bool,
        page: int,
        per_page: int,
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def query(self) -> Optional[str]: ...
    @property
    def omit_revoked(self) -> bool: ...
    @property
    def omit_non_human(self) -> bool: ...
    @property
    def page(self) -> int: ...
    @property
    def per_page(self) -> int: ...

class HumanFindRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> HumanFindRep: ...

class HumanFindRepOk(HumanFindRep):
    def __init__(
        self, results: Iterable[HumanFindResultItem], page: int, per_page: int, total: int
    ) -> None: ...
    @property
    def results(self) -> Tuple[HumanFindResultItem]: ...
    @property
    def page(self) -> int: ...
    @property
    def per_page(self) -> int: ...
    @property
    def total(self) -> int: ...

class HumanFindRepNotAllowed(HumanFindRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class HumanFindRepUnknownStatus(HumanFindRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class Trustchain:
    def __init__(
        self, devices: Iterable[bytes], users: Iterable[bytes], revoked_users: Iterable[bytes]
    ) -> None: ...
    @property
    def devices(self) -> Tuple[bytes]: ...
    @property
    def users(self) -> Tuple[bytes]: ...
    @property
    def revoked_users(self) -> Tuple[bytes]: ...

class HumanFindResultItem:
    def __init__(
        self, user_id: UserID, human_handle: Optional[HumanHandle], revoked: bool
    ) -> None: ...
    @property
    def user_id(self) -> UserID: ...
    @property
    def human_handle(self) -> Optional[HumanHandle]: ...
    @property
    def revoked(self) -> bool: ...

# Vlob

class VlobCreateReq:
    def __init__(
        self,
        realm_id: RealmID,
        encryption_revision: int,
        vlob_id: VlobID,
        timestamp: DateTime,
        blob: bytes,
        sequester_blob: Optional[dict[SequesterServiceID, bytes]],
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def sequester_blob(self) -> Optional[dict[SequesterServiceID, bytes]]: ...

class VlobCreateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobCreateRep: ...

class VlobCreateRepOk(VlobCreateRep): ...

class VlobCreateRepAlreadyExists(VlobCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobCreateRepNotAllowed(VlobCreateRep): ...
class VlobCreateRepBadEncryptionRevision(VlobCreateRep): ...
class VlobCreateRepInMaintenance(VlobCreateRep): ...

class VlobCreateRepRequireGreaterTimestamp(VlobCreateRep):
    def __init__(self, strictly_greater_than: DateTime) -> None: ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class VlobCreateRepBadTimestamp(VlobCreateRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class VlobCreateRepNotASequesteredOrganization(VlobCreateRep): ...

class VlobCreateRepSequesterInconsistency(VlobCreateRep):
    def __init__(
        self,
        sequester_authority_certificate: bytes,
        sequester_services_certificates: Iterable[bytes],
    ) -> None: ...
    @property
    def sequester_authority_certificate(self) -> bytes: ...
    @property
    def sequester_services_certificates(self) -> Tuple[bytes]: ...

class VlobCreateRepRejectedBySequesterService(VlobCreateRep):
    def __init__(self, service_id: SequesterServiceID, service_label: str, reason: str) -> None: ...
    @property
    def service_id(self) -> SequesterServiceID: ...
    @property
    def service_label(self) -> str: ...
    @property
    def reason(self) -> str: ...

class VlobCreateRepTimeout(VlobCreateRep): ...

class VlobCreateRepUnknownStatus(VlobCreateRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobReadReq:
    def __init__(
        self,
        encryption_revision: int,
        vlob_id: VlobID,
        version: Optional[int],
        timestamp: Optional[DateTime],
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def version(self) -> Optional[int]: ...
    @property
    def timestamp(self) -> Optional[DateTime]: ...

class VlobReadRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobReadRep: ...

class VlobReadRepOk(VlobReadRep):
    def __init__(
        self,
        version: int,
        blob: bytes,
        author: DeviceID,
        timestamp: DateTime,
        author_last_role_granted_on: Optional[DateTime],
    ) -> None: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def author(self) -> DeviceID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def author_last_role_granted_on(self) -> Optional[DateTime]: ...

class VlobReadRepNotFound(VlobReadRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobReadRepNotAllowed(VlobReadRep): ...
class VlobReadRepBadVersion(VlobReadRep): ...
class VlobReadRepBadEncryptionRevision(VlobReadRep): ...
class VlobReadRepInMaintenance(VlobReadRep): ...

class VlobReadRepUnknownStatus(VlobReadRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobUpdateReq:
    def __init__(
        self,
        encryption_revision: int,
        vlob_id: VlobID,
        timestamp: DateTime,
        version: int,
        blob: bytes,
        sequester_blob: Optional[dict[SequesterServiceID, bytes]],
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def sequester_blob(self) -> Optional[dict[SequesterServiceID, bytes]]: ...

class VlobUpdateRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobUpdateRep: ...

class VlobUpdateRepOk(VlobUpdateRep): ...

class VlobUpdateRepNotFound(VlobUpdateRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobUpdateRepNotAllowed(VlobUpdateRep): ...
class VlobUpdateRepBadVersion(VlobUpdateRep): ...
class VlobUpdateRepBadEncryptionRevision(VlobUpdateRep): ...
class VlobUpdateRepInMaintenance(VlobUpdateRep): ...

class VlobUpdateRepRequireGreaterTimestamp(VlobUpdateRep):
    def __init__(self, strictly_greater_than: DateTime) -> None: ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class VlobUpdateRepBadTimestamp(VlobUpdateRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class VlobUpdateRepNotASequesteredOrganization(VlobUpdateRep): ...

class VlobUpdateRepSequesterInconsistency(VlobUpdateRep):
    def __init__(
        self,
        sequester_authority_certificate: bytes,
        sequester_services_certificates: Iterable[bytes],
    ) -> None: ...
    @property
    def sequester_authority_certificate(self) -> bytes: ...
    @property
    def sequester_services_certificates(self) -> Tuple[bytes]: ...

class VlobUpdateRepRejectedBySequesterService(VlobUpdateRep):
    def __init__(self, service_id: SequesterServiceID, service_label: str, reason: str) -> None: ...
    @property
    def service_id(self) -> SequesterServiceID: ...
    @property
    def service_label(self) -> str: ...
    @property
    def reason(self) -> str: ...

class VlobUpdateRepTimeout(VlobUpdateRep): ...

class VlobUpdateRepUnknownStatus(VlobUpdateRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobPollChangesReq:
    def __init__(self, realm_id: RealmID, last_checkpoint: int) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def last_checkpoint(self) -> int: ...

class VlobPollChangesRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobPollChangesRep: ...

class VlobPollChangesRepOk(VlobPollChangesRep):
    def __init__(self, changes: dict[VlobID, int], current_checkpoint: int) -> None: ...
    @property
    def changes(self) -> dict[VlobID, int]: ...
    @property
    def current_checkpoint(self) -> int: ...

class VlobPollChangesRepNotAllowed(VlobPollChangesRep): ...

class VlobPollChangesRepNotFound(VlobPollChangesRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobPollChangesRepInMaintenance(VlobPollChangesRep): ...

class VlobPollChangesRepUnknownStatus(VlobPollChangesRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobListVersionsReq:
    def __init__(self, vlob_id: VlobID) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def vlob_id(self) -> VlobID: ...

class VlobListVersionsRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobListVersionsRep: ...

class VlobListVersionsRepOk(VlobListVersionsRep):
    def __init__(self, versions: dict[int, Tuple[DateTime, DeviceID]]) -> None: ...
    @property
    def versions(self) -> dict[int, Tuple[DateTime, DeviceID]]: ...

class VlobListVersionsRepNotAllowed(VlobListVersionsRep): ...

class VlobListVersionsRepNotFound(VlobListVersionsRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobListVersionsRepInMaintenance(VlobListVersionsRep): ...

class VlobListVersionsRepUnknownStatus(VlobListVersionsRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobMaintenanceGetReencryptionBatchReq:
    def __init__(self, realm_id: RealmID, encryption_revision: int, size: int) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def size(self) -> int: ...

class VlobMaintenanceGetReencryptionBatchRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobMaintenanceGetReencryptionBatchRep: ...

class VlobMaintenanceGetReencryptionBatchRepOk(VlobMaintenanceGetReencryptionBatchRep):
    def __init__(self, batch: Iterable[ReencryptionBatchEntry]) -> None: ...
    @property
    def batch(self) -> Tuple[ReencryptionBatchEntry]: ...

class VlobMaintenanceGetReencryptionBatchRepNotAllowed(VlobMaintenanceGetReencryptionBatchRep): ...

class VlobMaintenanceGetReencryptionBatchRepNotFound(VlobMaintenanceGetReencryptionBatchRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobMaintenanceGetReencryptionBatchRepNotInMaintenance(
    VlobMaintenanceGetReencryptionBatchRep
):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobMaintenanceGetReencryptionBatchRepBadEncryptionRevision(
    VlobMaintenanceGetReencryptionBatchRep
): ...

class VlobMaintenanceGetReencryptionBatchRepMaintenanceError(
    VlobMaintenanceGetReencryptionBatchRep
):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobMaintenanceGetReencryptionBatchRepUnknownStatus(VlobMaintenanceGetReencryptionBatchRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobMaintenanceSaveReencryptionBatchReq:
    def __init__(
        self, realm_id: RealmID, encryption_revision: int, batch: Iterable[ReencryptionBatchEntry]
    ) -> None: ...
    def dump(self) -> bytes: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def batch(self) -> Tuple[ReencryptionBatchEntry]: ...

class VlobMaintenanceSaveReencryptionBatchRep:
    def dump(self) -> bytes: ...
    @classmethod
    def load(cls, buf: bytes) -> VlobMaintenanceSaveReencryptionBatchRep: ...

class VlobMaintenanceSaveReencryptionBatchRepOk(VlobMaintenanceSaveReencryptionBatchRep):
    def __init__(self, total: int, done: int) -> None: ...
    @property
    def total(self) -> int: ...
    @property
    def done(self) -> int: ...

class VlobMaintenanceSaveReencryptionBatchRepNotAllowed(
    VlobMaintenanceSaveReencryptionBatchRep
): ...

class VlobMaintenanceSaveReencryptionBatchRepNotFound(VlobMaintenanceSaveReencryptionBatchRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobMaintenanceSaveReencryptionBatchRepNotInMaintenance(
    VlobMaintenanceSaveReencryptionBatchRep
):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobMaintenanceSaveReencryptionBatchRepBadEncryptionRevision(
    VlobMaintenanceSaveReencryptionBatchRep
): ...

class VlobMaintenanceSaveReencryptionBatchRepMaintenanceError(
    VlobMaintenanceSaveReencryptionBatchRep
):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class VlobMaintenanceSaveReencryptionBatchRepUnknownStatus(VlobMaintenanceSaveReencryptionBatchRep):
    def __init__(self, status: str, reason: Optional[str]) -> None: ...
    @property
    def status(self) -> str: ...
    @property
    def reason(self) -> Optional[str]: ...

class ReencryptionBatchEntry:
    def __init__(self, vlob_id: VlobID, version: int, blob: bytes) -> None: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
