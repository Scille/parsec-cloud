from typing import Any, List, Optional, Tuple, Literal

from parsec._parsec_pyi.ids import (
    BlockID,
    RealmID,
    SequesterServiceID,
    UserID,
    VlobID,
    DeviceID,
    UserID,
)
from parsec._parsec_pyi.certif import RealmRole
from parsec._parsec import PublicKey, InvitationToken
from parsec._parsec_pyi.crypto import HashDigest
from parsec._parsec_pyi.invite import InvitationToken
from parsec._parsec_pyi.time import DateTime
from parsec.api.protocol.types import UserProfile

class AuthenticatedAnyCmdReq:
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Any: ...

class InvitedAnyCmdReq:
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Any: ...

class InvitationType:
    DEVICE: InvitationType
    USER: InvitationType
    @classmethod
    def values(cls) -> List[InvitationType]: ...
    @classmethod
    def from_str(cls, value: str) -> InvitationType: ...
    @property
    def str(self) -> str: ...

class Invite1GreeterWaitPeerReq:
    def __init__(self, token: InvitationToken, greeter_public_key: PublicKey) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def greeter_public_key(self) -> PublicKey: ...

class Invite1GreeterWaitPeerRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite1GreeterWaitPeerRep: ...

class Invite1GreeterWaitPeerRepOk(Invite1GreeterWaitPeerRep):
    def __init__(self, claimer_public_key: PublicKey) -> None: ...
    @property
    def claimer_public_key(self) -> PublicKey: ...

class Invite1GreeterWaitPeerRepNotFound(Invite1GreeterWaitPeerRep):
    def __init__(self) -> None: ...

class Invite1GreeterWaitPeerRepAlreadyDeleted(Invite1GreeterWaitPeerRep):
    def __init__(self) -> None: ...

class Invite1GreeterWaitPeerRepInvalidState(Invite1GreeterWaitPeerRep):
    def __init__(self) -> None: ...

class Invite1GreeterWaitPeerRepUnknownStatus(Invite1GreeterWaitPeerRep):
    def __init__(self) -> None: ...

class Invite2aGreeterGetHashedNonceReq:
    def __init__(self, token: InvitationToken) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...

class Invite2aGreeterGetHashedNonceRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite2aGreeterGetHashedNonceRep: ...

class Invite2aGreeterGetHashedNonceRepOk(Invite2aGreeterGetHashedNonceRep):
    def __init__(self, claimer_hashed_nonce: HashDigest) -> None: ...
    @property
    def claimer_hashed_nonce(self) -> HashDigest: ...

class Invite2aGreeterGetHashedNonceRepNotFound(Invite2aGreeterGetHashedNonceRep):
    def __init__(self) -> None: ...

class Invite2aGreeterGetHashedNonceRepAlreadyDeleted(Invite2aGreeterGetHashedNonceRep):
    def __init__(self) -> None: ...

class Invite2aGreeterGetHashedNonceRepInvalidState(Invite2aGreeterGetHashedNonceRep):
    def __init__(self) -> None: ...

class Invite2aClaimerSendHashedNonceRepUnknownStatus(Invite2aClaimerSendHashedNonceRep):
    def __init__(self) -> None: ...

class Invite2aGreeterGetHashedNonceRepUnknownStatus(Invite2aGreeterGetHashedNonceRep):
    def __init__(self) -> None: ...

class Invite2bGreeterSendNonceReq:
    def __init__(self, token: InvitationToken, greeter_nonce: bytes) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def greeter_nonce(self) -> bytes: ...

class Invite2bGreeterSendNonceRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite2bGreeterSendNonceRep: ...

class Invite2bGreeterSendNonceRepOk(Invite2bGreeterSendNonceRep):
    def __init__(self, claimer_nonce: bytes) -> None: ...
    @property
    def claimer_nonce(self) -> bytes: ...

class Invite2bGreeterSendNonceRepNotFound(Invite2bGreeterSendNonceRep):
    def __init__(self) -> None: ...

class Invite2bGreeterSendNonceRepAlreadyDeleted(Invite2bGreeterSendNonceRep):
    def __init__(self) -> None: ...

class Invite2bGreeterSendNonceRepInvalidState(Invite2bGreeterSendNonceRep):
    def __init__(self) -> None: ...

class Invite2bGreeterSendNonceRepUnknownStatus(Invite2bGreeterSendNonceRep):
    def __init__(self) -> None: ...

class Invite3aGreeterWaitPeerTrustReq:
    def __init__(self, token: InvitationToken) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...

class Invite3aGreeterWaitPeerTrustRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite3aGreeterWaitPeerTrustRep: ...

class Invite3aGreeterWaitPeerTrustRepOk(Invite3aGreeterWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3aGreeterWaitPeerTrustRepNotFound(Invite3aGreeterWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3aGreeterWaitPeerTrustRepAlreadyDeleted(Invite3aGreeterWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3aGreeterWaitPeerTrustRepInvalidState(Invite3aGreeterWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3bGreeterSignifyTrustReq:
    def __init__(self, token: InvitationToken) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...

class Invite3bGreeterSignifyTrustRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite3bGreeterSignifyTrustRep: ...

class Invite3bGreeterSignifyTrustRepOk(Invite3bGreeterSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite3bGreeterSignifyTrustRepNotFound(Invite3bGreeterSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite3bGreeterSignifyTrustRepAlreadyDeleted(Invite3bGreeterSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite3bGreeterSignifyTrustRepInvalidState(Invite3bGreeterSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite4GreeterCommunicateReq:
    def __init__(self, token: InvitationToken, payload: bytes) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def payload(self) -> bytes: ...

class Invite4GreeterCommunicateRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite4GreeterCommunicateRep: ...

class Invite4GreeterCommunicateRepOk(Invite4GreeterCommunicateRep):
    def __init__(self, payload: bytes) -> None: ...
    @property
    def payload(self) -> bytes: ...

class Invite4GreeterCommunicateRepNotFound(Invite4GreeterCommunicateRep):
    def __init__(self) -> None: ...

class Invite4GreeterCommunicateRepAlreadyDeleted(Invite4GreeterCommunicateRep):
    def __init__(self) -> None: ...

class Invite4GreeterCommunicateRepInvalidState(Invite4GreeterCommunicateRep):
    def __init__(self) -> None: ...

class Invite4GreeterCommunicateRepUnknownStatus(Invite4GreeterCommunicateRep):
    def __init__(self) -> None: ...

class InvitationDeletedReason:
    @classmethod
    def FINISHED(cls) -> InvitationDeletedReason: ...
    @classmethod
    def CANCELLED(cls) -> InvitationDeletedReason: ...
    @classmethod
    def ROTTEN(cls) -> InvitationDeletedReason: ...
    @property
    def value(self) -> str: ...

class InviteDeleteReq:
    def __init__(self, token: InvitationToken, reason: InvitationDeletedReason) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def reason(self) -> InvitationDeletedReason: ...

class InviteDeleteRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> InviteDeleteRep: ...

class InviteDeleteRepOk(InviteDeleteRep):
    def __init__(self) -> None: ...

class InviteDeleteRepNotFound(InviteDeleteRep):
    def __init__(self) -> None: ...

class InviteDeleteRepAlreadyDeleted(InviteDeleteRep):
    def __init__(self) -> None: ...

class InviteDeleteRepUnknownStatus(InviteDeleteRep):
    def __init__(self) -> None: ...

class InviteListReq:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...

class InviteListRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> InviteListRep: ...

class InviteListRepUnknownStatus(InviteListRep):
    def __init__(self) -> None: ...

class InvitationStatus:
    IDLE: InvitationStatus
    READY: InvitationStatus
    DELETED: InvitationStatus
    @classmethod
    def values(cls) -> List[InvitationStatus]: ...
    @classmethod
    def from_str(cls, value: str) -> InvitationStatus: ...
    @property
    def str(self) -> str: ...

class InviteListItem:
    @classmethod
    def User(
        cls,
        token: InvitationToken,
        created_on: DateTime,
        claimer_email: str,
        status: Literal["IDLE", "READY", "DELETED"],
    ) -> InviteListItem: ...
    @classmethod
    def Device(
        cls, token: InvitationToken, created_on: DateTime, status: Any
    ) -> InviteListItem: ...
    @property
    def type(self) -> InvitationType: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def created_on(self) -> DateTime: ...
    @property
    def status(self) -> InvitationStatus: ...

class InviteListRepOk(InviteListRep):
    def __init__(self, invitations: List[InviteListItem]) -> None: ...
    @property
    def invitations(self) -> List[InviteListItem]: ...

class InviteNewReq:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...

class InviteNewRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> InviteNewRep: ...

class InvitationEmailSentStatus:
    @classmethod
    def SUCCESS(cls) -> InvitationEmailSentStatus: ...
    @classmethod
    def NOT_AVAILABLE(cls) -> InvitationEmailSentStatus: ...
    @classmethod
    def BAD_RECIPIENT(cls) -> InvitationEmailSentStatus: ...

class InviteNewRepOk(InviteNewRep):
    def __init__(
        self, token: InvitationToken, email_sent: Optional[InvitationEmailSentStatus]
    ) -> None: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def email_sent(self) -> Optional[InvitationEmailSentStatus]: ...

class InviteNewRepNotAllowed(InviteNewRep):
    def __init__(self) -> None: ...

class InviteNewRepAlreadyMember(InviteNewRep):
    def __init__(self) -> None: ...

class InviteNewRepNotAvailable(InviteNewRep):
    def __init__(self) -> None: ...

class InviteNewRepUnknownStatus:
    def __init__(self) -> None: ...

class Invite1ClaimerWaitPeerReq:
    def __init__(self, claimer_public_key: PublicKey) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def claimer_public_key(self) -> PublicKey: ...

class Invite1ClaimerWaitPeerRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite1ClaimerWaitPeerRep: ...

class Invite1ClaimerWaitPeerRepOk(Invite1ClaimerWaitPeerRep):
    def __init__(self, greeter_public_key: PublicKey) -> None: ...
    @property
    def greeter_public_key(self) -> PublicKey: ...

class Invite1ClaimerWaitPeerRepNotFound(Invite1ClaimerWaitPeerRep):
    def __init__(self) -> None: ...

class Invite1ClaimerWaitPeerRepInvalidState(Invite1ClaimerWaitPeerRep):
    def __init__(self) -> None: ...

class Invite1ClaimerWaitPeerRepUnknownStatus(Invite1ClaimerWaitPeerRep):
    def __init__(self) -> None: ...

class Invite2aClaimerSendHashedNonceReq:
    def __init__(self, claimer_hashed_nonce: HashDigest) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def claimer_hashed_nonce(self) -> HashDigest: ...

class Invite2aClaimerSendHashedNonceRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite2aClaimerSendHashedNonceRep: ...

class Invite2aClaimerSendHashedNonceRepOk(Invite2aClaimerSendHashedNonceRep):
    def __init__(self, greeter_nonce: bytes) -> None: ...
    @property
    def greeter_nonce(self) -> bytes: ...

class Invite2aClaimerSendHashedNonceRepNotFound(Invite2aClaimerSendHashedNonceRep):
    def __init__(self) -> None: ...

class Invite2aClaimerSendHashedNonceRepAlreadyDeleted(Invite2aClaimerSendHashedNonceRep):
    def __init__(self) -> None: ...

class Invite2aClaimerSendHashedNonceRepInvalidState(Invite2aClaimerSendHashedNonceRep):
    def __init__(self) -> None: ...

class Invite2bClaimerSendNonceReq:
    def __init__(self, claimer_nonce: bytes) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def claimer_nonce(self) -> bytes: ...

class Invite2bClaimerSendNonceRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite2bClaimerSendNonceRep: ...

class Invite2bClaimerSendNonceRepOk(Invite2bClaimerSendNonceRep):
    def __init__(self) -> None: ...

class Invite2bClaimerSendNonceRepNotFound(Invite2bClaimerSendNonceRep):
    def __init__(self) -> None: ...

class Invite2bClaimerSendNonceRepInvalidState(Invite2bClaimerSendNonceRep):
    def __init__(self) -> None: ...

class Invite2bClaimerSendNonceRepUnknownStatus(Invite2bClaimerSendNonceRep):
    def __init__(self) -> None: ...

class Invite3aClaimerSignifyTrustReq:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...

class Invite3aClaimerSignifyTrustRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite3aClaimerSignifyTrustRep: ...

class Invite3aClaimerSignifyTrustRepOk(Invite3aClaimerSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite3aClaimerSignifyTrustRepNotFound(Invite3aClaimerSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite3aClaimerSignifyTrustRepInvalidState(Invite3aClaimerSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite3aClaimerSignifyTrustRepUnknownStatus(Invite3aClaimerSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite3aGreeterWaitPeerTrustRepUnknownStatus(Invite3aGreeterWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3bClaimerWaitPeerTrustRepUnknownStatus(Invite3bClaimerWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3bClaimerWaitPeerTrustReq:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...

class Invite3bClaimerWaitPeerTrustRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite3bClaimerWaitPeerTrustRep: ...

class Invite3bClaimerWaitPeerTrustRepOk(Invite3bClaimerWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3bClaimerWaitPeerTrustRepNotFound(Invite3bClaimerWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3bClaimerWaitPeerTrustRepInvalidState(Invite3bClaimerWaitPeerTrustRep):
    def __init__(self) -> None: ...

class Invite3bGreeterSignifyTrustRepUnknownStatus(Invite3bGreeterSignifyTrustRep):
    def __init__(self) -> None: ...

class Invite4ClaimerCommunicateReq:
    def __init__(self, payload: bytes) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...
    @property
    def payload(self) -> bytes: ...

class Invite4ClaimerCommunicateRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> Invite4ClaimerCommunicateRep: ...

class Invite4ClaimerCommunicateRepOk(Invite4ClaimerCommunicateRep):
    def __init__(self, payload: bytes) -> None: ...
    @property
    def payload(self) -> bytes: ...

class Invite4ClaimerCommunicateRepNotFound(Invite4ClaimerCommunicateRep):
    def __init__(self) -> None: ...

class Invite4ClaimerCommunicateRepInvalidState(Invite4ClaimerCommunicateRep):
    def __init__(self) -> None: ...

class Invite4ClaimerCommunicateRepUnknownStatus(Invite4ClaimerCommunicateRep):
    def __init__(self) -> None: ...

class InviteInfoReq:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def dump(self) -> bytes: ...

class InviteInfoRep:
    def __init__(self) -> None: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> InviteInfoRep: ...

class InviteInfoRepOk(InviteInfoRep):
    def __init__(self) -> None: ...

class InviteInfoRepUnknownStatus(InviteInfoRep):
    def __init__(self) -> None: ...

# Block
class BlockCreateReq:
    def __init__(self, block_id: BlockID, realm_id: RealmID, block: bytes) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: BlockCreateReq) -> bool: ...
    def __ne__(self, other: BlockCreateReq) -> bool: ...
    @property
    def block_id(self) -> BlockID: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def block(self) -> bytes: ...
    def dump(self) -> bytes: ...

class BlockCreateRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: BlockCreateRep) -> bool: ...
    def __ne__(self, other: BlockCreateRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> BlockCreateRep: ...

class BlockCreateRepOk(BlockCreateRep): ...
class BlockCreateRepAlreadyExists(BlockCreateRep): ...
class BlockCreateRepNotFound(BlockCreateRep): ...
class BlockCreateRepTimeout(BlockCreateRep): ...
class BlockCreateRepNotAllowed(BlockCreateRep): ...
class BlockCreateRepInMaintenance(BlockCreateRep): ...
class BlockCreateRepUnknownStatus(UnknownStatus, BlockCreateRep): ...

class BlockReadReq:
    def __init__(self, block_id: BlockID) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: BlockReadReq) -> bool: ...
    def __ne__(self, other: BlockReadReq) -> bool: ...
    @property
    def block_id(self) -> BlockID: ...
    def dump(self) -> bytes: ...

class BlockReadRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: BlockReadRep) -> bool: ...
    def __ne__(self, other: BlockReadRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> BlockReadRep: ...

class BlockReadRepOk(BlockReadRep):
    def __init__(self, block: bytes) -> None: ...
    @property
    def block(self) -> bytes: ...

class BlockReadRepNotFound(BlockReadRep): ...
class BlockReadRepTimeout(BlockReadRep): ...
class BlockReadRepNotAllowed(BlockReadRep): ...
class BlockReadRepInMaintenance(BlockReadRep): ...
class BlockReadRepUnknownStatus(UnknownStatus, BlockReadRep): ...

# Events
class EventsListenReq:
    def __init__(self, wait: bool) -> None: ...
    @property
    def wait(self) -> bool: ...

class EventsListenRep: ...
class EventsListenRepOk(EventsListenRep): ...

class EventsListenRepOkPinged(EventsListenRep):
    def __init__(self, ping: str) -> None: ...
    @property
    def ping(self) -> str: ...

class EventsListenRepOkMessageReceived(EventsListenRep):
    def __init__(self, index: int) -> None: ...
    @property
    def index(self) -> int: ...

class EventsListenRepOkInviteStatusChanged(EventsListenRep):
    def __init__(self, token: InvitationToken, invitation_status: InvitationStatus) -> None: ...
    @property
    def token(self) -> InvitationToken: ...
    @property
    def invitation_status(self) -> InvitationStatus: ...

class EventsListenRepOkRealmMaintenanceFinished(EventsListenRep):
    def __init__(self, realm_id: RealmID, encryption_revision: int) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...

class EventsListenRepOkRealmMaintenanceStarted(EventsListenRep):
    def __init__(self, realm_id: RealmID, encryption_revision: int) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...

class EventsListenRepOkRealmVlobsUpdated(EventsListenRep):
    def __init__(
        self, realm_id: RealmID, checkpoint: int, src_id: VlobID, src_version: int
    ) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def checkpoint(self) -> int: ...
    @property
    def src_id(self) -> VlobID: ...
    @property
    def src_version(self) -> int: ...

class EventsListenRepOkRealmRolesUpdated(EventsListenRep):
    def __init__(self, real_id: RealmID, role: RealmRole) -> None: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def role(self) -> RealmRole: ...

class EventsListenRepCancelled(EventsListenRep):
    def __init__(self, reason: Optional[str]) -> None: ...
    @property
    def reason(self) -> Optional[str]: ...

class EventsListenRepOkPkiEnrollmentUpdated(EventsListenRep): ...
class EventsListenRepNoEvents(EventsListenRep): ...
class EventsListenRepUnknownStatus(EventsListenRep): ...
class EventsSubscribeReq: ...
class EventsSubscribeRep: ...
class EventsSubscribeRepOk(EventsListenRep): ...
class EventsSubscribeRepUnknownStatus(EventsListenRep): ...

# Message

class MessageGetReq:
    def __init__(self, offset: int) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: MessageGetReq) -> bool: ...
    def __ne__(self, other: MessageGetReq) -> bool: ...
    @property
    def offset(self) -> int: ...
    def dump(self) -> bytes: ...

class MessageGetRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: MessageGetRep) -> bool: ...
    def __ne__(self, other: MessageGetRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> MessageGetRep: ...

class MessageGetRepOk(MessageGetRep):
    def __init__(self, messages: List[Message]) -> None: ...
    @property
    def messages(self) -> Tuple[Message]: ...

class MessageGetRepUnknownStatus(UnknownStatus, MessageGetRep): ...

class Message:
    def __init__(self, count: int, sender: DeviceID, timestamp: DateTime, body: bytes) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Message) -> bool: ...
    def __ne__(self, other: Message) -> bool: ...
    @property
    def count(self) -> int: ...
    @property
    def sender(self) -> DeviceID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def body(self) -> bytes: ...

# Organization

class OrganizationStatsReq:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: OrganizationStatsReq) -> bool: ...
    def __ne__(self, other: OrganizationStatsReq) -> bool: ...
    def dump(self) -> bytes: ...

class OrganizationStatsRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: OrganizationStatsRep) -> bool: ...
    def __ne__(self, other: OrganizationStatsRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> OrganizationStatsRep: ...

class OrganizationStatsRepOk(OrganizationStatsRep):
    def __init__(
        self,
        data_size: int,
        metadata_size: int,
        realms: int,
        users: int,
        active_users: int,
        users_per_profile_detail: List[UsersPerProfileDetailItem],
    ) -> None: ...
    @property
    def data_size(self) -> int: ...
    @property
    def metadata_size(self) -> int: ...
    @property
    def realms(self) -> int: ...
    @property
    def users(self) -> int: ...
    @property
    def active_users(self) -> int: ...
    @property
    def users_per_profile_detail(self) -> List[UsersPerProfileDetailItem]: ...

class OrganizationStatsRepNotAllowed(RepWithReason, OrganizationStatsRep):
    def __init__(self, arg: Reason) -> None: ...

class OrganizationStatsRepNotFound(OrganizationStatsRep): ...
class OrganizationStatsRepUnknownStatus(UnknownStatus, OrganizationStatsRep): ...

class OrganizationConfigReq:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: OrganizationConfigReq) -> bool: ...
    def __ne__(self, other: OrganizationConfigReq) -> bool: ...
    def dump(self) -> bytes: ...

class OrganizationConfigRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: OrganizationConfigRep) -> bool: ...
    def __ne__(self, other: OrganizationConfigRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> OrganizationConfigRep: ...

class OrganizationConfigRepOk(OrganizationConfigRep):
    def __init__(
        self,
        user_profile_outsider_allowed: bool,
        active_users_limit: Optional[int],
        sequester_authority_certificate: Optional[bytes],
        sequester_services_certificates: Optional[List[bytes]],
    ) -> None: ...
    @property
    def user_profile_outsider_allowed(self) -> bool: ...
    @property
    def active_users_limit(self) -> Optional[int]: ...
    @property
    def sequester_authority_certificate(self) -> Optional[bytes]: ...
    @property
    def sequester_services_certificates(self) -> Optional[List[bytes]]: ...

class OrganizationConfigRepNotFound(OrganizationConfigRep): ...
class OrganizationConfigRepUnknownStatus(UnknownStatus, OrganizationConfigRep): ...

class UsersPerProfileDetailItem:
    def __init__(self, profile: UserProfile, active: int, revoked: int) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: UsersPerProfileDetailItem) -> bool: ...
    def __ne__(self, other: UsersPerProfileDetailItem) -> bool: ...
    @property
    def profile(self) -> UserProfile: ...
    @property
    def active(self) -> int: ...
    @property
    def revoked(self) -> int: ...

# Realm

class RealmCreateReq:
    def __init__(self, role_certificate: bytes) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmCreateReq) -> bool: ...
    def __ne__(self, other: RealmCreateReq) -> bool: ...
    @property
    def role_certificate(self) -> bytes: ...
    def dump(self) -> bytes: ...

class RealmCreateRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmCreateRep) -> bool: ...
    def __ne__(self, other: RealmCreateRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> RealmCreateRep: ...

class RealmCreateRepBadTimestamp(RepWithReason, RealmCreateRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class RealmCreateRepOk(RealmCreateRep): ...

class RealmCreateRepInvalidCertification(RepWithReason, RealmCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmCreateRepInvalidData(RepWithReason, RealmCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmCreateRepNotFound(RepWithReason, RealmCreateRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmCreateRepAlreadyExists(RealmCreateRep): ...
class RealmCreateRepUnknownStatus(UnknownStatus, RealmCreateRep): ...

class RealmStatusReq:
    def __init__(self, realm_id: RealmID) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmStatusReq) -> bool: ...
    def __ne__(self, other: RealmStatusReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    def dump(self) -> bytes: ...

class RealmStatusRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmStatusRep) -> bool: ...
    def __ne__(self, other: RealmStatusRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> RealmStatusRep: ...

class RealmStatusRepOk(RealmStatusRep):
    def __init__(
        self,
        in_maintenance: bool,
        maintenance_type: Optional[MaintenanceType],
        maintenance_started_on: Optional[DateTime],
        maintenance_started_by: Optional[DeviceID],
        encryption_revision: int,
    ) -> None: ...
    @property
    def in_maintenance(self) -> bool: ...
    @property
    def maintenance_type(self) -> Optional[MaintenanceType]: ...
    @property
    def maintenance_started_on(self) -> Optional[DateTime]: ...
    @property
    def maintenance_started_by(self) -> Optional[DeviceID]: ...
    @property
    def encryption_revision(self) -> int: ...

class RealmStatusRepNotAllowed(RealmStatusRep): ...

class RealmStatusRepNotFound(RepWithReason, RealmStatusRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmStatusRepUnknownStatus(UnknownStatus, RealmStatusRep): ...

class RealmStatsReq:
    def __init__(self, realm_id: RealmID) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmStatsReq) -> bool: ...
    def __ne__(self, other: RealmStatsReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    def dump(self) -> bytes: ...

class RealmStatsRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmStatsRep) -> bool: ...
    def __ne__(self, other: RealmStatsRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> RealmStatsRep: ...

class RealmStatsRepOk(RealmStatsRep):
    def __init__(self, blocks_size: int, vlobs_size: int) -> None: ...
    @property
    def blocks_size(self) -> int: ...
    @property
    def vlobs_size(self) -> int: ...

class RealmStatsRepNotAllowed(RealmStatsRep): ...

class RealmStatsRepNotFound(RepWithReason, RealmStatsRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmStatsRepUnknownStatus(UnknownStatus, RealmStatsRep): ...

class RealmGetRoleCertificatesReq:
    def __init__(self, realm_id: RealmID) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmGetRoleCertificatesReq) -> bool: ...
    def __ne__(self, other: RealmGetRoleCertificatesReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    def dump(self) -> bytes: ...

class RealmGetRoleCertificatesRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmGetRoleCertificatesRep) -> bool: ...
    def __ne__(self, other: RealmGetRoleCertificatesRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> RealmGetRoleCertificatesRep: ...

class RealmGetRoleCertificatesRepOk(RealmGetRoleCertificatesRep):
    def __init__(self, certificates: List[bytes]) -> None: ...
    @property
    def certificates(self) -> Tuple[bytes]: ...

class RealmGetRoleCertificatesRepNotAllowed(RealmGetRoleCertificatesRep): ...

class RealmGetRoleCertificatesRepNotFound(RepWithReason, RealmGetRoleCertificatesRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmGetRoleCertificatesRepUnknownStatus(UnknownStatus, RealmGetRoleCertificatesRep): ...

class RealmUpdateRolesReq:
    def __init__(self, role_certificate: bytes, recipient_message: Optional[bytes]) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmUpdateRolesReq) -> bool: ...
    def __ne__(self, other: RealmUpdateRolesReq) -> bool: ...
    @property
    def role_certificate(self) -> bytes: ...
    @property
    def recipient_message(self) -> Optional[bytes]: ...
    def dump(self) -> bytes: ...

class RealmUpdateRolesRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmUpdateRolesRep) -> bool: ...
    def __ne__(self, other: RealmUpdateRolesRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> RealmUpdateRolesRep: ...

class RealmUpdateRolesRepRequireGreaterTimestamp(RealmUpdateRolesRep):
    def __init__(self, strictly_greater_than: DateTime): ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class RealmUpdateRolesRepBadTimestamp(RepWithReason, RealmUpdateRolesRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class RealmUpdateRolesRepOk(RealmUpdateRolesRep): ...

class RealmUpdateRolesRepNotAllowed(RepWithReason, RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmUpdateRolesRepInvalidCertification(RepWithReason, RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmUpdateRolesRepInvalidData(RepWithReason, RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmUpdateRolesRepAlreadyGranted(RealmUpdateRolesRep): ...

class RealmUpdateRolesRepIncompatibleProfile(RepWithReason, RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmUpdateRolesRepNotFound(RepWithReason, RealmUpdateRolesRep):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmUpdateRolesRepInMaintenance(RealmUpdateRolesRep): ...
class RealmUpdateRolesRepUserRevoked(RealmUpdateRolesRep): ...
class RealmUpdateRolesRepUnknownStatus(UnknownStatus, RealmUpdateRolesRep): ...

class RealmStartReencryptionMaintenanceReq:
    def __init__(
        self,
        realm_id: RealmID,
        encryption_revision: int,
        timestamp: DateTime,
        per_participant_message: dict[UserID, bytes],
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmStartReencryptionMaintenanceReq) -> bool: ...
    def __ne__(self, other: RealmStartReencryptionMaintenanceReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def per_participant_message(self) -> dict[UserID, bytes]: ...
    def dump(self) -> bytes: ...

class RealmStartReencryptionMaintenanceRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmStartReencryptionMaintenanceRep) -> bool: ...
    def __ne__(self, other: RealmStartReencryptionMaintenanceRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> RealmStartReencryptionMaintenanceRep: ...

class RealmStartReencryptionMaintenanceRepRequireGreaterTimestamp(RealmUpdateRolesRep):
    def __init__(self, strictly_greater_than: DateTime): ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class RealmStartReencryptionMaintenanceRepRepBadTimestamp(RepWithReason, RealmUpdateRolesRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class RealmStartReencryptionMaintenanceRepOk(RealmStartReencryptionMaintenanceRep): ...
class RealmStartReencryptionMaintenanceRepNotAllowed(RealmStartReencryptionMaintenanceRep): ...

class RealmStartReencryptionMaintenanceRepNotFound(
    RepWithReason, RealmStartReencryptionMaintenanceRep
):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmStartReencryptionMaintenanceRepBadEncryptionRevision(
    RealmStartReencryptionMaintenanceRep
): ...

class RealmStartReencryptionMaintenanceRepParticipantMismatch(
    RepWithReason, RealmStartReencryptionMaintenanceRep
):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmStartReencryptionMaintenanceRepMaintenanceError(
    RepWithReason, RealmStartReencryptionMaintenanceRep
):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmStartReencryptionMaintenanceRepInMaintenance(RealmStartReencryptionMaintenanceRep): ...
class RealmStartReencryptionMaintenanceRepUnknownStatus(
    UnknownStatus, RealmStartReencryptionMaintenanceRep
): ...

class RealmFinishReencryptionMaintenanceReq:
    def __init__(self, realm_id: RealmID, encryption_revision: int) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmFinishReencryptionMaintenanceReq) -> bool: ...
    def __ne__(self, other: RealmFinishReencryptionMaintenanceReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    def dump(self) -> bytes: ...

class RealmFinishReencryptionMaintenanceRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: RealmFinishReencryptionMaintenanceRep) -> bool: ...
    def __ne__(self, other: RealmFinishReencryptionMaintenanceRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> RealmFinishReencryptionMaintenanceRep: ...

class RealmFinishReencryptionMaintenanceRepOk(RealmFinishReencryptionMaintenanceRep): ...
class RealmFinishReencryptionMaintenanceRepNotAllowed(RealmFinishReencryptionMaintenanceRep): ...

class RealmFinishReencryptionMaintenanceRepNotFound(
    RepWithReason, RealmFinishReencryptionMaintenanceRep
):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmFinishReencryptionMaintenanceRepBadEncryptionRevision(
    RealmFinishReencryptionMaintenanceRep
): ...

class RealmFinishReencryptionMaintenanceRepNotInMaintenance(
    RepWithReason, RealmFinishReencryptionMaintenanceRep
):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmFinishReencryptionMaintenanceRepMaintenanceError(
    RepWithReason, RealmFinishReencryptionMaintenanceRep
):
    def __init__(self, reason: Optional[str]) -> None: ...

class RealmFinishReencryptionMaintenanceRepUnknownStatus(
    UnknownStatus, RealmFinishReencryptionMaintenanceRep
): ...

class MaintenanceType:
    def __init__(self, maintenance_type: str) -> None: ...
    def __eq__(self, other: Optional[MaintenanceType]) -> bool: ...
    def __ne__(self, other: Optional[MaintenanceType]) -> bool: ...
    @classmethod
    def GARBAGE_COLLECTION(cls) -> MaintenanceType: ...
    @classmethod
    def REENCRYPTION(cls) -> MaintenanceType: ...

# Ping

class AuthenticatedPingReq:
    def __init__(self, ping: str) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: AuthenticatedPingReq) -> bool: ...
    def __ne__(self, other: AuthenticatedPingReq) -> bool: ...
    @property
    def ping(self) -> str: ...
    def dump(self) -> bytes: ...

class AuthenticatedPingRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: AuthenticatedPingRep) -> bool: ...
    def __ne__(self, other: AuthenticatedPingRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> AuthenticatedPingRep: ...

class AuthenticatedPingRepOk(AuthenticatedPingRep):
    def __init__(self, pong: str) -> None: ...
    @property
    def pong(self) -> str: ...

class AuthenticatedPingRepUnknownStatus(UnknownStatus, AuthenticatedPingRep): ...

class InvitedPingReq:
    def __init__(self, ping: str) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: InvitedPingReq) -> bool: ...
    def __ne__(self, other: InvitedPingReq) -> bool: ...
    @property
    def ping(self) -> str: ...
    def dump(self) -> bytes: ...

class InvitedPingRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: InvitedPingRep) -> bool: ...
    def __ne__(self, other: InvitedPingRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> InvitedPingRep: ...

class InvitedPingRepOk(InvitedPingRep):
    def __init__(self, pong: str) -> None: ...
    @property
    def pong(self) -> str: ...

class InvitedPingRepUnknownStatus(UnknownStatus, InvitedPingRep): ...

# Vlob

class VlobCreateReq:
    def __init__(
        self,
        realm_id: RealmID,
        encryption_revision: int,
        vlob_id: VlobID,
        timestamp: DateTime,
        blob: bytes,
        sequester_blob: Optional[dict[SequesterServiceID, bytes]],
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobCreateReq) -> bool: ...
    def __ne__(self, other: VlobCreateReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def sequester_blob(self) -> Optional[dict[SequesterServiceID, bytes]]: ...
    def dump(self) -> bytes: ...

class VlobCreateRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobCreateRep) -> bool: ...
    def __ne__(self, other: VlobCreateRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> VlobCreateRep: ...

class VlobCreateRepRequireGreaterTimestamp(VlobCreateRep):
    def __init__(self, strictly_greater_than: DateTime): ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class VlobCreateRepBadTimestamp(RepWithReason, VlobCreateRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class VlobCreateRepSequesterInconsistency(VlobCreateRep):
    def __init__(
        self,
        sequester_authority_certificate: bytes,
        sequester_services_certificates: List[bytes],
    ) -> None: ...
    @property
    def sequester_authority_certificate(self) -> bytes: ...
    @property
    def sequester_services_certificates(self) -> Tuple[bytes]: ...

class VlobCreateRepRejectedBySequesterService(VlobCreateRep):
    def __init__(self, service_id: SequesterServiceID, service_label: str, reason: str) -> None: ...
    @property
    def service_id(self) -> SequesterServiceID: ...
    @property
    def service_label(self) -> str: ...
    @property
    def reason(self) -> str: ...

class VlobCreateRepTimeout(VlobCreateRep): ...
class VlobCreateRepOk(VlobCreateRep): ...

class VlobCreateRepAlreadyExists(RepWithReason, VlobCreateRep):
    def __init__(self, arg: Reason) -> None: ...

class VlobCreateRepNotAllowed(VlobCreateRep):
    def __init__(self) -> None: ...

class VlobCreateRepBadEncryptionRevision(VlobCreateRep):
    def __init__(self) -> None: ...

class VlobCreateRepInMaintenance(VlobCreateRep):
    def __init__(self) -> None: ...

class VlobCreateRepNotASequesteredOrganization(VlobCreateRep):
    def __init__(self) -> None: ...

class VlobCreateRepUnknownStatus(UnknownStatus, VlobCreateRep):
    def __init__(self) -> None: ...

class VlobReadReq:
    def __init__(
        self,
        encryption_revision: int,
        vlob_id: VlobID,
        version: Optional[int],
        timestamp: Optional[DateTime],
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobReadReq) -> bool: ...
    def __ne__(self, other: VlobReadReq) -> bool: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def version(self) -> Optional[int]: ...
    @property
    def timestamp(self) -> Optional[DateTime]: ...
    def dump(self) -> bytes: ...

class VlobReadRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobReadRep) -> bool: ...
    def __ne__(self, other: VlobReadRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> VlobReadRep: ...

class VlobReadRepOk(VlobReadRep):
    def __init__(
        self,
        version: int,
        blob: bytes,
        author: DeviceID,
        timestamp: DateTime,
        author_last_role_granted_on: Optional[DateTime],
    ) -> None: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def author(self) -> DeviceID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def author_last_role_granted_on(self) -> Optional[DateTime]: ...

class VlobReadRepNotFound(RepWithReason, VlobReadRep):
    def __init__(self, arg: Reason) -> None: ...

class VlobReadRepNotAllowed(VlobReadRep): ...
class VlobReadRepBadVersion(VlobReadRep): ...
class VlobReadRepBadEncryptionRevision(VlobReadRep): ...
class VlobReadRepInMaintenance(VlobReadRep): ...
class VlobReadRepUnknownStatus(UnknownStatus, VlobReadRep): ...

class VlobUpdateReq:
    def __init__(
        self,
        encryption_revision: int,
        vlob_id: VlobID,
        timestamp: DateTime,
        version: int,
        blob: bytes,
        sequester_blob: Optional[dict[SequesterServiceID, bytes]],
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobUpdateReq) -> bool: ...
    def __ne__(self, other: VlobUpdateReq) -> bool: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def timestamp(self) -> DateTime: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
    @property
    def sequester_blob(self) -> Optional[dict[SequesterServiceID, bytes]]: ...
    def dump(self) -> bytes: ...

class VlobUpdateRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobUpdateRep) -> bool: ...
    def __ne__(self, other: VlobUpdateRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> VlobUpdateRep: ...

class VlobUpdateRepRequireGreaterTimestamp(VlobUpdateRep):
    def __init__(self, strictly_greater_than: DateTime): ...
    @property
    def strictly_greater_than(self) -> DateTime: ...

class VlobUpdateRepBadTimestamp(RepWithReason, VlobUpdateRep):
    def __init__(
        self,
        reason: Optional[str],
        ballpark_client_early_offset: float,
        ballpark_client_late_offset: float,
        backend_timestamp: DateTime,
        client_timestamp: DateTime,
    ) -> None: ...
    @property
    def ballpark_client_early_offset(self) -> float: ...
    @property
    def ballpark_client_late_offset(self) -> float: ...
    @property
    def backend_timestamp(self) -> DateTime: ...
    @property
    def client_timestamp(self) -> DateTime: ...

class VlobUpdateRepSequesterInconsistency(VlobUpdateRep):
    def __init__(
        self,
        sequester_authority_certificate: bytes,
        sequester_services_certificates: List[bytes],
    ) -> None: ...
    @property
    def sequester_authority_certificate(self) -> bytes: ...
    @property
    def sequester_services_certificates(self) -> Tuple[bytes]: ...

class VlobUpdateRepRejectedBySequesterService(VlobUpdateRep):
    def __init__(self, service_id: SequesterServiceID, service_label: str, reason: str) -> None: ...
    @property
    def service_id(self) -> SequesterServiceID: ...
    @property
    def service_label(self) -> str: ...
    @property
    def reason(self) -> str: ...

class VlobUpdateRepTimeout(VlobUpdateRep): ...
class VlobUpdateRepOk(VlobUpdateRep): ...

class VlobUpdateRepNotFound(RepWithReason, VlobUpdateRep):
    def __init__(self, arg: Reason) -> None: ...

class VlobUpdateRepNotAllowed(VlobUpdateRep): ...
class VlobUpdateRepBadVersion(VlobUpdateRep): ...
class VlobUpdateRepBadEncryptionRevision(VlobUpdateRep): ...
class VlobUpdateRepInMaintenance(VlobUpdateRep): ...
class VlobUpdateRepNotASequesteredOrganization(VlobUpdateRep): ...

class VlobUpdateRepUnknownStatus(UnknownStatus, VlobUpdateRep):
    def __init__(self, arg: Reason) -> None: ...

class VlobPollChangesReq:
    def __init__(
        self,
        realm_id: RealmID,
        last_checkpoint: int,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobPollChangesReq) -> bool: ...
    def __ne__(self, other: VlobPollChangesReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def last_checkpoint(self) -> int: ...
    def dump(self) -> bytes: ...

class VlobPollChangesRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobPollChangesRep) -> bool: ...
    def __ne__(self, other: VlobPollChangesRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> VlobPollChangesRep: ...

class VlobPollChangesRepOk(VlobPollChangesRep):
    def __init__(
        self,
        changes: dict[VlobID, int],
        current_checkpoint: int,
    ) -> None: ...
    @property
    def changes(self) -> dict[VlobID, int]: ...
    @property
    def current_checkpoint(self) -> int: ...

class VlobPollChangesRepNotFound(RepWithReason, VlobPollChangesRep):
    def __init__(self, arg: Reason) -> None: ...

class VlobPollChangesRepNotAllowed(VlobPollChangesRep): ...
class VlobPollChangesRepInMaintenance(VlobPollChangesRep): ...
class VlobPollChangesRepUnknownStatus(UnknownStatus, VlobPollChangesRep): ...

class VlobListVersionsReq:
    def __init__(
        self,
        vlob_id: VlobID,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobListVersionsReq) -> bool: ...
    def __ne__(self, other: VlobListVersionsReq) -> bool: ...
    @property
    def vlob_id(self) -> VlobID: ...
    def dump(self) -> bytes: ...

class VlobListVersionsRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobListVersionsRep) -> bool: ...
    def __ne__(self, other: VlobListVersionsRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> VlobListVersionsRep: ...

class VlobListVersionsRepOk(VlobListVersionsRep):
    def __init__(
        self,
        versions: dict[int, Tuple[DateTime, DeviceID]],
    ) -> None: ...
    @property
    def versions(self) -> dict[int, Tuple[DateTime, DeviceID]]: ...

class VlobListVersionsRepNotFound(RepWithReason, VlobListVersionsRep):
    def __init__(self, arg: Reason) -> None: ...

class VlobListVersionsRepNotAllowed(VlobListVersionsRep): ...
class VlobListVersionsRepInMaintenance(VlobListVersionsRep): ...
class VlobListVersionsRepUnknownStatus(UnknownStatus, VlobListVersionsRep): ...

class VlobMaintenanceGetReencryptionBatchReq:
    def __init__(
        self,
        realm_id: RealmID,
        encryption_revision: int,
        size: int,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobMaintenanceGetReencryptionBatchReq) -> bool: ...
    def __ne__(self, other: VlobMaintenanceGetReencryptionBatchReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def size(self) -> int: ...
    def dump(self) -> bytes: ...

class VlobMaintenanceGetReencryptionBatchRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobMaintenanceGetReencryptionBatchRep) -> bool: ...
    def __ne__(self, other: VlobMaintenanceGetReencryptionBatchRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> VlobMaintenanceGetReencryptionBatchRep: ...

class VlobMaintenanceGetReencryptionBatchRepOk(VlobMaintenanceGetReencryptionBatchRep):
    def __init__(
        self,
        batch: List[ReencryptionBatchEntry],
    ) -> None: ...
    @property
    def batch(self) -> Tuple[ReencryptionBatchEntry]: ...

class VlobMaintenanceGetReencryptionBatchRepNotFound(
    RepWithReason,
    VlobMaintenanceGetReencryptionBatchRep,
):
    def __init__(self, arg: Reason) -> None: ...

class VlobMaintenanceGetReencryptionBatchRepNotAllowed(VlobMaintenanceGetReencryptionBatchRep): ...

class VlobMaintenanceGetReencryptionBatchRepNotInMaintenance(
    RepWithReason,
    VlobMaintenanceGetReencryptionBatchRep,
):
    def __init__(self, arg: Reason) -> None: ...

class VlobMaintenanceGetReencryptionBatchRepBadEncryptionRevision(
    VlobMaintenanceGetReencryptionBatchRep
): ...

class VlobMaintenanceGetReencryptionBatchRepMaintenanceError(
    RepWithReason, VlobMaintenanceGetReencryptionBatchRep
):
    def __init__(self, arg: Reason) -> None: ...

class VlobMaintenanceGetReencryptionBatchRepUnknownStatus(
    UnknownStatus, VlobMaintenanceGetReencryptionBatchRep
):
    def __init__(self, arg: Reason) -> None: ...

class VlobMaintenanceSaveReencryptionBatchReq:
    def __init__(
        self,
        realm_id: RealmID,
        encryption_revision: int,
        batch: Tuple[ReencryptionBatchEntry],
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobMaintenanceSaveReencryptionBatchReq) -> bool: ...
    def __ne__(self, other: VlobMaintenanceSaveReencryptionBatchReq) -> bool: ...
    @property
    def realm_id(self) -> RealmID: ...
    @property
    def encryption_revision(self) -> int: ...
    @property
    def batch(self) -> Tuple[ReencryptionBatchEntry]: ...
    def dump(self) -> bytes: ...

class VlobMaintenanceSaveReencryptionBatchRep:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VlobMaintenanceSaveReencryptionBatchRep) -> bool: ...
    def __ne__(self, other: VlobMaintenanceSaveReencryptionBatchRep) -> bool: ...
    def dump(self) -> bytes: ...
    def load(buf: bytes) -> VlobMaintenanceSaveReencryptionBatchRep: ...

class VlobMaintenanceSaveReencryptionBatchRepOk(VlobMaintenanceSaveReencryptionBatchRep):
    def __init__(
        self,
        total: int,
        done: int,
    ) -> None: ...
    @property
    def total(self) -> int: ...
    @property
    def done(self) -> int: ...

class VlobMaintenanceSaveReencryptionBatchRepNotFound(
    RepWithReason,
    VlobMaintenanceSaveReencryptionBatchRep,
):
    def __init__(self, arg: Reason) -> None: ...

class VlobMaintenanceSaveReencryptionBatchRepNotAllowed(
    VlobMaintenanceSaveReencryptionBatchRep
): ...

class VlobMaintenanceSaveReencryptionBatchRepNotInMaintenance(
    RepWithReason,
    VlobMaintenanceSaveReencryptionBatchRep,
):
    def __init__(self, arg: Reason) -> None: ...

class VlobMaintenanceSaveReencryptionBatchRepBadEncryptionRevision(
    VlobMaintenanceSaveReencryptionBatchRep
): ...

class VlobMaintenanceSaveReencryptionBatchRepMaintenanceError(
    RepWithReason,
    VlobMaintenanceSaveReencryptionBatchRep,
):
    def __init__(self, arg: Reason) -> None: ...

class VlobMaintenanceSaveReencryptionBatchRepUnknownStatus(
    UnknownStatus, VlobMaintenanceSaveReencryptionBatchRep
):
    def __init__(self, arg: Reason) -> None: ...

class ReencryptionBatchEntry:
    def __init__(self, vlob_id: VlobID, version: int, blob: bytes) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: ReencryptionBatchEntry) -> bool: ...
    def __ne__(self, other: ReencryptionBatchEntry) -> bool: ...
    @property
    def vlob_id(self) -> VlobID: ...
    @property
    def version(self) -> int: ...
    @property
    def blob(self) -> bytes: ...
