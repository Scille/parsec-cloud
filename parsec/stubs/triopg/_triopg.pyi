from __future__ import annotations

from contextlib import asynccontextmanager
from typing import Any, AsyncGenerator

def connect(*args: Any, **kwargs: Any) -> TrioConnectionProxy: ...
def create_pool(*args: Any, **kwargs: Any) -> TrioPoolProxy: ...

class TrioConnectionProxy:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def transaction(self, *args: Any, **kwargs: Any) -> TrioTransactionProxy: ...
    async def prepare(self, *args: Any, **kwargs: Any) -> TrioStatementProxy: ...
    @asynccontextmanager
    async def listen(self, channel: Any, max_buffer_size: int) -> AsyncGenerator[Any, Any]: ...
    def __getattr__(self, attr: str) -> Any: ...
    def cursor(self, *args: Any, **kwargs: Any) -> TrioCursorFactoryProxy: ...
    async def close(self) -> Any: ...
    async def __aenter__(self) -> TrioConnectionProxy: ...
    async def __aexit__(self, *exc: Any) -> Any: ...

class TrioCursorProxy:
    def __init__(self, asyncpg_cursor: Any) -> None: ...
    async def fetch(self, *args: Any, **kwargs: Any) -> Any: ...
    async def fetchrow(self, *args: Any, **kwargs: Any) -> Any: ...
    async def forward(self, *args: Any, **kwargs: Any) -> Any: ...

class TrioCursorFactoryProxy:
    def __init__(self, asyncpg_transaction_factory: Any) -> None: ...
    def __await__(self) -> Any: ...
    async def _wrapped_asyncpg_await(self) -> TrioCursorProxy: ...
    def __aiter__(self) -> TrioCursorFactoryProxy: ...
    async def __anext__(self) -> Any: ...

class TrioPoolAcquireContextProxy:
    def __init__(self, asyncpg_acquire_context: Any) -> None: ...
    async def __aenter__(self, *args: Any) -> TrioConnectionProxy: ...
    async def __aexit__(self, *args: Any) -> Any: ...

class TrioPoolProxy:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def acquire(self) -> TrioPoolAcquireContextProxy: ...
    async def execute(self, statement: str, *args: Any, timeout: float = None) -> Any: ...
    async def executemany(self, statement: str, args, *, timeout: float = None) -> Any: ...
    async def fetch(self, query, *args, timeout: float = None) -> Any: ...
    async def fetchval(self, query, *args, timeout: float = None) -> Any: ...
    async def fetchrow(self, query, *args, timeout: float = None) -> Any: ...
    async def close(self) -> Any: ...
    def terminate(self) -> Any: ...
    async def __aenter__(self) -> TrioPoolProxy: ...
    async def __aexit__(self, *exc: Any) -> Any: ...

class TrioStatementProxy:
    def __init__(self, asyncpg_statement: Any) -> None: ...
    def cursor(self, *args: Any, **kwargs: Any) -> TrioCursorFactoryProxy: ...
    def __getattr__(self, attr: Any) -> Any: ...

class TrioTransactionProxy:
    def __init__(self, asyncpg_transaction: Any) -> None: ...
    async def __aenter__(self, *args: Any) -> Any: ...
    async def __aexit__(self, *args: Any) -> Any: ...
