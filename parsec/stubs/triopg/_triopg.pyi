# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS

from __future__ import annotations

from contextlib import asynccontextmanager
from typing import Any, AsyncIterator

def connect(*args: Any, **kwargs: Any) -> TrioConnectionProxy: ...
def create_pool(*args: Any, **kwargs: Any) -> TrioPoolProxy: ...

class TrioConnectionProxy:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def transaction(self, *args: Any, **kwargs: Any) -> TrioTransactionProxy: ...
    async def prepare(self, *args: Any, **kwargs: Any) -> TrioStatementProxy: ...
    @asynccontextmanager
    async def listen(self, channel: Any, max_buffer_size: int) -> AsyncIterator[Any]:
        ...
        yield ...
        ...
    def __getattr__(self, attr: str) -> Any: ...
    def cursor(self, *args: Any, **kwargs: Any) -> TrioCursorFactoryProxy: ...
    async def close(self) -> Any: ...
    async def __aenter__(self) -> TrioConnectionProxy: ...
    async def __aexit__(self, *exc: Any) -> Any: ...

class TrioPoolProxy:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def acquire(self) -> TrioPoolAcquireContextProxy: ...
    async def execute(self, statement: str, *args: Any, timeout: float | None = None) -> Any: ...
    async def executemany(
        self, statement: str, args: Any, *, timeout: float | None = None
    ) -> Any: ...
    async def fetch(self, query: str, *args: Any, timeout: float | None = None) -> Any: ...
    async def fetchval(self, query: str, *args: Any, timeout: float | None = None) -> Any: ...
    async def fetchrow(self, query: str, *args: Any, timeout: float | None = None) -> Any: ...
    async def close(self) -> Any: ...
    def terminate(self) -> Any: ...
    async def __aenter__(self) -> TrioPoolProxy: ...
    async def __aexit__(self, *exc: Any) -> Any: ...

class TrioTransactionProxy:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def __aenter__(self) -> TrioConnectionProxy: ...
    async def __aexit__(self, *exc: Any) -> Any: ...

class TrioPoolAcquireContextProxy:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def __aenter__(self) -> TrioConnectionProxy: ...
    async def __aexit__(self, *exc: Any) -> Any: ...

class TrioCursorFactoryProxy:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class TrioStatementProxy:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
