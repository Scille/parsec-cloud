# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS

from __future__ import annotations

from typing import Any, Type

from qrcode.image.base import BaseImage
from qrcode.image.pil import PilImage
from qrcode.util import QRData

ERROR_CORRECT_H: int = ...

class QRCode:
    def __init__(
        self,
        version: None | int = ...,
        error_correction: int = ...,
        box_size: int = ...,
        border: int = ...,
        image_factory: BaseImage | None = ...,
        mask_pattern: None | int = ...,
    ) -> None: ...
    @property
    def mask_pattern(self) -> int: ...
    @mask_pattern.setter
    def mask_pattern(self, pattern: int) -> None: ...
    def clear(self) -> None: ...
    def add_data(self, data: QRData | str | bytes, optimize: int = ...) -> None: ...
    def make(self, fit: bool = ...) -> None: ...
    def makeImpl(self, test: bool, mask_pattern: int) -> None: ...
    def setup_position_probe_pattern(self, row: int, col: int) -> None: ...
    def best_fit(self, start: None | int = ...) -> int: ...
    def best_mask_pattern(self) -> int: ...
    def print_tty(self, out: None | int = ...) -> None: ...
    def print_ascii(self, out: None | int = ..., tty: bool = ..., invert: bool = ...) -> None: ...
    def make_image(
        self, image_factory: None | Type[BaseImage] = ..., **kwargs: Any
    ) -> BaseImage | PilImage | Any: ...
    def is_constrained(self, row: int, col: int) -> bool: ...
    def get_module_context(self, row: int, col: int) -> list[None | list[bool]]: ...
    def setup_timing_pattern(self) -> None: ...
    def setup_position_adjust_pattern(self) -> None: ...
    def setup_type_number(self, test: bool) -> None: ...
    def setup_type_info(self, test: bool, mask_pattern: int) -> None: ...
    def map_data(self, data: QRData, mask_pattern: int) -> None: ...
    def get_matrix(self) -> list[list[bool]]: ...
