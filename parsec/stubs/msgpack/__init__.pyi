# Parsec Cloud (https://parsec.cloud) Copyright (c) AGPL-3.0 2016-present Scille SAS

from __future__ import annotations

from typing import Any, Callable, Protocol, Type

def packb(o: object, **kwargs: object) -> bytes: ...
def unpackb(packed: object, **kwargs: object) -> Any: ...

"""
Describe a `File-Like` object as described in `help(Unpacker)`
"""

class FileLike(Protocol):
    def read(self, n: int) -> bytes: ...

class Unpacker:
    def __init__(
        self,
        file_like: FileLike | None = None,
        read_size: int = 0,
        use_list: bool = True,
        raw: bool = False,
        timestamp: int = 0,
        strict_map_key: bool = True,
        object_hook: Callable[[dict[Any, Any]], None] | None = None,
        unicode_errors: str | None = None,
        max_buffer_size: int = 104857600,
        ext_hook: Callable[..., None] | None = None,
        max_bin_len: int = -1,
        max_array_len: int = -1,
        max_map_len: int = -1,
        max_ext_len: int = -1,
    ) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def feed(self, next_bytes: bytes) -> None: ...
    def read_map_header(self) -> int: ...
    def skip(self) -> None: ...
    def tell(self) -> int: ...
    def unpack(self) -> Any: ...

class ExtType:
    def __new__(cls: Type[ExtType], code: object, data: object) -> ExtType: ...
    def __add__(self, value: object) -> Any: ...
    def __contains__(self) -> bool: ...
    def __eq__(self, value: object) -> bool: ...
    def __ge__(self, value: object) -> bool: ...
    def __getattribute__(self, name: str) -> Any: ...
    def __getitem__(self, key: str) -> Any: ...
    def __gt__(self, value: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> Any: ...
    def __le__(self, value: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, value: object) -> bool: ...
    def __mul__(self, value: object) -> Any: ...
    def __rmul__(self, value: object) -> Any: ...
    def count(self, value: object) -> int: ...
    def index(self, value: object, start: int = 0, stop: int = 9223372036854775807) -> int: ...
